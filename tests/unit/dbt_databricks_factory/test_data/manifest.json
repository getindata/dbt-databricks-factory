{
    "metadata": {
        "dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v7.json",
        "dbt_version": "1.3.1",
        "generated_at": "2023-07-13T12:56:11.473249Z",
        "invocation_id": "dd41d077-7992-4054-bf18-03f57e508547",
        "env": {},
        "project_id": "d6a5ed99b9f261d3be52a9c1fafcdfc6",
        "user_id": "649b081c-797e-475b-abd5-7cddcbe38705",
        "send_anonymous_usage_stats": true,
        "adapter_type": "bigquery"
    },
    "nodes": {
        "model.pipeline_example.suppliers": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "source.pipeline_example.tpch.supplier"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "intermediate_test",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "incremental",
                "incremental_strategy": null,
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": "supp_key",
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "dataops-test-project",
            "schema": "intermediate_test",
            "fqn": [
                "pipeline_example",
                "source",
                "suppliers"
            ],
            "unique_id": "model.pipeline_example.suppliers",
            "raw_code": "{{\n  config(materialized = 'incremental',\n         unique_key = 'supp_key',\n         schema = 'intermediate_test',\n         persist_docs = {\"relation\": true, \"columns\": true})\n}}\nWITH suppliers AS (\n    SELECT\n        s_suppkey AS supp_key,\n        s_nationkey AS nation_key,\n        TRIM(s_name) AS name\n    FROM {{ source('tpch', 'supplier') }}\n),\nFINAL AS (\n    SELECT * FROM suppliers\n)\nSELECT * FROM FINAL",
            "language": "sql",
            "package_name": "pipeline_example",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example",
            "path": "source/suppliers.sql",
            "original_file_path": "models/source/suppliers.sql",
            "name": "suppliers",
            "alias": "suppliers",
            "checksum": {
                "name": "sha256",
                "checksum": "c90597d08f38d17f4b9ebed309a3c2942e0643cf771b632844a5f33ccefb65fa"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "tpch",
                    "supplier"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/pipeline_example/models/source/suppliers.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "incremental",
                "unique_key": "supp_key",
                "schema": "intermediate_test",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                }
            },
            "created_at": 1689252907.7309878,
            "compiled_code": "\nWITH suppliers AS (\n    SELECT\n        s_suppkey AS supp_key,\n        s_nationkey AS nation_key,\n        TRIM(s_name) AS name\n    FROM `dataops-test-project`.`tpch`.`supplier`\n),\nFINAL AS (\n    SELECT * FROM suppliers\n)\nSELECT * FROM FINAL",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`dataops-test-project`.`intermediate_test`.`suppliers`"
        },
        "model.pipeline_example.not_shiped_by_rail": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "source.pipeline_example.tpch.lineitem"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "intermediate_test",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "dataops-test-project",
            "schema": "intermediate_test",
            "fqn": [
                "pipeline_example",
                "intermediate",
                "not_shiped_by_rail"
            ],
            "unique_id": "model.pipeline_example.not_shiped_by_rail",
            "raw_code": "{{\n    config(materialized = 'table',\n           schema = 'intermediate_test',\n           persist_docs = {\"relation\": true, \"columns\": true}\n    )\n}}\nWITH automobile_segment AS (\n    SELECT\n        l_orderkey AS order_key,\n        l_partkey AS part_key,\n        l_suppkey AS supp_key,\n        l_extendedprice AS price,\n        l_shipmode AS ship_mode\n    FROM  {{ source('tpch', 'lineitem') }}\n    WHERE l_shipmode <> 'RAIL'\n), FINAL AS (\n    SELECT * FROM automobile_segment\n)\nSELECT * FROM FINAL",
            "language": "sql",
            "package_name": "pipeline_example",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example",
            "path": "intermediate/not_shiped_by_rail.sql",
            "original_file_path": "models/intermediate/not_shiped_by_rail.sql",
            "name": "not_shiped_by_rail",
            "alias": "not_shiped_by_rail",
            "checksum": {
                "name": "sha256",
                "checksum": "1f37320db432a81950ee0c12a952feba6af47b510aa299bcf3ef3d6726e66720"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "tpch",
                    "lineitem"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/pipeline_example/models/intermediate/not_shiped_by_rail.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table",
                "schema": "intermediate_test",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                }
            },
            "created_at": 1689252907.7602224,
            "compiled_code": "\nWITH automobile_segment AS (\n    SELECT\n        l_orderkey AS order_key,\n        l_partkey AS part_key,\n        l_suppkey AS supp_key,\n        l_extendedprice AS price,\n        l_shipmode AS ship_mode\n    FROM  `dataops-test-project`.`tpch`.`lineitem`\n    WHERE l_shipmode <> 'RAIL'\n), FINAL AS (\n    SELECT * FROM automobile_segment\n)\nSELECT * FROM FINAL",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`dataops-test-project`.`intermediate_test`.`not_shiped_by_rail`"
        },
        "model.pipeline_example.automibile_customers_from_europe": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "source.pipeline_example.tpch.customer",
                    "model.pipeline_example.all_europe_region_countries"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "intermediate_test",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "dataops-test-project",
            "schema": "intermediate_test",
            "fqn": [
                "pipeline_example",
                "intermediate",
                "automibile_customers_from_europe"
            ],
            "unique_id": "model.pipeline_example.automibile_customers_from_europe",
            "raw_code": "{{\n    config(materialized = 'table',\n           schema = 'intermediate_test',\n           persist_docs = {\"relation\": true, \"columns\": true}\n    )\n}}\nWITH europe_auto_customers AS (\n    SELECT\n        ac.c_custkey AS cust_key,\n        ac.c_nationkey AS nation_key,\n        ac.c_mktsegment AS mkt_segment\n    FROM {{ source('tpch', 'customer') }} AS ac\n    JOIN {{ ref(\"all_europe_region_countries\") }} AS aer ON ac.c_nationkey = aer.nation_key\n    WHERE ac.c_mktsegment = 'AUTOMOBILE'\n),\nFINAL AS (\n    SELECT * FROM europe_auto_customers\n)\nSELECT * FROM FINAL",
            "language": "sql",
            "package_name": "pipeline_example",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example",
            "path": "intermediate/automibile_customers_from_europe.sql",
            "original_file_path": "models/intermediate/automibile_customers_from_europe.sql",
            "name": "automibile_customers_from_europe",
            "alias": "automibile_customers_from_europe",
            "checksum": {
                "name": "sha256",
                "checksum": "848d2a933ce0d42aa036115c7942a67ba6eefec3f8d442d4ae4a2e81c1aedf62"
            },
            "tags": [],
            "refs": [
                [
                    "all_europe_region_countries"
                ]
            ],
            "sources": [
                [
                    "tpch",
                    "customer"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/pipeline_example/models/intermediate/automibile_customers_from_europe.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table",
                "schema": "intermediate_test",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                }
            },
            "created_at": 1689252907.767612,
            "compiled_code": "\nWITH europe_auto_customers AS (\n    SELECT\n        ac.c_custkey AS cust_key,\n        ac.c_nationkey AS nation_key,\n        ac.c_mktsegment AS mkt_segment\n    FROM `dataops-test-project`.`tpch`.`customer` AS ac\n    JOIN `dataops-test-project`.`presentation`.`all_europe_region_countries` AS aer ON ac.c_nationkey = aer.nation_key\n    WHERE ac.c_mktsegment = 'AUTOMOBILE'\n),\nFINAL AS (\n    SELECT * FROM europe_auto_customers\n)\nSELECT * FROM FINAL",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`dataops-test-project`.`intermediate_test`.`automibile_customers_from_europe`"
        },
        "model.pipeline_example.supplier_with_nation": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "source.pipeline_example.tpch.nation",
                    "model.pipeline_example.suppliers"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "intermediate_test",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "dataops-test-project",
            "schema": "intermediate_test",
            "fqn": [
                "pipeline_example",
                "intermediate",
                "supplier_with_nation"
            ],
            "unique_id": "model.pipeline_example.supplier_with_nation",
            "raw_code": "{{\n    config(materialized = 'table',\n           schema = 'intermediate_test',\n           persist_docs = {\"relation\": true, \"columns\": true}\n    )\n}}\nWITH supplier_with_nation AS (\n    SELECT\n        ts.supp_key AS supp_key,\n        tn.n_name AS supp_nation\n    FROM  {{ ref( 'suppliers' ) }} AS ts\n    JOIN {{ source('tpch', 'nation') }} AS tn ON tn.n_regionkey = ts.nation_key\n), FINAL AS (\n    SELECT * FROM supplier_with_nation\n)\nSELECT * FROM FINAL",
            "language": "sql",
            "package_name": "pipeline_example",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example",
            "path": "intermediate/supplier_with_nation.sql",
            "original_file_path": "models/intermediate/supplier_with_nation.sql",
            "name": "supplier_with_nation",
            "alias": "supplier_with_nation",
            "checksum": {
                "name": "sha256",
                "checksum": "7a51405150e2da101613451df718edf4035e7dcb0de51bd48204288e587e5a04"
            },
            "tags": [],
            "refs": [
                [
                    "suppliers"
                ]
            ],
            "sources": [
                [
                    "tpch",
                    "nation"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/pipeline_example/models/intermediate/supplier_with_nation.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table",
                "schema": "intermediate_test",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                }
            },
            "created_at": 1689252907.7757854,
            "compiled_code": "\nWITH supplier_with_nation AS (\n    SELECT\n        ts.supp_key AS supp_key,\n        tn.n_name AS supp_nation\n    FROM  `dataops-test-project`.`intermediate_test`.`suppliers` AS ts\n    JOIN `dataops-test-project`.`tpch`.`nation` AS tn ON tn.n_regionkey = ts.nation_key\n), FINAL AS (\n    SELECT * FROM supplier_with_nation\n)\nSELECT * FROM FINAL",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`dataops-test-project`.`intermediate_test`.`supplier_with_nation`"
        },
        "model.pipeline_example.report": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.pipeline_example.orders"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "dataops-test-project",
            "schema": "presentation",
            "fqn": [
                "pipeline_example",
                "presentation",
                "report"
            ],
            "unique_id": "model.pipeline_example.report",
            "raw_code": "{{\n    config(materialized = 'table',\n           persist_docs = {\"relation\": true, \"columns\": true}\n    )\n}}\nWITH report AS (\n    SELECT\n        ts.doy,\n        ts.supp_nation,\n        sum(total_price) AS total_price_per_region\n    FROM  {{ ref(\"orders\") }} AS ts\n    GROUP BY ts.doy, ts.supp_nation\n), FINAL AS (\n    SELECT * FROM report\n)\nSELECT * FROM FINAL",
            "language": "sql",
            "package_name": "pipeline_example",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example",
            "path": "presentation/report.sql",
            "original_file_path": "models/presentation/report.sql",
            "name": "report",
            "alias": "report",
            "checksum": {
                "name": "sha256",
                "checksum": "e5b8a7c7ba650f7122f9b0c1c1a9ff99be4b01db260dd55e4f6e4a9fc70a8c2a"
            },
            "tags": [],
            "refs": [
                [
                    "orders"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {
                "doy": {
                    "name": "doy",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "supp_nation": {
                    "name": "supp_nation",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "total_price_per_region": {
                    "name": "total_price_per_region",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "pipeline_example://models/presentation/schema.yml",
            "compiled_path": "target/compiled/pipeline_example/models/presentation/report.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                }
            },
            "created_at": 1689252907.9293492,
            "compiled_code": "\nWITH report AS (\n    SELECT\n        ts.doy,\n        ts.supp_nation,\n        sum(total_price) AS total_price_per_region\n    FROM  `dataops-test-project`.`presentation`.`orders` AS ts\n    GROUP BY ts.doy, ts.supp_nation\n), FINAL AS (\n    SELECT * FROM report\n)\nSELECT * FROM FINAL",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`dataops-test-project`.`presentation`.`report`"
        },
        "model.pipeline_example.all_europe_region_countries": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "source.pipeline_example.tpch.region",
                    "source.pipeline_example.tpch.nation"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "dataops-test-project",
            "schema": "presentation",
            "fqn": [
                "pipeline_example",
                "presentation",
                "all_europe_region_countries"
            ],
            "unique_id": "model.pipeline_example.all_europe_region_countries",
            "raw_code": "{{\n    config(materialized = 'table',\n           persist_docs = {\"relation\": true, \"columns\": true}\n    )\n}}\nWITH europe_region AS (\n    SELECT\n        r_regionkey AS region_key,\n        TRIM(r_name) AS region\n    FROM {{ source('tpch', 'region') }}\n    WHERE TRIM(r_name) = 'EUROPE'\n), europe_countries AS (\n    SELECT\n        n.n_nationkey AS nation_key,\n        n.n_name AS name,\n        n.n_regionkey AS region_key,\n        TRIM(n.n_comment) AS comment\n    FROM europe_region AS er\n    JOIN {{ source('tpch', 'nation') }} AS n ON er.region_key = n.n_regionkey\n),\nFINAL AS (\n    SELECT * FROM europe_countries\n)\nSELECT * FROM FINAL",
            "language": "sql",
            "package_name": "pipeline_example",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example",
            "path": "presentation/all_europe_region_countries.sql",
            "original_file_path": "models/presentation/all_europe_region_countries.sql",
            "name": "all_europe_region_countries",
            "alias": "all_europe_region_countries",
            "checksum": {
                "name": "sha256",
                "checksum": "24c088b2e859f0c2e645c32c6dd46a23fb29c56fff197cb9052546b2137fd4f3"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "tpch",
                    "region"
                ],
                [
                    "tpch",
                    "nation"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/pipeline_example/models/presentation/all_europe_region_countries.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                }
            },
            "created_at": 1689252907.7900512,
            "compiled_code": "\nWITH europe_region AS (\n    SELECT\n        r_regionkey AS region_key,\n        TRIM(r_name) AS region\n    FROM `dataops-test-project`.`tpch`.`region`\n    WHERE TRIM(r_name) = 'EUROPE'\n), europe_countries AS (\n    SELECT\n        n.n_nationkey AS nation_key,\n        n.n_name AS name,\n        n.n_regionkey AS region_key,\n        TRIM(n.n_comment) AS comment\n    FROM europe_region AS er\n    JOIN `dataops-test-project`.`tpch`.`nation` AS n ON er.region_key = n.n_regionkey\n),\nFINAL AS (\n    SELECT * FROM europe_countries\n)\nSELECT * FROM FINAL",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`dataops-test-project`.`presentation`.`all_europe_region_countries`"
        },
        "model.pipeline_example.supplier_parts": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "source.pipeline_example.tpch.supplier",
                    "source.pipeline_example.tpch.partsupp",
                    "source.pipeline_example.tpch.part"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "dataops-test-project",
            "schema": "presentation",
            "fqn": [
                "pipeline_example",
                "presentation",
                "supplier_parts"
            ],
            "unique_id": "model.pipeline_example.supplier_parts",
            "raw_code": "{{\n    config(materialized = 'table',\n           persist_docs = {\"relation\": true, \"columns\": true}\n    )\n}}\nWith supplier_parts as (\n  SELECT * from {{ source('tpch', 'supplier') }}\n  JOIN {{ source('tpch', 'partsupp') }}\n  ON s_suppkey=ps_suppkey\n  JOIN {{ source('tpch', 'part') }}\n  ON ps_partkey=p_partkey\n)\n\nSELECT\ns_suppkey as supplier_key,\ns_name as supplier_name,\ns_nationkey as nation_key,\ns_acctbal as account_balance,\nps_availqty as available_quantity,\nps_supplycost as supply_cost,\np_partkey as part_key,\np_name as part_name,\np_mfgr as part_manufacturer,\np_brand as part_brand,\np_type as part_type,\np_size as part_size,\np_container as part_container,\np_retailprice as part_retail_price\nFROM supplier_parts",
            "language": "sql",
            "package_name": "pipeline_example",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example",
            "path": "presentation/supplier_parts.sql",
            "original_file_path": "models/presentation/supplier_parts.sql",
            "name": "supplier_parts",
            "alias": "supplier_parts",
            "checksum": {
                "name": "sha256",
                "checksum": "4fa4d876d1fa7941bab92d373e84457469b73e0ebc74f8aff9c3f364e3673f2c"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "tpch",
                    "supplier"
                ],
                [
                    "tpch",
                    "partsupp"
                ],
                [
                    "tpch",
                    "part"
                ]
            ],
            "metrics": [],
            "description": "This table is the join between SUPPLIER, PARTSUPP and PART on SUPPKEY and PARTKEY.\n\nThe important fields that are retained in the join are:\n* nation_key\n* account_balance\n* supplier_name\n* available_quantity\n* supply_cost\n* part_name\n* part_manufacturing\n* part_brand\n* part_type\n* part_size",
            "columns": {
                "part_key": {
                    "name": "part_key",
                    "description": "Part key",
                    "meta": {},
                    "data_type": "int",
                    "quote": null,
                    "tags": []
                },
                "supplier_key": {
                    "name": "supplier_key",
                    "description": "Supplier key",
                    "meta": {},
                    "data_type": "int",
                    "quote": null,
                    "tags": []
                },
                "nation_key": {
                    "name": "nation_key",
                    "description": "Nation key",
                    "meta": {},
                    "data_type": "int",
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "pipeline_example://models/presentation/schema.yml",
            "compiled_path": "target/compiled/pipeline_example/models/presentation/supplier_parts.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                }
            },
            "created_at": 1689252907.9380474,
            "compiled_code": "\nWith supplier_parts as (\n  SELECT * from `dataops-test-project`.`tpch`.`supplier`\n  JOIN `dataops-test-project`.`tpch`.`partsupp`\n  ON s_suppkey=ps_suppkey\n  JOIN `dataops-test-project`.`tpch`.`part`\n  ON ps_partkey=p_partkey\n)\n\nSELECT\ns_suppkey as supplier_key,\ns_name as supplier_name,\ns_nationkey as nation_key,\ns_acctbal as account_balance,\nps_availqty as available_quantity,\nps_supplycost as supply_cost,\np_partkey as part_key,\np_name as part_name,\np_mfgr as part_manufacturer,\np_brand as part_brand,\np_type as part_type,\np_size as part_size,\np_container as part_container,\np_retailprice as part_retail_price\nFROM supplier_parts",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`dataops-test-project`.`presentation`.`supplier_parts`"
        },
        "model.pipeline_example.customer_nation_region": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "source.pipeline_example.tpch.customer",
                    "source.pipeline_example.tpch.nation",
                    "source.pipeline_example.tpch.region"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "dataops-test-project",
            "schema": "presentation",
            "fqn": [
                "pipeline_example",
                "presentation",
                "customer_nation_region"
            ],
            "unique_id": "model.pipeline_example.customer_nation_region",
            "raw_code": "{{\n    config(materialized = 'table',\n           persist_docs = {\"relation\": true, \"columns\": true}\n    )\n}}\nWith customer_nation_region as (\n  SELECT * from {{ source('tpch', 'customer') }}\n  JOIN {{ source('tpch', 'nation') }}\n  ON n_nationkey=c_nationkey\n  JOIN {{ source('tpch', 'region') }}\n  ON n_regionkey=r_regionkey\n)\nSELECT\nr_name as region,\nn_name as nation,\nn_nationkey as nation_key,\nc_name as customer_name,\nc_acctbal as account_balance,\nc_mktsegment as market_segment\nFROM customer_nation_region",
            "language": "sql",
            "package_name": "pipeline_example",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example",
            "path": "presentation/customer_nation_region.sql",
            "original_file_path": "models/presentation/customer_nation_region.sql",
            "name": "customer_nation_region",
            "alias": "customer_nation_region",
            "checksum": {
                "name": "sha256",
                "checksum": "09dc41bd433753c01163efa34e6b73bc7fe0c972c0331660d5b713d3f13115e2"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "tpch",
                    "customer"
                ],
                [
                    "tpch",
                    "nation"
                ],
                [
                    "tpch",
                    "region"
                ]
            ],
            "metrics": [],
            "description": "This table is the join between REGION, NATION and CUSTOMER on REGIONKEY and NATIONKEY.\n\nThe important fields that are retained in the join are:\n* nation\n* region\n* customer_name\n* account_balance\n* market_segment",
            "columns": {
                "nation_key": {
                    "name": "nation_key",
                    "description": "Nation key",
                    "meta": {},
                    "data_type": "int",
                    "quote": null,
                    "tags": []
                },
                "region": {
                    "name": "region",
                    "description": "Region",
                    "meta": {},
                    "data_type": "string",
                    "quote": null,
                    "tags": []
                },
                "nation": {
                    "name": "nation",
                    "description": "Nation",
                    "meta": {},
                    "data_type": "string",
                    "quote": null,
                    "tags": []
                },
                "customer_name": {
                    "name": "customer_name",
                    "description": "Customer name",
                    "meta": {},
                    "data_type": "string",
                    "quote": null,
                    "tags": []
                },
                "account_balance": {
                    "name": "account_balance",
                    "description": "Account balance",
                    "meta": {},
                    "data_type": "int",
                    "quote": null,
                    "tags": []
                },
                "market_segment": {
                    "name": "market_segment",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "pipeline_example://models/presentation/schema.yml",
            "compiled_path": "target/compiled/pipeline_example/models/presentation/customer_nation_region.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                }
            },
            "created_at": 1689252907.934662,
            "compiled_code": "\nWith customer_nation_region as (\n  SELECT * from `dataops-test-project`.`tpch`.`customer`\n  JOIN `dataops-test-project`.`tpch`.`nation`\n  ON n_nationkey=c_nationkey\n  JOIN `dataops-test-project`.`tpch`.`region`\n  ON n_regionkey=r_regionkey\n)\nSELECT\nr_name as region,\nn_name as nation,\nn_nationkey as nation_key,\nc_name as customer_name,\nc_acctbal as account_balance,\nc_mktsegment as market_segment\nFROM customer_nation_region",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`dataops-test-project`.`presentation`.`customer_nation_region`"
        },
        "model.pipeline_example.orders": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "source.pipeline_example.tpch.orders",
                    "model.pipeline_example.automibile_customers_from_europe",
                    "model.pipeline_example.not_shiped_by_rail",
                    "model.pipeline_example.supplier_with_nation"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {
                    "relation": true,
                    "columns": true
                },
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "dataops-test-project",
            "schema": "presentation",
            "fqn": [
                "pipeline_example",
                "presentation",
                "orders"
            ],
            "unique_id": "model.pipeline_example.orders",
            "raw_code": "{{\n    config(materialized = 'table',\n           persist_docs = {\"relation\": true, \"columns\": true}\n    )\n}}\nWITH urgent_orders AS (\n    SELECT\n        o_orderkey AS order_key,\n        o_custkey AS cust_key,\n        o_totalprice AS total_price,\n        EXTRACT(DAYOFYEAR FROM o_orderdate) AS doy,\n        TRIM(o_orderpriority) AS order_priority\n    FROM {{ source('tpch', 'orders') }}\n    WHERE TRIM(o_orderpriority) = '1-URGENT'\n),\nenriched_orders AS (\n    SELECT uo.*, sbr.supp_key\n    FROM urgent_orders uo\n    JOIN {{ ref(\"automibile_customers_from_europe\") }} AS ac ON ac.cust_key = uo.cust_key\n    JOIN {{ ref(\"not_shiped_by_rail\") }} AS sbr ON sbr.order_key = uo.order_key\n),\nwith_supplier_nation AS (\n    SELECT\n        eo.*,\n        supp_nation\n    FROM enriched_orders AS eo\n    JOIN {{ ref(\"supplier_with_nation\") }}  AS swn ON swn.supp_key = eo.supp_key\n),\nFINAL AS (\n    SELECT * FROM with_supplier_nation\n)\nSELECT * FROM FINAL",
            "language": "sql",
            "package_name": "pipeline_example",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example",
            "path": "presentation/orders.sql",
            "original_file_path": "models/presentation/orders.sql",
            "name": "orders",
            "alias": "orders",
            "checksum": {
                "name": "sha256",
                "checksum": "75dc4de7393c6e09f1a0c490bf5ab0d24f175942480834c499e6e349a46017f4"
            },
            "tags": [],
            "refs": [
                [
                    "automibile_customers_from_europe"
                ],
                [
                    "not_shiped_by_rail"
                ],
                [
                    "supplier_with_nation"
                ]
            ],
            "sources": [
                [
                    "tpch",
                    "orders"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {
                "order_priority": {
                    "name": "order_priority",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "supp_key": {
                    "name": "supp_key",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "doy": {
                    "name": "doy",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "total_price": {
                    "name": "total_price",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "cust_key": {
                    "name": "cust_key",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "order_key": {
                    "name": "order_key",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "pipeline_example://models/presentation/schema.yml",
            "compiled_path": "target/compiled/pipeline_example/models/presentation/orders.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table",
                "persist_docs": {
                    "relation": true,
                    "columns": true
                }
            },
            "created_at": 1689252907.9271946,
            "compiled_code": "\nWITH urgent_orders AS (\n    SELECT\n        o_orderkey AS order_key,\n        o_custkey AS cust_key,\n        o_totalprice AS total_price,\n        EXTRACT(DAYOFYEAR FROM o_orderdate) AS doy,\n        TRIM(o_orderpriority) AS order_priority\n    FROM `dataops-test-project`.`tpch`.`orders`\n    WHERE TRIM(o_orderpriority) = '1-URGENT'\n),\nenriched_orders AS (\n    SELECT uo.*, sbr.supp_key\n    FROM urgent_orders uo\n    JOIN `dataops-test-project`.`intermediate_test`.`automibile_customers_from_europe` AS ac ON ac.cust_key = uo.cust_key\n    JOIN `dataops-test-project`.`intermediate_test`.`not_shiped_by_rail` AS sbr ON sbr.order_key = uo.order_key\n),\nwith_supplier_nation AS (\n    SELECT\n        eo.*,\n        supp_nation\n    FROM enriched_orders AS eo\n    JOIN `dataops-test-project`.`intermediate_test`.`supplier_with_nation`  AS swn ON swn.supp_key = eo.supp_key\n),\nFINAL AS (\n    SELECT * FROM with_supplier_nation\n)\nSELECT * FROM FINAL",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`dataops-test-project`.`presentation`.`orders`"
        },
        "test.pipeline_example.dbt_expectations_expect_column_values_to_be_in_set_orders_order_priority__order_priority_IS_NOT_NULL__1_URGENT.b7b4dd9884": {
            "test_metadata": {
                "name": "expect_column_values_to_be_in_set",
                "kwargs": {
                    "value_set": [
                        "1-URGENT"
                    ],
                    "row_condition": "order_priority IS NOT NULL",
                    "column_name": "order_priority",
                    "model": "{{ get_where_subquery(ref('orders')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_values_to_be_in_set",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.pipeline_example.orders"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_expect_column_9ba2127d6a812a4e5657af6d9aa49d6f",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "dataops-test-project",
            "schema": "dbt_test__audit",
            "fqn": [
                "pipeline_example",
                "presentation",
                "dbt_expectations_expect_column_values_to_be_in_set_orders_order_priority__order_priority_IS_NOT_NULL__1_URGENT"
            ],
            "unique_id": "test.pipeline_example.dbt_expectations_expect_column_values_to_be_in_set_orders_order_priority__order_priority_IS_NOT_NULL__1_URGENT.b7b4dd9884",
            "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_set(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_9ba2127d6a812a4e5657af6d9aa49d6f\") }}",
            "language": "sql",
            "package_name": "pipeline_example",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example",
            "path": "dbt_expectations_expect_column_9ba2127d6a812a4e5657af6d9aa49d6f.sql",
            "original_file_path": "models/presentation/schema.yml",
            "name": "dbt_expectations_expect_column_values_to_be_in_set_orders_order_priority__order_priority_IS_NOT_NULL__1_URGENT",
            "alias": "dbt_expectations_expect_column_9ba2127d6a812a4e5657af6d9aa49d6f",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "orders"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/pipeline_example/models/presentation/schema.yml/dbt_expectations_expect_column_9ba2127d6a812a4e5657af6d9aa49d6f.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "dbt_expectations_expect_column_9ba2127d6a812a4e5657af6d9aa49d6f"
            },
            "created_at": 1689252907.9483442,
            "compiled_code": "\n\nwith all_values as (\n\n    select\n        order_priority as value_field\n\n    from `dataops-test-project`.`presentation`.`orders`\n    \n    where order_priority IS NOT NULL\n    \n\n),\nset_values as (\n\n    select\n        cast('1-URGENT' as \n    string\n) as value_field\n    \n    \n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "order_priority",
            "file_key_name": "models.orders"
        },
        "test.pipeline_example.dbt_expectations_expect_column_values_to_be_of_type_orders_order_priority__STRING.d8bd2b8c6f": {
            "test_metadata": {
                "name": "expect_column_values_to_be_of_type",
                "kwargs": {
                    "column_type": "STRING",
                    "column_name": "order_priority",
                    "model": "{{ get_where_subquery(ref('orders')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_values_to_be_of_type",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.pipeline_example.orders"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_expect_column_09bd4025a02175658e28b17f9c858000",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "dataops-test-project",
            "schema": "dbt_test__audit",
            "fqn": [
                "pipeline_example",
                "presentation",
                "dbt_expectations_expect_column_values_to_be_of_type_orders_order_priority__STRING"
            ],
            "unique_id": "test.pipeline_example.dbt_expectations_expect_column_values_to_be_of_type_orders_order_priority__STRING.d8bd2b8c6f",
            "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_09bd4025a02175658e28b17f9c858000\") }}",
            "language": "sql",
            "package_name": "pipeline_example",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example",
            "path": "dbt_expectations_expect_column_09bd4025a02175658e28b17f9c858000.sql",
            "original_file_path": "models/presentation/schema.yml",
            "name": "dbt_expectations_expect_column_values_to_be_of_type_orders_order_priority__STRING",
            "alias": "dbt_expectations_expect_column_09bd4025a02175658e28b17f9c858000",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "orders"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/pipeline_example/models/presentation/schema.yml/dbt_expectations_expect_column_09bd4025a02175658e28b17f9c858000.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "dbt_expectations_expect_column_09bd4025a02175658e28b17f9c858000"
            },
            "created_at": 1689252907.9651558,
            "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ORDER_KEY' as \n    string\n) as relation_column,\n            cast('INT64' as \n    string\n) as relation_column_type\n        union all\n        \n        select\n            cast('CUST_KEY' as \n    string\n) as relation_column,\n            cast('INT64' as \n    string\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_PRICE' as \n    string\n) as relation_column,\n            cast('NUMERIC' as \n    string\n) as relation_column_type\n        union all\n        \n        select\n            cast('DOY' as \n    string\n) as relation_column,\n            cast('INT64' as \n    string\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORDER_PRIORITY' as \n    string\n) as relation_column,\n            cast('STRING' as \n    string\n) as relation_column_type\n        union all\n        \n        select\n            cast('SUPP_KEY' as \n    string\n) as relation_column,\n            cast('INT64' as \n    string\n) as relation_column_type\n        union all\n        \n        select\n            cast('SUPP_NATION' as \n    string\n) as relation_column,\n            cast('STRING' as \n    string\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ORDER_PRIORITY'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "order_priority",
            "file_key_name": "models.orders"
        },
        "test.pipeline_example.dbt_expectations_expect_column_values_to_be_of_type_orders_supp_key__INT64.ae0fd6cc81": {
            "test_metadata": {
                "name": "expect_column_values_to_be_of_type",
                "kwargs": {
                    "column_type": "INT64",
                    "column_name": "supp_key",
                    "model": "{{ get_where_subquery(ref('orders')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_values_to_be_of_type",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.pipeline_example.orders"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_expect_column_df51e26a1f80dc447daa1989d7452795",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "dataops-test-project",
            "schema": "dbt_test__audit",
            "fqn": [
                "pipeline_example",
                "presentation",
                "dbt_expectations_expect_column_values_to_be_of_type_orders_supp_key__INT64"
            ],
            "unique_id": "test.pipeline_example.dbt_expectations_expect_column_values_to_be_of_type_orders_supp_key__INT64.ae0fd6cc81",
            "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_df51e26a1f80dc447daa1989d7452795\") }}",
            "language": "sql",
            "package_name": "pipeline_example",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example",
            "path": "dbt_expectations_expect_column_df51e26a1f80dc447daa1989d7452795.sql",
            "original_file_path": "models/presentation/schema.yml",
            "name": "dbt_expectations_expect_column_values_to_be_of_type_orders_supp_key__INT64",
            "alias": "dbt_expectations_expect_column_df51e26a1f80dc447daa1989d7452795",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "orders"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/pipeline_example/models/presentation/schema.yml/dbt_expectations_expect_column_df51e26a1f80dc447daa1989d7452795.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "dbt_expectations_expect_column_df51e26a1f80dc447daa1989d7452795"
            },
            "created_at": 1689252907.977201,
            "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ORDER_KEY' as \n    string\n) as relation_column,\n            cast('INT64' as \n    string\n) as relation_column_type\n        union all\n        \n        select\n            cast('CUST_KEY' as \n    string\n) as relation_column,\n            cast('INT64' as \n    string\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_PRICE' as \n    string\n) as relation_column,\n            cast('NUMERIC' as \n    string\n) as relation_column_type\n        union all\n        \n        select\n            cast('DOY' as \n    string\n) as relation_column,\n            cast('INT64' as \n    string\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORDER_PRIORITY' as \n    string\n) as relation_column,\n            cast('STRING' as \n    string\n) as relation_column_type\n        union all\n        \n        select\n            cast('SUPP_KEY' as \n    string\n) as relation_column,\n            cast('INT64' as \n    string\n) as relation_column_type\n        union all\n        \n        select\n            cast('SUPP_NATION' as \n    string\n) as relation_column,\n            cast('STRING' as \n    string\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'SUPP_KEY'\n            and\n            relation_column_type not in ('INT64')\n\n    )\n    select *\n    from test_data",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "supp_key",
            "file_key_name": "models.orders"
        },
        "test.pipeline_example.dbt_expectations_expect_column_values_to_be_of_type_orders_doy__INT64.5b2e1f6c04": {
            "test_metadata": {
                "name": "expect_column_values_to_be_of_type",
                "kwargs": {
                    "column_type": "INT64",
                    "column_name": "doy",
                    "model": "{{ get_where_subquery(ref('orders')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_values_to_be_of_type",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.pipeline_example.orders"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_expect_column_372f9e34e0d6f26fc6193fbb90a0d85b",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "dataops-test-project",
            "schema": "dbt_test__audit",
            "fqn": [
                "pipeline_example",
                "presentation",
                "dbt_expectations_expect_column_values_to_be_of_type_orders_doy__INT64"
            ],
            "unique_id": "test.pipeline_example.dbt_expectations_expect_column_values_to_be_of_type_orders_doy__INT64.5b2e1f6c04",
            "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_372f9e34e0d6f26fc6193fbb90a0d85b\") }}",
            "language": "sql",
            "package_name": "pipeline_example",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example",
            "path": "dbt_expectations_expect_column_372f9e34e0d6f26fc6193fbb90a0d85b.sql",
            "original_file_path": "models/presentation/schema.yml",
            "name": "dbt_expectations_expect_column_values_to_be_of_type_orders_doy__INT64",
            "alias": "dbt_expectations_expect_column_372f9e34e0d6f26fc6193fbb90a0d85b",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "orders"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/pipeline_example/models/presentation/schema.yml/dbt_expectations_expect_column_372f9e34e0d6f26fc6193fbb90a0d85b.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "dbt_expectations_expect_column_372f9e34e0d6f26fc6193fbb90a0d85b"
            },
            "created_at": 1689252907.9829297,
            "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ORDER_KEY' as \n    string\n) as relation_column,\n            cast('INT64' as \n    string\n) as relation_column_type\n        union all\n        \n        select\n            cast('CUST_KEY' as \n    string\n) as relation_column,\n            cast('INT64' as \n    string\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_PRICE' as \n    string\n) as relation_column,\n            cast('NUMERIC' as \n    string\n) as relation_column_type\n        union all\n        \n        select\n            cast('DOY' as \n    string\n) as relation_column,\n            cast('INT64' as \n    string\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORDER_PRIORITY' as \n    string\n) as relation_column,\n            cast('STRING' as \n    string\n) as relation_column_type\n        union all\n        \n        select\n            cast('SUPP_KEY' as \n    string\n) as relation_column,\n            cast('INT64' as \n    string\n) as relation_column_type\n        union all\n        \n        select\n            cast('SUPP_NATION' as \n    string\n) as relation_column,\n            cast('STRING' as \n    string\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'DOY'\n            and\n            relation_column_type not in ('INT64')\n\n    )\n    select *\n    from test_data",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "doy",
            "file_key_name": "models.orders"
        },
        "test.pipeline_example.dbt_expectations_expect_column_values_to_be_between_orders_doy__366__0__doy_is_not_null.4dbfc78741": {
            "test_metadata": {
                "name": "expect_column_values_to_be_between",
                "kwargs": {
                    "min_value": 0,
                    "max_value": 366,
                    "row_condition": "doy is not null",
                    "column_name": "doy",
                    "model": "{{ get_where_subquery(ref('orders')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_values_to_be_between",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.pipeline_example.orders"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_expect_column_64755e9584f0dab70cc05873695c1c34",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "dataops-test-project",
            "schema": "dbt_test__audit",
            "fqn": [
                "pipeline_example",
                "presentation",
                "dbt_expectations_expect_column_values_to_be_between_orders_doy__366__0__doy_is_not_null"
            ],
            "unique_id": "test.pipeline_example.dbt_expectations_expect_column_values_to_be_between_orders_doy__366__0__doy_is_not_null.4dbfc78741",
            "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_between(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_64755e9584f0dab70cc05873695c1c34\") }}",
            "language": "sql",
            "package_name": "pipeline_example",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example",
            "path": "dbt_expectations_expect_column_64755e9584f0dab70cc05873695c1c34.sql",
            "original_file_path": "models/presentation/schema.yml",
            "name": "dbt_expectations_expect_column_values_to_be_between_orders_doy__366__0__doy_is_not_null",
            "alias": "dbt_expectations_expect_column_64755e9584f0dab70cc05873695c1c34",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "orders"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/pipeline_example/models/presentation/schema.yml/dbt_expectations_expect_column_64755e9584f0dab70cc05873695c1c34.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "dbt_expectations_expect_column_64755e9584f0dab70cc05873695c1c34"
            },
            "created_at": 1689252907.9889028,
            "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and doy >= 0 and doy <= 366\n)\n as expression\n\n\n    from `dataops-test-project`.`presentation`.`orders`\n    where\n        doy is not null\n    \n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "doy",
            "file_key_name": "models.orders"
        },
        "test.pipeline_example.dbt_expectations_expect_column_values_to_be_of_type_orders_total_price__NUMERIC.4534f99805": {
            "test_metadata": {
                "name": "expect_column_values_to_be_of_type",
                "kwargs": {
                    "column_type": "NUMERIC",
                    "column_name": "total_price",
                    "model": "{{ get_where_subquery(ref('orders')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_values_to_be_of_type",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.pipeline_example.orders"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_expect_column_b4cd5589b459d6185bdd1274ed612c34",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "dataops-test-project",
            "schema": "dbt_test__audit",
            "fqn": [
                "pipeline_example",
                "presentation",
                "dbt_expectations_expect_column_values_to_be_of_type_orders_total_price__NUMERIC"
            ],
            "unique_id": "test.pipeline_example.dbt_expectations_expect_column_values_to_be_of_type_orders_total_price__NUMERIC.4534f99805",
            "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b4cd5589b459d6185bdd1274ed612c34\") }}",
            "language": "sql",
            "package_name": "pipeline_example",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example",
            "path": "dbt_expectations_expect_column_b4cd5589b459d6185bdd1274ed612c34.sql",
            "original_file_path": "models/presentation/schema.yml",
            "name": "dbt_expectations_expect_column_values_to_be_of_type_orders_total_price__NUMERIC",
            "alias": "dbt_expectations_expect_column_b4cd5589b459d6185bdd1274ed612c34",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "orders"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/pipeline_example/models/presentation/schema.yml/dbt_expectations_expect_column_b4cd5589b459d6185bdd1274ed612c34.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "dbt_expectations_expect_column_b4cd5589b459d6185bdd1274ed612c34"
            },
            "created_at": 1689252908.0104573,
            "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ORDER_KEY' as \n    string\n) as relation_column,\n            cast('INT64' as \n    string\n) as relation_column_type\n        union all\n        \n        select\n            cast('CUST_KEY' as \n    string\n) as relation_column,\n            cast('INT64' as \n    string\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_PRICE' as \n    string\n) as relation_column,\n            cast('NUMERIC' as \n    string\n) as relation_column_type\n        union all\n        \n        select\n            cast('DOY' as \n    string\n) as relation_column,\n            cast('INT64' as \n    string\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORDER_PRIORITY' as \n    string\n) as relation_column,\n            cast('STRING' as \n    string\n) as relation_column_type\n        union all\n        \n        select\n            cast('SUPP_KEY' as \n    string\n) as relation_column,\n            cast('INT64' as \n    string\n) as relation_column_type\n        union all\n        \n        select\n            cast('SUPP_NATION' as \n    string\n) as relation_column,\n            cast('STRING' as \n    string\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TOTAL_PRICE'\n            and\n            relation_column_type not in ('NUMERIC')\n\n    )\n    select *\n    from test_data",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "total_price",
            "file_key_name": "models.orders"
        },
        "test.pipeline_example.dbt_expectations_expect_column_values_to_be_of_type_orders_cust_key__INT64.5e6d4dcf77": {
            "test_metadata": {
                "name": "expect_column_values_to_be_of_type",
                "kwargs": {
                    "column_type": "INT64",
                    "column_name": "cust_key",
                    "model": "{{ get_where_subquery(ref('orders')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_values_to_be_of_type",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.pipeline_example.orders"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_expect_column_46a01cc7a4b148f6ee2c3a9b621082be",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "dataops-test-project",
            "schema": "dbt_test__audit",
            "fqn": [
                "pipeline_example",
                "presentation",
                "dbt_expectations_expect_column_values_to_be_of_type_orders_cust_key__INT64"
            ],
            "unique_id": "test.pipeline_example.dbt_expectations_expect_column_values_to_be_of_type_orders_cust_key__INT64.5e6d4dcf77",
            "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_46a01cc7a4b148f6ee2c3a9b621082be\") }}",
            "language": "sql",
            "package_name": "pipeline_example",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example",
            "path": "dbt_expectations_expect_column_46a01cc7a4b148f6ee2c3a9b621082be.sql",
            "original_file_path": "models/presentation/schema.yml",
            "name": "dbt_expectations_expect_column_values_to_be_of_type_orders_cust_key__INT64",
            "alias": "dbt_expectations_expect_column_46a01cc7a4b148f6ee2c3a9b621082be",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "orders"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/pipeline_example/models/presentation/schema.yml/dbt_expectations_expect_column_46a01cc7a4b148f6ee2c3a9b621082be.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "dbt_expectations_expect_column_46a01cc7a4b148f6ee2c3a9b621082be"
            },
            "created_at": 1689252908.0161388,
            "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ORDER_KEY' as \n    string\n) as relation_column,\n            cast('INT64' as \n    string\n) as relation_column_type\n        union all\n        \n        select\n            cast('CUST_KEY' as \n    string\n) as relation_column,\n            cast('INT64' as \n    string\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_PRICE' as \n    string\n) as relation_column,\n            cast('NUMERIC' as \n    string\n) as relation_column_type\n        union all\n        \n        select\n            cast('DOY' as \n    string\n) as relation_column,\n            cast('INT64' as \n    string\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORDER_PRIORITY' as \n    string\n) as relation_column,\n            cast('STRING' as \n    string\n) as relation_column_type\n        union all\n        \n        select\n            cast('SUPP_KEY' as \n    string\n) as relation_column,\n            cast('INT64' as \n    string\n) as relation_column_type\n        union all\n        \n        select\n            cast('SUPP_NATION' as \n    string\n) as relation_column,\n            cast('STRING' as \n    string\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CUST_KEY'\n            and\n            relation_column_type not in ('INT64')\n\n    )\n    select *\n    from test_data",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "cust_key",
            "file_key_name": "models.orders"
        },
        "test.pipeline_example.dbt_expectations_expect_column_values_to_be_of_type_orders_order_key__INT64.ef26b656d1": {
            "test_metadata": {
                "name": "expect_column_values_to_be_of_type",
                "kwargs": {
                    "column_type": "INT64",
                    "column_name": "order_key",
                    "model": "{{ get_where_subquery(ref('orders')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_values_to_be_of_type",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.pipeline_example.orders"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_expect_column_c943575be9d27e5c13c61903832667a7",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "dataops-test-project",
            "schema": "dbt_test__audit",
            "fqn": [
                "pipeline_example",
                "presentation",
                "dbt_expectations_expect_column_values_to_be_of_type_orders_order_key__INT64"
            ],
            "unique_id": "test.pipeline_example.dbt_expectations_expect_column_values_to_be_of_type_orders_order_key__INT64.ef26b656d1",
            "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c943575be9d27e5c13c61903832667a7\") }}",
            "language": "sql",
            "package_name": "pipeline_example",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example",
            "path": "dbt_expectations_expect_column_c943575be9d27e5c13c61903832667a7.sql",
            "original_file_path": "models/presentation/schema.yml",
            "name": "dbt_expectations_expect_column_values_to_be_of_type_orders_order_key__INT64",
            "alias": "dbt_expectations_expect_column_c943575be9d27e5c13c61903832667a7",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "orders"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/pipeline_example/models/presentation/schema.yml/dbt_expectations_expect_column_c943575be9d27e5c13c61903832667a7.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "dbt_expectations_expect_column_c943575be9d27e5c13c61903832667a7"
            },
            "created_at": 1689252908.0219264,
            "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ORDER_KEY' as \n    string\n) as relation_column,\n            cast('INT64' as \n    string\n) as relation_column_type\n        union all\n        \n        select\n            cast('CUST_KEY' as \n    string\n) as relation_column,\n            cast('INT64' as \n    string\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_PRICE' as \n    string\n) as relation_column,\n            cast('NUMERIC' as \n    string\n) as relation_column_type\n        union all\n        \n        select\n            cast('DOY' as \n    string\n) as relation_column,\n            cast('INT64' as \n    string\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORDER_PRIORITY' as \n    string\n) as relation_column,\n            cast('STRING' as \n    string\n) as relation_column_type\n        union all\n        \n        select\n            cast('SUPP_KEY' as \n    string\n) as relation_column,\n            cast('INT64' as \n    string\n) as relation_column_type\n        union all\n        \n        select\n            cast('SUPP_NATION' as \n    string\n) as relation_column,\n            cast('STRING' as \n    string\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ORDER_KEY'\n            and\n            relation_column_type not in ('INT64')\n\n    )\n    select *\n    from test_data",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "order_key",
            "file_key_name": "models.orders"
        },
        "test.pipeline_example.dbt_expectations_expect_column_values_to_be_of_type_report_doy__INT64.c333569725": {
            "test_metadata": {
                "name": "expect_column_values_to_be_of_type",
                "kwargs": {
                    "column_type": "INT64",
                    "column_name": "doy",
                    "model": "{{ get_where_subquery(ref('report')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_values_to_be_of_type",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.pipeline_example.report"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_expect_column_08d1ab1469bb7eb6976bfd05ae3af8c4",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "dataops-test-project",
            "schema": "dbt_test__audit",
            "fqn": [
                "pipeline_example",
                "presentation",
                "dbt_expectations_expect_column_values_to_be_of_type_report_doy__INT64"
            ],
            "unique_id": "test.pipeline_example.dbt_expectations_expect_column_values_to_be_of_type_report_doy__INT64.c333569725",
            "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_08d1ab1469bb7eb6976bfd05ae3af8c4\") }}",
            "language": "sql",
            "package_name": "pipeline_example",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example",
            "path": "dbt_expectations_expect_column_08d1ab1469bb7eb6976bfd05ae3af8c4.sql",
            "original_file_path": "models/presentation/schema.yml",
            "name": "dbt_expectations_expect_column_values_to_be_of_type_report_doy__INT64",
            "alias": "dbt_expectations_expect_column_08d1ab1469bb7eb6976bfd05ae3af8c4",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "report"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/pipeline_example/models/presentation/schema.yml/dbt_expectations_expect_column_08d1ab1469bb7eb6976bfd05ae3af8c4.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "dbt_expectations_expect_column_08d1ab1469bb7eb6976bfd05ae3af8c4"
            },
            "created_at": 1689252908.0277348,
            "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('DOY' as \n    string\n) as relation_column,\n            cast('INT64' as \n    string\n) as relation_column_type\n        union all\n        \n        select\n            cast('SUPP_NATION' as \n    string\n) as relation_column,\n            cast('STRING' as \n    string\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_PRICE_PER_REGION' as \n    string\n) as relation_column,\n            cast('NUMERIC' as \n    string\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'DOY'\n            and\n            relation_column_type not in ('INT64')\n\n    )\n    select *\n    from test_data",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "doy",
            "file_key_name": "models.report"
        },
        "test.pipeline_example.dbt_expectations_expect_column_values_to_not_be_null_report_doy.c5ba36cd44": {
            "test_metadata": {
                "name": "expect_column_values_to_not_be_null",
                "kwargs": {
                    "column_name": "doy",
                    "model": "{{ get_where_subquery(ref('report')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_values_to_not_be_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.pipeline_example.report"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "dataops-test-project",
            "schema": "dbt_test__audit",
            "fqn": [
                "pipeline_example",
                "presentation",
                "dbt_expectations_expect_column_values_to_not_be_null_report_doy"
            ],
            "unique_id": "test.pipeline_example.dbt_expectations_expect_column_values_to_not_be_null_report_doy.c5ba36cd44",
            "raw_code": "{{ dbt_expectations.test_expect_column_values_to_not_be_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "pipeline_example",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example",
            "path": "dbt_expectations_expect_column_values_to_not_be_null_report_doy.sql",
            "original_file_path": "models/presentation/schema.yml",
            "name": "dbt_expectations_expect_column_values_to_not_be_null_report_doy",
            "alias": "dbt_expectations_expect_column_values_to_not_be_null_report_doy",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "report"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/pipeline_example/models/presentation/schema.yml/dbt_expectations_expect_column_values_to_not_be_null_report_doy.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1689252908.0330994,
            "compiled_code": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  doy is not null as expression\n\n\n    from `dataops-test-project`.`presentation`.`report`\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "doy",
            "file_key_name": "models.report"
        },
        "test.pipeline_example.dbt_expectations_expect_column_values_to_not_be_null_report_supp_nation.752e448473": {
            "test_metadata": {
                "name": "expect_column_values_to_not_be_null",
                "kwargs": {
                    "column_name": "supp_nation",
                    "model": "{{ get_where_subquery(ref('report')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_values_to_not_be_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.pipeline_example.report"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_expect_column_d5e8d51b6f0e8f39e7c02d6ece7cb6c2",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "dataops-test-project",
            "schema": "dbt_test__audit",
            "fqn": [
                "pipeline_example",
                "presentation",
                "dbt_expectations_expect_column_values_to_not_be_null_report_supp_nation"
            ],
            "unique_id": "test.pipeline_example.dbt_expectations_expect_column_values_to_not_be_null_report_supp_nation.752e448473",
            "raw_code": "{{ dbt_expectations.test_expect_column_values_to_not_be_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d5e8d51b6f0e8f39e7c02d6ece7cb6c2\") }}",
            "language": "sql",
            "package_name": "pipeline_example",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example",
            "path": "dbt_expectations_expect_column_d5e8d51b6f0e8f39e7c02d6ece7cb6c2.sql",
            "original_file_path": "models/presentation/schema.yml",
            "name": "dbt_expectations_expect_column_values_to_not_be_null_report_supp_nation",
            "alias": "dbt_expectations_expect_column_d5e8d51b6f0e8f39e7c02d6ece7cb6c2",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "report"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/pipeline_example/models/presentation/schema.yml/dbt_expectations_expect_column_d5e8d51b6f0e8f39e7c02d6ece7cb6c2.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "dbt_expectations_expect_column_d5e8d51b6f0e8f39e7c02d6ece7cb6c2"
            },
            "created_at": 1689252908.0407903,
            "compiled_code": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  supp_nation is not null as expression\n\n\n    from `dataops-test-project`.`presentation`.`report`\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "supp_nation",
            "file_key_name": "models.report"
        },
        "test.pipeline_example.dbt_expectations_expect_column_values_to_be_of_type_report_supp_nation__STRING.fc34f7ff21": {
            "test_metadata": {
                "name": "expect_column_values_to_be_of_type",
                "kwargs": {
                    "column_type": "STRING",
                    "column_name": "supp_nation",
                    "model": "{{ get_where_subquery(ref('report')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_values_to_be_of_type",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.pipeline_example.report"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_expect_column_6c9f26c7c280e62dccd30e0810f2c965",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "dataops-test-project",
            "schema": "dbt_test__audit",
            "fqn": [
                "pipeline_example",
                "presentation",
                "dbt_expectations_expect_column_values_to_be_of_type_report_supp_nation__STRING"
            ],
            "unique_id": "test.pipeline_example.dbt_expectations_expect_column_values_to_be_of_type_report_supp_nation__STRING.fc34f7ff21",
            "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6c9f26c7c280e62dccd30e0810f2c965\") }}",
            "language": "sql",
            "package_name": "pipeline_example",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example",
            "path": "dbt_expectations_expect_column_6c9f26c7c280e62dccd30e0810f2c965.sql",
            "original_file_path": "models/presentation/schema.yml",
            "name": "dbt_expectations_expect_column_values_to_be_of_type_report_supp_nation__STRING",
            "alias": "dbt_expectations_expect_column_6c9f26c7c280e62dccd30e0810f2c965",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "report"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/pipeline_example/models/presentation/schema.yml/dbt_expectations_expect_column_6c9f26c7c280e62dccd30e0810f2c965.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "dbt_expectations_expect_column_6c9f26c7c280e62dccd30e0810f2c965"
            },
            "created_at": 1689252908.0462577,
            "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('DOY' as \n    string\n) as relation_column,\n            cast('INT64' as \n    string\n) as relation_column_type\n        union all\n        \n        select\n            cast('SUPP_NATION' as \n    string\n) as relation_column,\n            cast('STRING' as \n    string\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_PRICE_PER_REGION' as \n    string\n) as relation_column,\n            cast('NUMERIC' as \n    string\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'SUPP_NATION'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "supp_nation",
            "file_key_name": "models.report"
        },
        "test.pipeline_example.dbt_expectations_expect_column_values_to_not_be_null_report_total_price_per_region.d56c3ab271": {
            "test_metadata": {
                "name": "expect_column_values_to_not_be_null",
                "kwargs": {
                    "column_name": "total_price_per_region",
                    "model": "{{ get_where_subquery(ref('report')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_values_to_not_be_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.pipeline_example.report"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_expect_column_6566e3b5544e2f08ab0a76c6e2b2d316",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "dataops-test-project",
            "schema": "dbt_test__audit",
            "fqn": [
                "pipeline_example",
                "presentation",
                "dbt_expectations_expect_column_values_to_not_be_null_report_total_price_per_region"
            ],
            "unique_id": "test.pipeline_example.dbt_expectations_expect_column_values_to_not_be_null_report_total_price_per_region.d56c3ab271",
            "raw_code": "{{ dbt_expectations.test_expect_column_values_to_not_be_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6566e3b5544e2f08ab0a76c6e2b2d316\") }}",
            "language": "sql",
            "package_name": "pipeline_example",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example",
            "path": "dbt_expectations_expect_column_6566e3b5544e2f08ab0a76c6e2b2d316.sql",
            "original_file_path": "models/presentation/schema.yml",
            "name": "dbt_expectations_expect_column_values_to_not_be_null_report_total_price_per_region",
            "alias": "dbt_expectations_expect_column_6566e3b5544e2f08ab0a76c6e2b2d316",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "report"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/pipeline_example/models/presentation/schema.yml/dbt_expectations_expect_column_6566e3b5544e2f08ab0a76c6e2b2d316.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "dbt_expectations_expect_column_6566e3b5544e2f08ab0a76c6e2b2d316"
            },
            "created_at": 1689252908.051972,
            "compiled_code": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  total_price_per_region is not null as expression\n\n\n    from `dataops-test-project`.`presentation`.`report`\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "total_price_per_region",
            "file_key_name": "models.report"
        },
        "test.pipeline_example.dbt_expectations_expect_column_values_to_be_of_type_report_total_price_per_region__NUMERIC.d2872074c6": {
            "test_metadata": {
                "name": "expect_column_values_to_be_of_type",
                "kwargs": {
                    "column_type": "NUMERIC",
                    "column_name": "total_price_per_region",
                    "model": "{{ get_where_subquery(ref('report')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_values_to_be_of_type",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.pipeline_example.report"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_expect_column_b988b9b0a3d6e89d842855addec07df4",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "dataops-test-project",
            "schema": "dbt_test__audit",
            "fqn": [
                "pipeline_example",
                "presentation",
                "dbt_expectations_expect_column_values_to_be_of_type_report_total_price_per_region__NUMERIC"
            ],
            "unique_id": "test.pipeline_example.dbt_expectations_expect_column_values_to_be_of_type_report_total_price_per_region__NUMERIC.d2872074c6",
            "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b988b9b0a3d6e89d842855addec07df4\") }}",
            "language": "sql",
            "package_name": "pipeline_example",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example",
            "path": "dbt_expectations_expect_column_b988b9b0a3d6e89d842855addec07df4.sql",
            "original_file_path": "models/presentation/schema.yml",
            "name": "dbt_expectations_expect_column_values_to_be_of_type_report_total_price_per_region__NUMERIC",
            "alias": "dbt_expectations_expect_column_b988b9b0a3d6e89d842855addec07df4",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "report"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/pipeline_example/models/presentation/schema.yml/dbt_expectations_expect_column_b988b9b0a3d6e89d842855addec07df4.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "dbt_expectations_expect_column_b988b9b0a3d6e89d842855addec07df4"
            },
            "created_at": 1689252908.0584815,
            "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('DOY' as \n    string\n) as relation_column,\n            cast('INT64' as \n    string\n) as relation_column_type\n        union all\n        \n        select\n            cast('SUPP_NATION' as \n    string\n) as relation_column,\n            cast('STRING' as \n    string\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_PRICE_PER_REGION' as \n    string\n) as relation_column,\n            cast('NUMERIC' as \n    string\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TOTAL_PRICE_PER_REGION'\n            and\n            relation_column_type not in ('NUMERIC')\n\n    )\n    select *\n    from test_data",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "total_price_per_region",
            "file_key_name": "models.report"
        },
        "test.pipeline_example.not_null_customer_nation_region_nation_key.4603c82eb7": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "nation_key",
                    "model": "{{ get_where_subquery(ref('customer_nation_region')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.pipeline_example.customer_nation_region"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "dataops-test-project",
            "schema": "dbt_test__audit",
            "fqn": [
                "pipeline_example",
                "presentation",
                "not_null_customer_nation_region_nation_key"
            ],
            "unique_id": "test.pipeline_example.not_null_customer_nation_region_nation_key.4603c82eb7",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "pipeline_example",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example",
            "path": "not_null_customer_nation_region_nation_key.sql",
            "original_file_path": "models/presentation/schema.yml",
            "name": "not_null_customer_nation_region_nation_key",
            "alias": "not_null_customer_nation_region_nation_key",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "customer_nation_region"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/pipeline_example/models/presentation/schema.yml/not_null_customer_nation_region_nation_key.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1689252908.0646002,
            "compiled_code": "\n    \n    \n\n\n\nselect nation_key\nfrom `dataops-test-project`.`presentation`.`customer_nation_region`\nwhere nation_key is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "nation_key",
            "file_key_name": "models.customer_nation_region"
        },
        "test.pipeline_example.not_null_supplier_parts_part_key.1d44f98a87": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "part_key",
                    "model": "{{ get_where_subquery(ref('supplier_parts')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.pipeline_example.supplier_parts"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "dataops-test-project",
            "schema": "dbt_test__audit",
            "fqn": [
                "pipeline_example",
                "presentation",
                "not_null_supplier_parts_part_key"
            ],
            "unique_id": "test.pipeline_example.not_null_supplier_parts_part_key.1d44f98a87",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "pipeline_example",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example",
            "path": "not_null_supplier_parts_part_key.sql",
            "original_file_path": "models/presentation/schema.yml",
            "name": "not_null_supplier_parts_part_key",
            "alias": "not_null_supplier_parts_part_key",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "supplier_parts"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/pipeline_example/models/presentation/schema.yml/not_null_supplier_parts_part_key.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1689252908.1298397,
            "compiled_code": "\n    \n    \n\n\n\nselect part_key\nfrom `dataops-test-project`.`presentation`.`supplier_parts`\nwhere part_key is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "part_key",
            "file_key_name": "models.supplier_parts"
        },
        "test.pipeline_example.not_null_supplier_parts_supplier_key.208aff5b66": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "supplier_key",
                    "model": "{{ get_where_subquery(ref('supplier_parts')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.pipeline_example.supplier_parts"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "dataops-test-project",
            "schema": "dbt_test__audit",
            "fqn": [
                "pipeline_example",
                "presentation",
                "not_null_supplier_parts_supplier_key"
            ],
            "unique_id": "test.pipeline_example.not_null_supplier_parts_supplier_key.208aff5b66",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "pipeline_example",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example",
            "path": "not_null_supplier_parts_supplier_key.sql",
            "original_file_path": "models/presentation/schema.yml",
            "name": "not_null_supplier_parts_supplier_key",
            "alias": "not_null_supplier_parts_supplier_key",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "supplier_parts"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/pipeline_example/models/presentation/schema.yml/not_null_supplier_parts_supplier_key.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1689252908.1336074,
            "compiled_code": "\n    \n    \n\n\n\nselect supplier_key\nfrom `dataops-test-project`.`presentation`.`supplier_parts`\nwhere supplier_key is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "supplier_key",
            "file_key_name": "models.supplier_parts"
        },
        "test.pipeline_example.not_null_supplier_parts_nation_key.b82f74f6ea": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "nation_key",
                    "model": "{{ get_where_subquery(ref('supplier_parts')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.pipeline_example.supplier_parts"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "dataops-test-project",
            "schema": "dbt_test__audit",
            "fqn": [
                "pipeline_example",
                "presentation",
                "not_null_supplier_parts_nation_key"
            ],
            "unique_id": "test.pipeline_example.not_null_supplier_parts_nation_key.b82f74f6ea",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "pipeline_example",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example",
            "path": "not_null_supplier_parts_nation_key.sql",
            "original_file_path": "models/presentation/schema.yml",
            "name": "not_null_supplier_parts_nation_key",
            "alias": "not_null_supplier_parts_nation_key",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "supplier_parts"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/pipeline_example/models/presentation/schema.yml/not_null_supplier_parts_nation_key.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1689252908.136763,
            "compiled_code": "\n    \n    \n\n\n\nselect nation_key\nfrom `dataops-test-project`.`presentation`.`supplier_parts`\nwhere nation_key is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "nation_key",
            "file_key_name": "models.supplier_parts"
        },
        "test.pipeline_example.dbt_utils_unique_combination_of_columns_supplier_parts_part_key__supplier_key__nation_key.29403aef32": {
            "test_metadata": {
                "name": "unique_combination_of_columns",
                "kwargs": {
                    "combination_of_columns": [
                        "part_key",
                        "supplier_key",
                        "nation_key"
                    ],
                    "model": "{{ get_where_subquery(ref('supplier_parts')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_unique_combination_of_columns",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.pipeline_example.supplier_parts"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_unique_combination_o_e25d801d07e7d06fc9e5d82ea5c6dee8",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "dataops-test-project",
            "schema": "dbt_test__audit",
            "fqn": [
                "pipeline_example",
                "presentation",
                "dbt_utils_unique_combination_of_columns_supplier_parts_part_key__supplier_key__nation_key"
            ],
            "unique_id": "test.pipeline_example.dbt_utils_unique_combination_of_columns_supplier_parts_part_key__supplier_key__nation_key.29403aef32",
            "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_e25d801d07e7d06fc9e5d82ea5c6dee8\") }}",
            "language": "sql",
            "package_name": "pipeline_example",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example",
            "path": "dbt_utils_unique_combination_o_e25d801d07e7d06fc9e5d82ea5c6dee8.sql",
            "original_file_path": "models/presentation/schema.yml",
            "name": "dbt_utils_unique_combination_of_columns_supplier_parts_part_key__supplier_key__nation_key",
            "alias": "dbt_utils_unique_combination_o_e25d801d07e7d06fc9e5d82ea5c6dee8",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "supplier_parts"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/pipeline_example/models/presentation/schema.yml/dbt_utils_unique_combination_o_e25d801d07e7d06fc9e5d82ea5c6dee8.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "dbt_utils_unique_combination_o_e25d801d07e7d06fc9e5d82ea5c6dee8"
            },
            "created_at": 1689252908.1400495,
            "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        part_key, supplier_key, nation_key\n    from `dataops-test-project`.`presentation`.`supplier_parts`\n    group by part_key, supplier_key, nation_key\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": null,
            "file_key_name": "models.supplier_parts"
        }
    },
    "sources": {
        "source.pipeline_example.tpch.customer": {
            "fqn": [
                "pipeline_example",
                "source",
                "tpch",
                "customer"
            ],
            "database": "dataops-test-project",
            "schema": "tpch",
            "unique_id": "source.pipeline_example.tpch.customer",
            "package_name": "pipeline_example",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example",
            "path": "models/source/sources.yml",
            "original_file_path": "models/source/sources.yml",
            "name": "customer",
            "source_name": "tpch",
            "source_description": "",
            "loader": "",
            "identifier": "customer",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": null,
            "description": "Customer information",
            "columns": {
                "c_custkey": {
                    "name": "c_custkey",
                    "description": "Customer key",
                    "meta": {},
                    "data_type": "integer",
                    "quote": null,
                    "tags": []
                },
                "c_name": {
                    "name": "c_name",
                    "description": "Customer name",
                    "meta": {},
                    "data_type": "string",
                    "quote": null,
                    "tags": []
                },
                "c_address": {
                    "name": "c_address",
                    "description": "Customer address",
                    "meta": {},
                    "data_type": "string",
                    "quote": null,
                    "tags": []
                },
                "c_nationkey": {
                    "name": "c_nationkey",
                    "description": "National key",
                    "meta": {},
                    "data_type": "integer",
                    "quote": null,
                    "tags": []
                },
                "c_phone": {
                    "name": "c_phone",
                    "description": "Customer phone",
                    "meta": {},
                    "data_type": "string",
                    "quote": null,
                    "tags": []
                },
                "c_acctbal": {
                    "name": "c_acctbal",
                    "description": "",
                    "meta": {},
                    "data_type": "numeric",
                    "quote": null,
                    "tags": []
                },
                "c_mktsegment": {
                    "name": "c_mktsegment",
                    "description": "",
                    "meta": {},
                    "data_type": "string",
                    "quote": null,
                    "tags": []
                },
                "c_comment": {
                    "name": "c_comment",
                    "description": "",
                    "meta": {},
                    "data_type": "string",
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`dataops-test-project`.`tpch`.`customer`",
            "created_at": 1689252908.1567192
        },
        "source.pipeline_example.tpch.nation": {
            "fqn": [
                "pipeline_example",
                "source",
                "tpch",
                "nation"
            ],
            "database": "dataops-test-project",
            "schema": "tpch",
            "unique_id": "source.pipeline_example.tpch.nation",
            "package_name": "pipeline_example",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example",
            "path": "models/source/sources.yml",
            "original_file_path": "models/source/sources.yml",
            "name": "nation",
            "source_name": "tpch",
            "source_description": "",
            "loader": "",
            "identifier": "nation",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": null,
            "description": "Nationalities",
            "columns": {
                "n_nationkey": {
                    "name": "n_nationkey",
                    "description": "",
                    "meta": {},
                    "data_type": "integer",
                    "quote": null,
                    "tags": []
                },
                "n_name": {
                    "name": "n_name",
                    "description": "",
                    "meta": {},
                    "data_type": "string",
                    "quote": null,
                    "tags": []
                },
                "n_regionkey": {
                    "name": "n_regionkey",
                    "description": "",
                    "meta": {},
                    "data_type": "integer",
                    "quote": null,
                    "tags": []
                },
                "n_comment": {
                    "name": "n_comment",
                    "description": "",
                    "meta": {},
                    "data_type": "string",
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`dataops-test-project`.`tpch`.`nation`",
            "created_at": 1689252908.1570005
        },
        "source.pipeline_example.tpch.region": {
            "fqn": [
                "pipeline_example",
                "source",
                "tpch",
                "region"
            ],
            "database": "dataops-test-project",
            "schema": "tpch",
            "unique_id": "source.pipeline_example.tpch.region",
            "package_name": "pipeline_example",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example",
            "path": "models/source/sources.yml",
            "original_file_path": "models/source/sources.yml",
            "name": "region",
            "source_name": "tpch",
            "source_description": "",
            "loader": "",
            "identifier": "region",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": null,
            "description": "Region",
            "columns": {
                "r_regionkey": {
                    "name": "r_regionkey",
                    "description": "",
                    "meta": {},
                    "data_type": "integer",
                    "quote": null,
                    "tags": []
                },
                "r_name": {
                    "name": "r_name",
                    "description": "",
                    "meta": {},
                    "data_type": "string",
                    "quote": null,
                    "tags": []
                },
                "r_comment": {
                    "name": "r_comment",
                    "description": "",
                    "meta": {},
                    "data_type": "string",
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`dataops-test-project`.`tpch`.`region`",
            "created_at": 1689252908.1572185
        },
        "source.pipeline_example.tpch.supplier": {
            "fqn": [
                "pipeline_example",
                "source",
                "tpch",
                "supplier"
            ],
            "database": "dataops-test-project",
            "schema": "tpch",
            "unique_id": "source.pipeline_example.tpch.supplier",
            "package_name": "pipeline_example",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example",
            "path": "models/source/sources.yml",
            "original_file_path": "models/source/sources.yml",
            "name": "supplier",
            "source_name": "tpch",
            "source_description": "",
            "loader": "",
            "identifier": "supplier",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {
                "s_suppkey": {
                    "name": "s_suppkey",
                    "description": "",
                    "meta": {},
                    "data_type": "integer",
                    "quote": null,
                    "tags": []
                },
                "s_nationkey": {
                    "name": "s_nationkey",
                    "description": "",
                    "meta": {},
                    "data_type": "integer",
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`dataops-test-project`.`tpch`.`supplier`",
            "created_at": 1689252908.157414
        },
        "source.pipeline_example.tpch.partsupp": {
            "fqn": [
                "pipeline_example",
                "source",
                "tpch",
                "partsupp"
            ],
            "database": "dataops-test-project",
            "schema": "tpch",
            "unique_id": "source.pipeline_example.tpch.partsupp",
            "package_name": "pipeline_example",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example",
            "path": "models/source/sources.yml",
            "original_file_path": "models/source/sources.yml",
            "name": "partsupp",
            "source_name": "tpch",
            "source_description": "",
            "loader": "",
            "identifier": "partsupp",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`dataops-test-project`.`tpch`.`partsupp`",
            "created_at": 1689252908.157593
        },
        "source.pipeline_example.tpch.part": {
            "fqn": [
                "pipeline_example",
                "source",
                "tpch",
                "part"
            ],
            "database": "dataops-test-project",
            "schema": "tpch",
            "unique_id": "source.pipeline_example.tpch.part",
            "package_name": "pipeline_example",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example",
            "path": "models/source/sources.yml",
            "original_file_path": "models/source/sources.yml",
            "name": "part",
            "source_name": "tpch",
            "source_description": "",
            "loader": "",
            "identifier": "part",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`dataops-test-project`.`tpch`.`part`",
            "created_at": 1689252908.15777
        },
        "source.pipeline_example.tpch.orders": {
            "fqn": [
                "pipeline_example",
                "source",
                "tpch",
                "orders"
            ],
            "database": "dataops-test-project",
            "schema": "tpch",
            "unique_id": "source.pipeline_example.tpch.orders",
            "package_name": "pipeline_example",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example",
            "path": "models/source/sources.yml",
            "original_file_path": "models/source/sources.yml",
            "name": "orders",
            "source_name": "tpch",
            "source_description": "",
            "loader": "",
            "identifier": "orders",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {
                "o_orderkey": {
                    "name": "o_orderkey",
                    "description": "",
                    "meta": {},
                    "data_type": "integer",
                    "quote": null,
                    "tags": []
                },
                "o_custkey": {
                    "name": "o_custkey",
                    "description": "",
                    "meta": {},
                    "data_type": "integer",
                    "quote": null,
                    "tags": []
                },
                "o_totalprice": {
                    "name": "o_totalprice",
                    "description": "",
                    "meta": {},
                    "data_type": "numeric",
                    "quote": null,
                    "tags": []
                },
                "o_orderdate": {
                    "name": "o_orderdate",
                    "description": "",
                    "meta": {},
                    "data_type": "date",
                    "quote": null,
                    "tags": []
                },
                "o_orderpriority": {
                    "name": "o_orderpriority",
                    "description": "",
                    "meta": {},
                    "data_type": "string",
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`dataops-test-project`.`tpch`.`orders`",
            "created_at": 1689252908.157966
        },
        "source.pipeline_example.tpch.lineitem": {
            "fqn": [
                "pipeline_example",
                "source",
                "tpch",
                "lineitem"
            ],
            "database": "dataops-test-project",
            "schema": "tpch",
            "unique_id": "source.pipeline_example.tpch.lineitem",
            "package_name": "pipeline_example",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example",
            "path": "models/source/sources.yml",
            "original_file_path": "models/source/sources.yml",
            "name": "lineitem",
            "source_name": "tpch",
            "source_description": "",
            "loader": "",
            "identifier": "lineitem",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {
                "l_orderkey": {
                    "name": "l_orderkey",
                    "description": "",
                    "meta": {},
                    "data_type": "integer",
                    "quote": null,
                    "tags": []
                },
                "l_partkey": {
                    "name": "l_partkey",
                    "description": "",
                    "meta": {},
                    "data_type": "integer",
                    "quote": null,
                    "tags": []
                },
                "l_suppkey": {
                    "name": "l_suppkey",
                    "description": "",
                    "meta": {},
                    "data_type": "integer",
                    "quote": null,
                    "tags": []
                },
                "l_extended_price": {
                    "name": "l_extended_price",
                    "description": "",
                    "meta": {},
                    "data_type": "numeric",
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`dataops-test-project`.`tpch`.`lineitem`",
            "created_at": 1689252908.1581564
        }
    },
    "macros": {
        "macro.pipeline_example.generate_schema_name": {
            "unique_id": "macro.pipeline_example.generate_schema_name",
            "package_name": "pipeline_example",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example",
            "path": "macros/generate_schema_name.sql",
            "original_file_path": "macros/generate_schema_name.sql",
            "name": "generate_schema_name",
            "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n    {{ dbt_common_macros.custom_generate_schema_name(custom_schema_name, node) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_common_macros.custom_generate_schema_name"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.0177078,
            "supported_languages": null
        },
        "macro.dbt_bigquery.partition_by": {
            "unique_id": "macro.dbt_bigquery.partition_by",
            "package_name": "dbt_bigquery",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/bigquery",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "name": "partition_by",
            "macro_sql": "{% macro partition_by(partition_config) -%}\n    {%- if partition_config is none -%}\n      {% do return('') %}\n    {%- elif partition_config.data_type | lower in ('date','timestamp','datetime') -%}\n        partition by {{ partition_config.render() }}\n    {%- elif partition_config.data_type | lower in ('int64') -%}\n        {%- set range = partition_config.range -%}\n        partition by range_bucket(\n            {{ partition_config.field }},\n            generate_array({{ range.start}}, {{ range.end }}, {{ range.interval }})\n        )\n    {%- endif -%}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.0257618,
            "supported_languages": null
        },
        "macro.dbt_bigquery.cluster_by": {
            "unique_id": "macro.dbt_bigquery.cluster_by",
            "package_name": "dbt_bigquery",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/bigquery",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "name": "cluster_by",
            "macro_sql": "{% macro cluster_by(raw_cluster_by) %}\n  {%- if raw_cluster_by is not none -%}\n  cluster by {% if raw_cluster_by is string -%}\n    {% set raw_cluster_by = [raw_cluster_by] %}\n  {%- endif -%}\n  {%- for cluster in raw_cluster_by -%}\n    {{ cluster }}\n    {%- if not loop.last -%}, {% endif -%}\n  {%- endfor -%}\n\n  {% endif %}\n\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.026788,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery_options": {
            "unique_id": "macro.dbt_bigquery.bigquery_options",
            "package_name": "dbt_bigquery",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/bigquery",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "name": "bigquery_options",
            "macro_sql": "{% macro bigquery_options(opts) %}\n  {% set options -%}\n    OPTIONS({% for opt_key, opt_val in opts.items() %}\n      {{ opt_key }}={{ opt_val }}{{ \",\" if not loop.last }}\n    {% endfor %})\n  {%- endset %}\n  {%- do return(options) -%}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.0277243,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery_table_options": {
            "unique_id": "macro.dbt_bigquery.bigquery_table_options",
            "package_name": "dbt_bigquery",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/bigquery",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "name": "bigquery_table_options",
            "macro_sql": "{% macro bigquery_table_options(config, node, temporary) %}\n  {% set opts = adapter.get_table_options(config, node, temporary) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery_options"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.0284057,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__create_table_as": {
            "unique_id": "macro.dbt_bigquery.bigquery__create_table_as",
            "package_name": "dbt_bigquery",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/bigquery",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "name": "bigquery__create_table_as",
            "macro_sql": "{% macro bigquery__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {%- set raw_partition_by = config.get('partition_by', none) -%}\n    {%- set raw_cluster_by = config.get('cluster_by', none) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set partition_config = adapter.parse_partition_by(raw_partition_by) -%}\n\n    {{ sql_header if sql_header is not none }}\n\n    create or replace table {{ relation }}\n    {{ partition_by(partition_config) }}\n    {{ cluster_by(raw_cluster_by) }}\n    {{ bigquery_table_options(config, model, temporary) }}\n    as (\n      {{ compiled_code }}\n    );\n  {%- elif language == 'python' -%}\n    {#--\n    N.B. Python models _can_ write to temp views HOWEVER they use a different session\n    and have already expired by the time they need to be used (I.E. in merges for incremental models)\n\n    TODO: Deep dive into spark sessions to see if we can reuse a single session for an entire\n    dbt invocation.\n     --#}\n    {{ py_write_table(compiled_code=compiled_code, target_relation=relation.quote(database=False, schema=False, identifier=False)) }}\n  {%- else -%}\n    {% do exceptions.raise_compiler_error(\"bigquery__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.partition_by",
                    "macro.dbt_bigquery.cluster_by",
                    "macro.dbt_bigquery.bigquery_table_options",
                    "macro.dbt_bigquery.py_write_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.0309343,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery_view_options": {
            "unique_id": "macro.dbt_bigquery.bigquery_view_options",
            "package_name": "dbt_bigquery",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/bigquery",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "name": "bigquery_view_options",
            "macro_sql": "{% macro bigquery_view_options(config, node) %}\n  {% set opts = adapter.get_view_options(config, node) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery_options"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.031627,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__create_view_as": {
            "unique_id": "macro.dbt_bigquery.bigquery__create_view_as",
            "package_name": "dbt_bigquery",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/bigquery",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "name": "bigquery__create_view_as",
            "macro_sql": "{% macro bigquery__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace view {{ relation }}\n  {{ bigquery_view_options(config, model) }}\n  as {{ sql }};\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery_view_options"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.0324516,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__drop_schema": {
            "unique_id": "macro.dbt_bigquery.bigquery__drop_schema",
            "package_name": "dbt_bigquery",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/bigquery",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "name": "bigquery__drop_schema",
            "macro_sql": "{% macro bigquery__drop_schema(relation) -%}\n  {{ adapter.drop_schema(relation) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.032848,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__drop_relation": {
            "unique_id": "macro.dbt_bigquery.bigquery__drop_relation",
            "package_name": "dbt_bigquery",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/bigquery",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "name": "bigquery__drop_relation",
            "macro_sql": "{% macro bigquery__drop_relation(relation) -%}\n  {% call statement('drop_relation') -%}\n    drop {{ relation.type }} if exists {{ relation }}\n  {%- endcall %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.0333679,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__get_columns_in_relation": {
            "unique_id": "macro.dbt_bigquery.bigquery__get_columns_in_relation",
            "package_name": "dbt_bigquery",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/bigquery",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "name": "bigquery__get_columns_in_relation",
            "macro_sql": "{% macro bigquery__get_columns_in_relation(relation) -%}\n  {{ return(adapter.get_columns_in_relation(relation)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.0337582,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__list_relations_without_caching": {
            "unique_id": "macro.dbt_bigquery.bigquery__list_relations_without_caching",
            "package_name": "dbt_bigquery",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/bigquery",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "name": "bigquery__list_relations_without_caching",
            "macro_sql": "{% macro bigquery__list_relations_without_caching(schema_relation) -%}\n  {{ return(adapter.list_relations_without_caching(schema_relation)) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.034142,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__list_schemas": {
            "unique_id": "macro.dbt_bigquery.bigquery__list_schemas",
            "package_name": "dbt_bigquery",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/bigquery",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "name": "bigquery__list_schemas",
            "macro_sql": "{% macro bigquery__list_schemas(database) -%}\n  {{ return(adapter.list_schemas(database)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.0345294,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__check_schema_exists": {
            "unique_id": "macro.dbt_bigquery.bigquery__check_schema_exists",
            "package_name": "dbt_bigquery",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/bigquery",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "name": "bigquery__check_schema_exists",
            "macro_sql": "{% macro bigquery__check_schema_exists(information_schema, schema) %}\n  {{ return(adapter.check_schema_exists(information_schema.database, schema)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.0351384,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__persist_docs": {
            "unique_id": "macro.dbt_bigquery.bigquery__persist_docs",
            "package_name": "dbt_bigquery",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/bigquery",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "name": "bigquery__persist_docs",
            "macro_sql": "{% macro bigquery__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do alter_column_comment(relation, model.columns) %}\n  {% endif %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.alter_column_comment"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.0359063,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__alter_column_comment": {
            "unique_id": "macro.dbt_bigquery.bigquery__alter_column_comment",
            "package_name": "dbt_bigquery",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/bigquery",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "name": "bigquery__alter_column_comment",
            "macro_sql": "{% macro bigquery__alter_column_comment(relation, column_dict) -%}\n  {% do adapter.update_columns(relation, column_dict) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.0364754,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__rename_relation": {
            "unique_id": "macro.dbt_bigquery.bigquery__rename_relation",
            "package_name": "dbt_bigquery",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/bigquery",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "name": "bigquery__rename_relation",
            "macro_sql": "{% macro bigquery__rename_relation(from_relation, to_relation) -%}\n  {% do adapter.rename_relation(from_relation, to_relation) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.0370975,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__alter_relation_add_columns": {
            "unique_id": "macro.dbt_bigquery.bigquery__alter_relation_add_columns",
            "package_name": "dbt_bigquery",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/bigquery",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "name": "bigquery__alter_relation_add_columns",
            "macro_sql": "{% macro bigquery__alter_relation_add_columns(relation, add_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n        {% for column in add_columns %}\n          add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.0387032,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__alter_relation_drop_columns": {
            "unique_id": "macro.dbt_bigquery.bigquery__alter_relation_drop_columns",
            "package_name": "dbt_bigquery",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/bigquery",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "name": "bigquery__alter_relation_drop_columns",
            "macro_sql": "{% macro bigquery__alter_relation_drop_columns(relation, drop_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n        {% for column in drop_columns %}\n          drop column {{ column.name }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.0399623,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__alter_column_type": {
            "unique_id": "macro.dbt_bigquery.bigquery__alter_column_type",
            "package_name": "dbt_bigquery",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/bigquery",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "name": "bigquery__alter_column_type",
            "macro_sql": "{% macro bigquery__alter_column_type(relation, column_name, new_column_type) -%}\n  {#-- Changing a column's data type using a query requires you to scan the entire table.\n    The query charges can be significant if the table is very large.\n\n    https://cloud.google.com/bigquery/docs/manually-changing-schemas#changing_a_columns_data_type\n  #}\n  {% set relation_columns = get_columns_in_relation(relation) %}\n\n  {% set sql %}\n    select\n      {%- for col in relation_columns -%}\n        {% if col.column == column_name %}\n          CAST({{ col.quoted }} AS {{ new_column_type }}) AS {{ col.quoted }}\n        {%- else %}\n          {{ col.quoted }}\n        {%- endif %}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor %}\n    from {{ relation }}\n  {% endset %}\n\n  {% call statement('alter_column_type') %}\n    {{ create_table_as(False, relation, sql)}}\n  {%- endcall %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_columns_in_relation",
                    "macro.dbt.statement",
                    "macro.dbt.create_table_as"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.0417247,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__test_unique": {
            "unique_id": "macro.dbt_bigquery.bigquery__test_unique",
            "package_name": "dbt_bigquery",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/bigquery",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "name": "bigquery__test_unique",
            "macro_sql": "{% macro bigquery__test_unique(model, column_name) %}\n\nwith dbt_test__target as (\n\n  select {{ column_name }} as unique_field\n  from {{ model }}\n  where {{ column_name }} is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.0421662,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__upload_file": {
            "unique_id": "macro.dbt_bigquery.bigquery__upload_file",
            "package_name": "dbt_bigquery",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/bigquery",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "name": "bigquery__upload_file",
            "macro_sql": "{% macro bigquery__upload_file(local_file_path, database, table_schema, table_name) %}\n\n  {{ log(\"kwargs: \" ~ kwargs) }}\n\n  {% do adapter.upload_file(local_file_path, database, table_schema, table_name, kwargs=kwargs) %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.0429127,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__get_catalog": {
            "unique_id": "macro.dbt_bigquery.bigquery__get_catalog",
            "package_name": "dbt_bigquery",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/bigquery",
            "path": "macros/catalog.sql",
            "original_file_path": "macros/catalog.sql",
            "name": "bigquery__get_catalog",
            "macro_sql": "{% macro bigquery__get_catalog(information_schema, schemas) -%}\n\n  {%- if (schemas | length) == 0 -%}\n    {# Hopefully nothing cares about the columns we return when there are no rows #}\n    {%- set query  = \"select 1 as id limit 0\" -%}\n  {%- else -%}\n\n  {%- set query -%}\n    with tables as (\n        select\n            project_id as table_database,\n            dataset_id as table_schema,\n            table_id as original_table_name,\n\n            concat(project_id, '.', dataset_id, '.', table_id) as relation_id,\n\n            row_count,\n            size_bytes as size_bytes,\n            case\n                when type = 1 then 'table'\n                when type = 2 then 'view'\n                else 'external'\n            end as table_type,\n\n            REGEXP_CONTAINS(table_id, '^.+[0-9]{8}$') and coalesce(type, 0) = 1 as is_date_shard,\n            REGEXP_EXTRACT(table_id, '^(.+)[0-9]{8}$') as shard_base_name,\n            REGEXP_EXTRACT(table_id, '^.+([0-9]{8})$') as shard_name\n\n        from {{ information_schema.replace(information_schema_view='__TABLES__') }}\n        where (\n          {%- for schema in schemas -%}\n            upper(dataset_id) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n          {%- endfor -%}\n        )\n    ),\n\n    extracted as (\n\n        select *,\n            case\n                when is_date_shard then shard_base_name\n                else original_table_name\n            end as table_name\n\n        from tables\n\n    ),\n\n    unsharded_tables as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            coalesce(table_type, 'external') as table_type,\n            is_date_shard,\n\n            struct(\n                min(shard_name) as shard_min,\n                max(shard_name) as shard_max,\n                count(*) as shard_count\n            ) as table_shards,\n\n            sum(size_bytes) as size_bytes,\n            sum(row_count) as row_count,\n\n            max(relation_id) as relation_id\n\n        from extracted\n        group by 1,2,3,4,5\n\n    ),\n\n    info_schema_columns as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            table_catalog as table_database,\n            table_schema,\n            table_name,\n\n            -- use the \"real\" column name from the paths query below\n            column_name as base_column_name,\n            ordinal_position as column_index,\n\n            is_partitioning_column,\n            clustering_ordinal_position\n\n        from {{ information_schema.replace(information_schema_view='COLUMNS') }}\n        where ordinal_position is not null\n\n    ),\n\n    info_schema_column_paths as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            field_path as column_name,\n            data_type as column_type,\n            column_name as base_column_name,\n            description as column_comment\n\n        from {{ information_schema.replace(information_schema_view='COLUMN_FIELD_PATHS') }}\n\n    ),\n\n    columns as (\n\n        select * except (base_column_name)\n        from info_schema_columns\n        join info_schema_column_paths using (relation_id, base_column_name)\n\n    ),\n\n    column_stats as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            max(relation_id) as relation_id,\n            max(case when is_partitioning_column = 'YES' then 1 else 0 end) = 1 as is_partitioned,\n            max(case when is_partitioning_column = 'YES' then column_name else null end) as partition_column,\n            max(case when clustering_ordinal_position is not null then 1 else 0 end) = 1 as is_clustered,\n            array_to_string(\n                array_agg(\n                    case\n                        when clustering_ordinal_position is not null then column_name\n                        else null\n                    end ignore nulls\n                    order by clustering_ordinal_position\n                ), ', '\n            ) as clustering_columns\n\n        from columns\n        group by 1,2,3\n\n    )\n\n    select\n        unsharded_tables.table_database,\n        unsharded_tables.table_schema,\n        case\n            when is_date_shard then concat(unsharded_tables.table_name, '*')\n            else unsharded_tables.table_name\n        end as table_name,\n        unsharded_tables.table_type,\n\n        -- coalesce name and type for External tables - these columns are not\n        -- present in the COLUMN_FIELD_PATHS resultset\n        coalesce(columns.column_name, '<unknown>') as column_name,\n        -- invent a row number to account for nested fields -- BQ does\n        -- not treat these nested properties as independent fields\n        row_number() over (\n            partition by relation_id\n            order by columns.column_index, columns.column_name\n        ) as column_index,\n        coalesce(columns.column_type, '<unknown>') as column_type,\n        columns.column_comment,\n\n        'Shard count' as `stats__date_shards__label`,\n        table_shards.shard_count as `stats__date_shards__value`,\n        'The number of date shards in this table' as `stats__date_shards__description`,\n        is_date_shard as `stats__date_shards__include`,\n\n        'Shard (min)' as `stats__date_shard_min__label`,\n        table_shards.shard_min as `stats__date_shard_min__value`,\n        'The first date shard in this table' as `stats__date_shard_min__description`,\n        is_date_shard as `stats__date_shard_min__include`,\n\n        'Shard (max)' as `stats__date_shard_max__label`,\n        table_shards.shard_max as `stats__date_shard_max__value`,\n        'The last date shard in this table' as `stats__date_shard_max__description`,\n        is_date_shard as `stats__date_shard_max__include`,\n\n        '# Rows' as `stats__num_rows__label`,\n        row_count as `stats__num_rows__value`,\n        'Approximate count of rows in this table' as `stats__num_rows__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_rows__include`,\n\n        'Approximate Size' as `stats__num_bytes__label`,\n        size_bytes as `stats__num_bytes__value`,\n        'Approximate size of table as reported by BigQuery' as `stats__num_bytes__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_bytes__include`,\n\n        'Partitioned By' as `stats__partitioning_type__label`,\n        partition_column as `stats__partitioning_type__value`,\n        'The partitioning column for this table' as `stats__partitioning_type__description`,\n        is_partitioned as `stats__partitioning_type__include`,\n\n        'Clustered By' as `stats__clustering_fields__label`,\n        clustering_columns as `stats__clustering_fields__value`,\n        'The clustering columns for this table' as `stats__clustering_fields__description`,\n        is_clustered as `stats__clustering_fields__include`\n\n    -- join using relation_id (an actual relation, not a shard prefix) to make\n    -- sure that column metadata is picked up through the join. This will only\n    -- return the column information for the \"max\" table in a date-sharded table set\n    from unsharded_tables\n    left join columns using (relation_id)\n    left join column_stats using (relation_id)\n  {%- endset -%}\n\n  {%- endif -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.replace",
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.0486963,
            "supported_languages": null
        },
        "macro.dbt_bigquery.date_sharded_table": {
            "unique_id": "macro.dbt_bigquery.date_sharded_table",
            "package_name": "dbt_bigquery",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/bigquery",
            "path": "macros/etc.sql",
            "original_file_path": "macros/etc.sql",
            "name": "date_sharded_table",
            "macro_sql": "{% macro date_sharded_table(base_name) %}\n    {{ return(base_name ~ \"[DBT__PARTITION_DATE]\") }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.0495992,
            "supported_languages": null
        },
        "macro.dbt_bigquery.grant_access_to": {
            "unique_id": "macro.dbt_bigquery.grant_access_to",
            "package_name": "dbt_bigquery",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/bigquery",
            "path": "macros/etc.sql",
            "original_file_path": "macros/etc.sql",
            "name": "grant_access_to",
            "macro_sql": "{% macro grant_access_to(entity, entity_type, role, grant_target_dict) -%}\n  {% do adapter.grant_access_to(entity, entity_type, role, grant_target_dict) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.0501566,
            "supported_languages": null
        },
        "macro.dbt_bigquery.get_partitions_metadata": {
            "unique_id": "macro.dbt_bigquery.get_partitions_metadata",
            "package_name": "dbt_bigquery",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/bigquery",
            "path": "macros/etc.sql",
            "original_file_path": "macros/etc.sql",
            "name": "get_partitions_metadata",
            "macro_sql": "\n\n{%- macro get_partitions_metadata(table) -%}\n  {%- if execute -%}\n    {%- set res = adapter.get_partitions_metadata(table) -%}\n    {{- return(res) -}}\n  {%- endif -%}\n  {{- return(None) -}}\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.0508785,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__current_timestamp": {
            "unique_id": "macro.dbt_bigquery.bigquery__current_timestamp",
            "package_name": "dbt_bigquery",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/bigquery",
            "path": "macros/utils/timestamps.sql",
            "original_file_path": "macros/utils/timestamps.sql",
            "name": "bigquery__current_timestamp",
            "macro_sql": "{% macro bigquery__current_timestamp() -%}\n  current_timestamp()\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.0514915,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__snapshot_string_as_time": {
            "unique_id": "macro.dbt_bigquery.bigquery__snapshot_string_as_time",
            "package_name": "dbt_bigquery",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/bigquery",
            "path": "macros/utils/timestamps.sql",
            "original_file_path": "macros/utils/timestamps.sql",
            "name": "bigquery__snapshot_string_as_time",
            "macro_sql": "{% macro bigquery__snapshot_string_as_time(timestamp) -%}\n    {%- set result = 'TIMESTAMP(\"' ~ timestamp ~ '\")' -%}\n    {{ return(result) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.0519638,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__current_timestamp_backcompat": {
            "unique_id": "macro.dbt_bigquery.bigquery__current_timestamp_backcompat",
            "package_name": "dbt_bigquery",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/bigquery",
            "path": "macros/utils/timestamps.sql",
            "original_file_path": "macros/utils/timestamps.sql",
            "name": "bigquery__current_timestamp_backcompat",
            "macro_sql": "{% macro bigquery__current_timestamp_backcompat() -%}\n  current_timestamp\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.0521758,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__bool_or": {
            "unique_id": "macro.dbt_bigquery.bigquery__bool_or",
            "package_name": "dbt_bigquery",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/bigquery",
            "path": "macros/utils/bool_or.sql",
            "original_file_path": "macros/utils/bool_or.sql",
            "name": "bigquery__bool_or",
            "macro_sql": "{% macro bigquery__bool_or(expression) -%}\n\n    logical_or({{ expression }})\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.0527792,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__date_trunc": {
            "unique_id": "macro.dbt_bigquery.bigquery__date_trunc",
            "package_name": "dbt_bigquery",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/bigquery",
            "path": "macros/utils/date_trunc.sql",
            "original_file_path": "macros/utils/date_trunc.sql",
            "name": "bigquery__date_trunc",
            "macro_sql": "{% macro bigquery__date_trunc(datepart, date) -%}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.0534713,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__except": {
            "unique_id": "macro.dbt_bigquery.bigquery__except",
            "package_name": "dbt_bigquery",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/bigquery",
            "path": "macros/utils/except.sql",
            "original_file_path": "macros/utils/except.sql",
            "name": "bigquery__except",
            "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.0539448,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__datediff": {
            "unique_id": "macro.dbt_bigquery.bigquery__datediff",
            "package_name": "dbt_bigquery",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/bigquery",
            "path": "macros/utils/datediff.sql",
            "original_file_path": "macros/utils/datediff.sql",
            "name": "bigquery__datediff",
            "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) -%}\n\n  {% if dbt_version[0] == 1 and dbt_version[2] >= 2 %}\n    {{ return(dbt.datediff(first_date, second_date, datepart)) }}\n  {% else %}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n  {% endif %}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.datediff"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.0553734,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__array_construct": {
            "unique_id": "macro.dbt_bigquery.bigquery__array_construct",
            "package_name": "dbt_bigquery",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/bigquery",
            "path": "macros/utils/array_construct.sql",
            "original_file_path": "macros/utils/array_construct.sql",
            "name": "bigquery__array_construct",
            "macro_sql": "{% macro bigquery__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    [ {{ inputs|join(' , ') }} ]\n    {% else %}\n    ARRAY<{{data_type}}>[]\n    {% endif %}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.0563474,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__position": {
            "unique_id": "macro.dbt_bigquery.bigquery__position",
            "package_name": "dbt_bigquery",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/bigquery",
            "path": "macros/utils/position.sql",
            "original_file_path": "macros/utils/position.sql",
            "name": "bigquery__position",
            "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n\n    )\n\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.0570607,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__split_part": {
            "unique_id": "macro.dbt_bigquery.bigquery__split_part",
            "package_name": "dbt_bigquery",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/bigquery",
            "path": "macros/utils/split_part.sql",
            "original_file_path": "macros/utils/split_part.sql",
            "name": "bigquery__split_part",
            "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n  {% else %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset(\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 1\n        )]\n  {% endif %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.0586812,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__listagg": {
            "unique_id": "macro.dbt_bigquery.bigquery__listagg",
            "package_name": "dbt_bigquery",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/bigquery",
            "path": "macros/utils/listagg.sql",
            "original_file_path": "macros/utils/listagg.sql",
            "name": "bigquery__listagg",
            "macro_sql": "{% macro bigquery__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        {% if limit_num -%}\n        limit {{ limit_num }}\n        {%- endif %}\n        )\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.0598996,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__right": {
            "unique_id": "macro.dbt_bigquery.bigquery__right",
            "package_name": "dbt_bigquery",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/bigquery",
            "path": "macros/utils/right.sql",
            "original_file_path": "macros/utils/right.sql",
            "name": "bigquery__right",
            "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.060669,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__hash": {
            "unique_id": "macro.dbt_bigquery.bigquery__hash",
            "package_name": "dbt_bigquery",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/bigquery",
            "path": "macros/utils/hash.sql",
            "original_file_path": "macros/utils/hash.sql",
            "name": "bigquery__hash",
            "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt.default__hash(field)}})\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__hash"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.061299,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__safe_cast": {
            "unique_id": "macro.dbt_bigquery.bigquery__safe_cast",
            "package_name": "dbt_bigquery",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/bigquery",
            "path": "macros/utils/safe_cast.sql",
            "original_file_path": "macros/utils/safe_cast.sql",
            "name": "bigquery__safe_cast",
            "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.0619423,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__intersect": {
            "unique_id": "macro.dbt_bigquery.bigquery__intersect",
            "package_name": "dbt_bigquery",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/bigquery",
            "path": "macros/utils/intersect.sql",
            "original_file_path": "macros/utils/intersect.sql",
            "name": "bigquery__intersect",
            "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.062413,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__escape_single_quotes": {
            "unique_id": "macro.dbt_bigquery.bigquery__escape_single_quotes",
            "package_name": "dbt_bigquery",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/bigquery",
            "path": "macros/utils/escape_single_quotes.sql",
            "original_file_path": "macros/utils/escape_single_quotes.sql",
            "name": "bigquery__escape_single_quotes",
            "macro_sql": "{% macro bigquery__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.063098,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__array_append": {
            "unique_id": "macro.dbt_bigquery.bigquery__array_append",
            "package_name": "dbt_bigquery",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/bigquery",
            "path": "macros/utils/array_append.sql",
            "original_file_path": "macros/utils/array_append.sql",
            "name": "bigquery__array_append",
            "macro_sql": "{% macro bigquery__array_append(array, new_element) -%}\n    {{ array_concat(array, array_construct([new_element])) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.array_concat",
                    "macro.dbt.array_construct"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.0638618,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__dateadd": {
            "unique_id": "macro.dbt_bigquery.bigquery__dateadd",
            "package_name": "dbt_bigquery",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/bigquery",
            "path": "macros/utils/dateadd.sql",
            "original_file_path": "macros/utils/dateadd.sql",
            "name": "bigquery__dateadd",
            "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.0646122,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__array_concat": {
            "unique_id": "macro.dbt_bigquery.bigquery__array_concat",
            "package_name": "dbt_bigquery",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/bigquery",
            "path": "macros/utils/array_concat.sql",
            "original_file_path": "macros/utils/array_concat.sql",
            "name": "bigquery__array_concat",
            "macro_sql": "{% macro bigquery__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.0652516,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__handle_existing_table": {
            "unique_id": "macro.dbt_bigquery.bigquery__handle_existing_table",
            "package_name": "dbt_bigquery",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/bigquery",
            "path": "macros/materializations/view.sql",
            "original_file_path": "macros/materializations/view.sql",
            "name": "bigquery__handle_existing_table",
            "macro_sql": "{% macro bigquery__handle_existing_table(full_refresh, old_relation) %}\n    {%- if full_refresh -%}\n      {{ adapter.drop_relation(old_relation) }}\n    {%- else -%}\n      {{ exceptions.relation_wrong_type(old_relation, 'view') }}\n    {%- endif -%}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.066685,
            "supported_languages": null
        },
        "macro.dbt_bigquery.materialization_view_bigquery": {
            "unique_id": "macro.dbt_bigquery.materialization_view_bigquery",
            "package_name": "dbt_bigquery",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/bigquery",
            "path": "macros/materializations/view.sql",
            "original_file_path": "macros/materializations/view.sql",
            "name": "materialization_view_bigquery",
            "macro_sql": "{% materialization view, adapter='bigquery' -%}\n    -- grab current tables grants config for comparision later on\n    {% set grant_config = config.get('grants') %}\n\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {% if config.get('grant_access_to') %}\n      {% for grant_target_dict in config.get('grant_access_to') %}\n        {% do adapter.grant_access_to(this, 'view', None, grant_target_dict) %}\n      {% endfor %}\n    {% endif %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.create_or_replace_view",
                    "macro.dbt.persist_docs"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.0684316,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.dbt_bigquery.bigquery__snapshot_hash_arguments": {
            "unique_id": "macro.dbt_bigquery.bigquery__snapshot_hash_arguments",
            "package_name": "dbt_bigquery",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/bigquery",
            "path": "macros/materializations/snapshot.sql",
            "original_file_path": "macros/materializations/snapshot.sql",
            "name": "bigquery__snapshot_hash_arguments",
            "macro_sql": "{% macro bigquery__snapshot_hash_arguments(args) -%}\n  to_hex(md5(concat({%- for arg in args -%}\n    coalesce(cast({{ arg }} as string), ''){% if not loop.last %}, '|',{% endif -%}\n  {%- endfor -%}\n  )))\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.0695431,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__create_columns": {
            "unique_id": "macro.dbt_bigquery.bigquery__create_columns",
            "package_name": "dbt_bigquery",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/bigquery",
            "path": "macros/materializations/snapshot.sql",
            "original_file_path": "macros/materializations/snapshot.sql",
            "name": "bigquery__create_columns",
            "macro_sql": "{% macro bigquery__create_columns(relation, columns) %}\n  {{ adapter.alter_table_add_columns(relation, columns) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.0699499,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__post_snapshot": {
            "unique_id": "macro.dbt_bigquery.bigquery__post_snapshot",
            "package_name": "dbt_bigquery",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/bigquery",
            "path": "macros/materializations/snapshot.sql",
            "original_file_path": "macros/materializations/snapshot.sql",
            "name": "bigquery__post_snapshot",
            "macro_sql": "{% macro bigquery__post_snapshot(staging_relation) %}\n  -- Clean up the snapshot temp table\n  {% do drop_relation(staging_relation) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.drop_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.070306,
            "supported_languages": null
        },
        "macro.dbt_bigquery.materialization_copy_bigquery": {
            "unique_id": "macro.dbt_bigquery.materialization_copy_bigquery",
            "package_name": "dbt_bigquery",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/bigquery",
            "path": "macros/materializations/copy.sql",
            "original_file_path": "macros/materializations/copy.sql",
            "name": "materialization_copy_bigquery",
            "macro_sql": "{% materialization copy, adapter='bigquery' -%}\n\n  {# Setup #}\n  {{ run_hooks(pre_hooks) }}\n\n  {% set destination = this.incorporate(type='table') %}\n\n  {# there can be several ref() or source() according to BQ copy API docs #}\n  {# cycle over ref() and source() to create source tables array #}\n  {% set source_array = [] %}\n  {% for ref_table in model.refs %}\n    {{ source_array.append(ref(*ref_table)) }}\n  {% endfor %}\n\n  {% for src_table in model.sources %}\n    {{ source_array.append(source(*src_table)) }}\n  {% endfor %}\n\n  {# Call adapter copy_table function #}\n  {%- set result_str = adapter.copy_table(\n      source_array,\n      destination,\n      config.get('copy_materialization', default = 'table')) -%}\n\n  {{ store_result('main', response=result_str) }}\n\n  {# Clean up #}\n  {{ run_hooks(post_hooks) }}\n  {%- do apply_grants(target_relation, grant_config) -%}\n  {{ adapter.commit() }}\n\n  {{ return({'relations': [destination]}) }}\n{%- endmaterialization %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.apply_grants"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.0735953,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.dbt_bigquery.declare_dbt_max_partition": {
            "unique_id": "macro.dbt_bigquery.declare_dbt_max_partition",
            "package_name": "dbt_bigquery",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/bigquery",
            "path": "macros/materializations/incremental.sql",
            "original_file_path": "macros/materializations/incremental.sql",
            "name": "declare_dbt_max_partition",
            "macro_sql": "{% macro declare_dbt_max_partition(relation, partition_by, complied_code, language='sql') %}\n\n  {#-- TODO: revisit partitioning with python models --#}\n  {%- if '_dbt_max_partition' in complied_code and language == 'sql' -%}\n\n    declare _dbt_max_partition {{ partition_by.data_type }} default (\n      select max({{ partition_by.field }}) from {{ this }}\n      where {{ partition_by.field }} is not null\n    );\n\n  {%- endif -%}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.0781524,
            "supported_languages": null
        },
        "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy": {
            "unique_id": "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy",
            "package_name": "dbt_bigquery",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/bigquery",
            "path": "macros/materializations/incremental.sql",
            "original_file_path": "macros/materializations/incremental.sql",
            "name": "dbt_bigquery_validate_get_incremental_strategy",
            "macro_sql": "{% macro dbt_bigquery_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\") or 'merge' -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'insert_overwrite'\n  {%- endset %}\n  {% if strategy not in ['merge', 'insert_overwrite'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.0792763,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bq_insert_overwrite": {
            "unique_id": "macro.dbt_bigquery.bq_insert_overwrite",
            "package_name": "dbt_bigquery",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/bigquery",
            "path": "macros/materializations/incremental.sql",
            "original_file_path": "macros/materializations/incremental.sql",
            "name": "bq_insert_overwrite",
            "macro_sql": "{% macro bq_insert_overwrite(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists\n) %}\n\n  {% if partitions is not none and partitions != [] %} {# static #}\n\n      {% set predicate -%}\n          {{ partition_by.render(alias='DBT_INTERNAL_DEST') }} in (\n              {{ partitions | join (', ') }}\n          )\n      {%- endset %}\n\n      {%- set source_sql -%}\n        (\n          {{sql}}\n        )\n      {%- endset -%}\n\n      {#-- Because we're putting the model SQL _directly_ into the MERGE statement,\n         we need to prepend the MERGE statement with the user-configured sql_header,\n         which may be needed to resolve that model SQL (e.g. referencing a variable or UDF in the header)\n         in the \"dynamic\" case, we save the model SQL result as a temp table first, wherein the\n         sql_header is included by the create_table_as macro.\n      #}\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate], include_sql_header=true) }}\n\n  {% else %} {# dynamic #}\n\n      {% set predicate -%}\n          {{ partition_by.render(alias='DBT_INTERNAL_DEST') }} in unnest(dbt_partitions_for_replacement)\n      {%- endset %}\n\n      {%- set source_sql -%}\n      (\n        select * from {{ tmp_relation }}\n      )\n      {%- endset -%}\n\n      -- generated script to merge partitions into {{ target_relation }}\n      declare dbt_partitions_for_replacement array<{{ partition_by.data_type }}>;\n\n      {# have we already created the temp table to check for schema changes? #}\n      {% if not tmp_relation_exists %}\n        {{ declare_dbt_max_partition(this, partition_by, sql) }}\n\n        -- 1. create a temp table\n        {{ create_table_as(True, tmp_relation, compiled_code) }}\n      {% else %}\n        -- 1. temp table already exists, we used it to check for schema changes\n      {% endif %}\n\n      -- 2. define partitions to update\n      set (dbt_partitions_for_replacement) = (\n          select as struct\n              array_agg(distinct {{ partition_by.render() }})\n          from {{ tmp_relation }}\n      );\n\n      -- 3. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate]) }};\n\n      -- 4. clean up the temp table\n      drop table if exists {{ tmp_relation }}\n\n  {% endif %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_insert_overwrite_merge_sql",
                    "macro.dbt_bigquery.declare_dbt_max_partition",
                    "macro.dbt.create_table_as"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.0824907,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bq_generate_incremental_build_sql": {
            "unique_id": "macro.dbt_bigquery.bq_generate_incremental_build_sql",
            "package_name": "dbt_bigquery",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/bigquery",
            "path": "macros/materializations/incremental.sql",
            "original_file_path": "macros/materializations/incremental.sql",
            "name": "bq_generate_incremental_build_sql",
            "macro_sql": "{% macro bq_generate_incremental_build_sql(\n    strategy, tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists\n) %}\n  {#-- if partitioned, use BQ scripting to get the range of partition values to be updated --#}\n  {% if strategy == 'insert_overwrite' %}\n\n    {% set missing_partition_msg -%}\n      The 'insert_overwrite' strategy requires the `partition_by` config.\n    {%- endset %}\n    {% if partition_by is none %}\n      {% do exceptions.raise_compiler_error(missing_partition_msg) %}\n    {% endif %}\n\n    {% set build_sql = bq_insert_overwrite(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists\n    ) %}\n\n  {% else %} {# strategy == 'merge' #}\n    {%- set source_sql -%}\n      {%- if tmp_relation_exists -%}\n        (\n          select * from {{ tmp_relation }}\n        )\n      {%- else -%} {#-- wrap sql in parens to make it a subquery --#}\n        (\n          {{sql}}\n        )\n      {%- endif -%}\n    {%- endset -%}\n\n    {% set build_sql = get_merge_sql(target_relation, source_sql, unique_key, dest_columns) %}\n\n  {% endif %}\n\n  {{ return(build_sql) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bq_insert_overwrite",
                    "macro.dbt.get_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.0847347,
            "supported_languages": null
        },
        "macro.dbt_bigquery.materialization_incremental_bigquery": {
            "unique_id": "macro.dbt_bigquery.materialization_incremental_bigquery",
            "package_name": "dbt_bigquery",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/bigquery",
            "path": "macros/materializations/incremental.sql",
            "original_file_path": "macros/materializations/incremental.sql",
            "name": "materialization_incremental_bigquery",
            "macro_sql": "{% materialization incremental, adapter='bigquery', supported_languages=['sql', 'python'] -%}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {%- set language = model['language'] %}\n\n  {%- set target_relation = this %}\n  {%- set existing_relation = load_relation(this) %}\n  {%- set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_bigquery_validate_get_incremental_strategy(config) -%}\n\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set partitions = config.get('partitions', none) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n      {%- call statement('main', language=language) -%}\n        {{ create_table_as(False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% elif existing_relation.is_view %}\n      {#-- There's no way to atomically replace a view with a table on BQ --#}\n      {{ adapter.drop_relation(existing_relation) }}\n      {%- call statement('main', language=language) -%}\n        {{ create_table_as(False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% elif full_refresh_mode %}\n      {#-- If the partition/cluster config has changed, then we must drop and recreate --#}\n      {% if not adapter.is_replaceable(existing_relation, partition_by, cluster_by) %}\n          {% do log(\"Hard refreshing \" ~ existing_relation ~ \" because it is not replaceable\") %}\n          {{ adapter.drop_relation(existing_relation) }}\n      {% endif %}\n      {%- call statement('main', language=language) -%}\n        {{ create_table_as(False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% else %}\n    {%- if language == 'python' and strategy == 'insert_overwrite' -%}\n      {#-- This lets us move forward assuming no python will be directly templated into a query --#}\n      {%- set python_unsupported_msg -%}\n        The 'insert_overwrite' strategy is not yet supported for python models.\n      {%- endset %}\n      {% do exceptions.raise_compiler_error(python_unsupported_msg) %}\n    {%- endif -%}\n\n    {% set tmp_relation_exists = false %}\n    {% if on_schema_change != 'ignore' or language == 'python' %}\n      {#-- Check first, since otherwise we may not build a temp table --#}\n      {#-- Python always needs to create a temp table --#}\n      {%- call statement('create_tmp_relation', language=language) -%}\n        {{ declare_dbt_max_partition(this, partition_by, compiled_code, language) +\n           create_table_as(True, tmp_relation, compiled_code, language)\n        }}\n      {%- endcall -%}\n      {% set tmp_relation_exists = true %}\n      {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n      {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% endif %}\n\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = bq_generate_incremental_build_sql(\n        strategy, tmp_relation, target_relation, compiled_code, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists\n    ) %}\n\n    {%- call statement('main') -%}\n      {{ build_sql }}\n    {% endcall %}\n\n    {%- if language == 'python' and tmp_relation -%}\n      {{ adapter.drop_relation(tmp_relation) }}\n    {%- endif -%}\n\n  {% endif %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.should_full_refresh",
                    "macro.dbt.load_relation",
                    "macro.dbt.make_temp_relation",
                    "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy",
                    "macro.dbt.incremental_validate_on_schema_change",
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.create_table_as",
                    "macro.dbt_bigquery.declare_dbt_max_partition",
                    "macro.dbt.process_schema_changes",
                    "macro.dbt_bigquery.bq_generate_incremental_build_sql",
                    "macro.dbt.should_revoke",
                    "macro.dbt.apply_grants",
                    "macro.dbt.persist_docs"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.0937316,
            "supported_languages": [
                "sql",
                "python"
            ]
        },
        "macro.dbt_bigquery.bigquery__create_csv_table": {
            "unique_id": "macro.dbt_bigquery.bigquery__create_csv_table",
            "package_name": "dbt_bigquery",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/bigquery",
            "path": "macros/materializations/seed.sql",
            "original_file_path": "macros/materializations/seed.sql",
            "name": "bigquery__create_csv_table",
            "macro_sql": "{% macro bigquery__create_csv_table(model, agate_table) %}\n    -- no-op\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.09468,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__reset_csv_table": {
            "unique_id": "macro.dbt_bigquery.bigquery__reset_csv_table",
            "package_name": "dbt_bigquery",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/bigquery",
            "path": "macros/materializations/seed.sql",
            "original_file_path": "macros/materializations/seed.sql",
            "name": "bigquery__reset_csv_table",
            "macro_sql": "{% macro bigquery__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.095106,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__load_csv_rows": {
            "unique_id": "macro.dbt_bigquery.bigquery__load_csv_rows",
            "package_name": "dbt_bigquery",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/bigquery",
            "path": "macros/materializations/seed.sql",
            "original_file_path": "macros/materializations/seed.sql",
            "name": "bigquery__load_csv_rows",
            "macro_sql": "{% macro bigquery__load_csv_rows(model, agate_table) %}\n\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {{ adapter.load_dataframe(model['database'], model['schema'], model['alias'],\n  \t\t\t\t\t\t\tagate_table, column_override) }}\n  {% if config.persist_relation_docs() and 'description' in model %}\n\n  \t{{ adapter.update_table_description(model['database'], model['schema'], model['alias'], model['description']) }}\n  {% endif %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.0966325,
            "supported_languages": null
        },
        "macro.dbt_bigquery.materialization_table_bigquery": {
            "unique_id": "macro.dbt_bigquery.materialization_table_bigquery",
            "package_name": "dbt_bigquery",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/bigquery",
            "path": "macros/materializations/table.sql",
            "original_file_path": "macros/materializations/table.sql",
            "name": "materialization_table_bigquery",
            "macro_sql": "{% materialization table, adapter='bigquery', supported_languages=['sql', 'python']-%}\n\n  {%- set language = model['language'] -%}\n  {%- set identifier = model['alias'] -%}\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n  {%- set target_relation = api.Relation.create(database=database, schema=schema, identifier=identifier, type='table') -%}\n\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#\n      We only need to drop this thing if it is not a table.\n      If it _is_ already a table, then we can overwrite it without downtime\n      Unlike table -> view, no need for `--full-refresh`: dropping a view is no big deal\n  #}\n  {%- if exists_not_as_table -%}\n      {{ adapter.drop_relation(old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n  {% if not adapter.is_replaceable(old_relation, partition_by, cluster_by) %}\n    {% do log(\"Hard refreshing \" ~ old_relation ~ \" because it is not replaceable\") %}\n    {% do adapter.drop_relation(old_relation) %}\n  {% endif %}\n\n  -- build model\n  {%- call statement('main', language=language) -%}\n    {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.create_table_as",
                    "macro.dbt.should_revoke",
                    "macro.dbt.apply_grants",
                    "macro.dbt.persist_docs"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.1039112,
            "supported_languages": [
                "sql",
                "python"
            ]
        },
        "macro.dbt_bigquery.py_write_table": {
            "unique_id": "macro.dbt_bigquery.py_write_table",
            "package_name": "dbt_bigquery",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/bigquery",
            "path": "macros/materializations/table.sql",
            "original_file_path": "macros/materializations/table.sql",
            "name": "py_write_table",
            "macro_sql": "{% macro py_write_table(compiled_code, target_relation) %}\nfrom pyspark.sql import SparkSession\n\nspark = SparkSession.builder.appName('smallTest').getOrCreate()\n\nspark.conf.set(\"viewsEnabled\",\"true\")\nspark.conf.set(\"temporaryGcsBucket\",\"{{target.gcs_bucket}}\")\n\n{{ compiled_code }}\ndbt = dbtObj(spark.read.format(\"bigquery\").load)\ndf = model(dbt, spark)\n\n# COMMAND ----------\n# this is materialization code dbt generated, please do not modify\n\nimport pyspark\n# make sure pandas exists before using it\ntry:\n  import pandas\n  pandas_available = True\nexcept ImportError:\n  pandas_available = False\n\n# make sure pyspark.pandas exists before using it\ntry:\n  import pyspark.pandas\n  pyspark_pandas_api_available = True\nexcept ImportError:\n  pyspark_pandas_api_available = False\n\n# make sure databricks.koalas exists before using it\ntry:\n  import databricks.koalas\n  koalas_available = True\nexcept ImportError:\n  koalas_available = False\n\n# preferentially convert pandas DataFrames to pandas-on-Spark or Koalas DataFrames first\n# since they know how to convert pandas DataFrames better than `spark.createDataFrame(df)`\n# and converting from pandas-on-Spark to Spark DataFrame has no overhead\nif pyspark_pandas_api_available and pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = pyspark.pandas.frame.DataFrame(df)\nelif koalas_available and pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = databricks.koalas.frame.DataFrame(df)\n\n# convert to pyspark.sql.dataframe.DataFrame\nif isinstance(df, pyspark.sql.dataframe.DataFrame):\n  pass  # since it is already a Spark DataFrame\nelif pyspark_pandas_api_available and isinstance(df, pyspark.pandas.frame.DataFrame):\n  df = df.to_spark()\nelif koalas_available and isinstance(df, databricks.koalas.frame.DataFrame):\n  df = df.to_spark()\nelif pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = spark.createDataFrame(df)\nelse:\n  msg = f\"{type(df)} is not a supported type for dbt Python materialization\"\n  raise Exception(msg)\n\ndf.write \\\n  .mode(\"overwrite\") \\\n  .format(\"bigquery\") \\\n  .option(\"writeMethod\", \"direct\").option(\"writeDisposition\", 'WRITE_TRUNCATE') \\\n  .save(\"{{target_relation}}\")\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.1045582,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__get_show_grant_sql": {
            "unique_id": "macro.dbt_bigquery.bigquery__get_show_grant_sql",
            "package_name": "dbt_bigquery",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/bigquery",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "name": "bigquery__get_show_grant_sql",
            "macro_sql": "{% macro bigquery__get_show_grant_sql(relation) %}\n    {% set location = adapter.get_dataset_location(relation) %}\n    {% set relation = relation.incorporate(location=location) %}\n\n    select privilege_type, grantee\n    from {{ relation.information_schema(\"OBJECT_PRIVILEGES\") }}\n    where object_schema = \"{{ relation.dataset }}\"\n      and object_name = \"{{ relation.identifier }}\"\n      -- filter out current user\n      and split(grantee, ':')[offset(1)] != session_user()\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.1062195,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__get_grant_sql": {
            "unique_id": "macro.dbt_bigquery.bigquery__get_grant_sql",
            "package_name": "dbt_bigquery",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/bigquery",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "name": "bigquery__get_grant_sql",
            "macro_sql": "\n\n\n{%- macro bigquery__get_grant_sql(relation, privilege, grantee) -%}\n    grant `{{ privilege }}` on {{ relation.type }} {{ relation }} to {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.1068583,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__get_revoke_sql": {
            "unique_id": "macro.dbt_bigquery.bigquery__get_revoke_sql",
            "package_name": "dbt_bigquery",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/bigquery",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "name": "bigquery__get_revoke_sql",
            "macro_sql": "{%- macro bigquery__get_revoke_sql(relation, privilege, grantee) -%}\n    revoke `{{ privilege }}` on {{ relation.type }} {{ relation }} from {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.1074834,
            "supported_languages": null
        },
        "macro.dbt.generate_database_name": {
            "unique_id": "macro.dbt.generate_database_name",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/get_custom_name/get_custom_database.sql",
            "original_file_path": "macros/get_custom_name/get_custom_database.sql",
            "name": "generate_database_name",
            "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__generate_database_name"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.1086087,
            "supported_languages": null
        },
        "macro.dbt.default__generate_database_name": {
            "unique_id": "macro.dbt.default__generate_database_name",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/get_custom_name/get_custom_database.sql",
            "original_file_path": "macros/get_custom_name/get_custom_database.sql",
            "name": "default__generate_database_name",
            "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.1093068,
            "supported_languages": null
        },
        "macro.dbt.generate_alias_name": {
            "unique_id": "macro.dbt.generate_alias_name",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/get_custom_name/get_custom_alias.sql",
            "original_file_path": "macros/get_custom_name/get_custom_alias.sql",
            "name": "generate_alias_name",
            "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__generate_alias_name"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.1103616,
            "supported_languages": null
        },
        "macro.dbt.default__generate_alias_name": {
            "unique_id": "macro.dbt.default__generate_alias_name",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/get_custom_name/get_custom_alias.sql",
            "original_file_path": "macros/get_custom_name/get_custom_alias.sql",
            "name": "default__generate_alias_name",
            "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.1109574,
            "supported_languages": null
        },
        "macro.dbt.generate_schema_name": {
            "unique_id": "macro.dbt.generate_schema_name",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/get_custom_name/get_custom_schema.sql",
            "original_file_path": "macros/get_custom_name/get_custom_schema.sql",
            "name": "generate_schema_name",
            "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__generate_schema_name"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.1122508,
            "supported_languages": null
        },
        "macro.dbt.default__generate_schema_name": {
            "unique_id": "macro.dbt.default__generate_schema_name",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/get_custom_name/get_custom_schema.sql",
            "original_file_path": "macros/get_custom_name/get_custom_schema.sql",
            "name": "default__generate_schema_name",
            "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.112942,
            "supported_languages": null
        },
        "macro.dbt.generate_schema_name_for_env": {
            "unique_id": "macro.dbt.generate_schema_name_for_env",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/get_custom_name/get_custom_schema.sql",
            "original_file_path": "macros/get_custom_name/get_custom_schema.sql",
            "name": "generate_schema_name_for_env",
            "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.113674,
            "supported_languages": null
        },
        "macro.dbt.build_ref_function": {
            "unique_id": "macro.dbt.build_ref_function",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/python_model/python.sql",
            "original_file_path": "macros/python_model/python.sql",
            "name": "build_ref_function",
            "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {%- set resolved = ref(*_ref) -%}\n        {%- do ref_dict.update({_ref | join(\".\"): resolved.quote(database=False, schema=False, identifier=False) | string}) -%}\n    {%- endfor -%}\n\ndef ref(*args,dbt_load_df_function):\n    refs = {{ ref_dict | tojson }}\n    key = \".\".join(args)\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.1166613,
            "supported_languages": null
        },
        "macro.dbt.build_source_function": {
            "unique_id": "macro.dbt.build_source_function",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/python_model/python.sql",
            "original_file_path": "macros/python_model/python.sql",
            "name": "build_source_function",
            "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join(\".\"): resolved.quote(database=False, schema=False, identifier=False) | string}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = \".\".join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.1179798,
            "supported_languages": null
        },
        "macro.dbt.build_config_dict": {
            "unique_id": "macro.dbt.build_config_dict",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/python_model/python.sql",
            "original_file_path": "macros/python_model/python.sql",
            "name": "build_config_dict",
            "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {%- for key in model.config.config_keys_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == 'language' -%}\n          {%- set value = 'python' -%}\n        {%- endif -%}\n        {%- set value = model.config[key] -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.1191232,
            "supported_languages": null
        },
        "macro.dbt.py_script_postfix": {
            "unique_id": "macro.dbt.py_script_postfix",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/python_model/python.sql",
            "original_file_path": "macros/python_model/python.sql",
            "name": "py_script_postfix",
            "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = '{{ this.database }}'\n    schema = '{{ this.schema }}'\n    identifier = '{{ this.identifier }}'\n    def __repr__(self):\n        return '{{ this }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args: ref(*args, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.build_ref_function",
                    "macro.dbt.build_source_function",
                    "macro.dbt.build_config_dict",
                    "macro.dbt.is_incremental",
                    "macro.dbt.py_script_comment"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.1201272,
            "supported_languages": null
        },
        "macro.dbt.py_script_comment": {
            "unique_id": "macro.dbt.py_script_comment",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/python_model/python.sql",
            "original_file_path": "macros/python_model/python.sql",
            "name": "py_script_comment",
            "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.1203294,
            "supported_languages": null
        },
        "macro.dbt.length": {
            "unique_id": "macro.dbt.length",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/utils/length.sql",
            "original_file_path": "macros/utils/length.sql",
            "name": "length",
            "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__length"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.1213584,
            "supported_languages": null
        },
        "macro.dbt.default__length": {
            "unique_id": "macro.dbt.default__length",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/utils/length.sql",
            "original_file_path": "macros/utils/length.sql",
            "name": "default__length",
            "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.1216493,
            "supported_languages": null
        },
        "macro.dbt.bool_or": {
            "unique_id": "macro.dbt.bool_or",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/utils/bool_or.sql",
            "original_file_path": "macros/utils/bool_or.sql",
            "name": "bool_or",
            "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__bool_or"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.1224751,
            "supported_languages": null
        },
        "macro.dbt.default__bool_or": {
            "unique_id": "macro.dbt.default__bool_or",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/utils/bool_or.sql",
            "original_file_path": "macros/utils/bool_or.sql",
            "name": "default__bool_or",
            "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.122803,
            "supported_languages": null
        },
        "macro.dbt.date_trunc": {
            "unique_id": "macro.dbt.date_trunc",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/utils/date_trunc.sql",
            "original_file_path": "macros/utils/date_trunc.sql",
            "name": "date_trunc",
            "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__date_trunc"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.1236963,
            "supported_languages": null
        },
        "macro.dbt.default__date_trunc": {
            "unique_id": "macro.dbt.default__date_trunc",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/utils/date_trunc.sql",
            "original_file_path": "macros/utils/date_trunc.sql",
            "name": "default__date_trunc",
            "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.124051,
            "supported_languages": null
        },
        "macro.dbt.except": {
            "unique_id": "macro.dbt.except",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/utils/except.sql",
            "original_file_path": "macros/utils/except.sql",
            "name": "except",
            "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__except"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.124822,
            "supported_languages": null
        },
        "macro.dbt.default__except": {
            "unique_id": "macro.dbt.default__except",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/utils/except.sql",
            "original_file_path": "macros/utils/except.sql",
            "name": "default__except",
            "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.125035,
            "supported_languages": null
        },
        "macro.dbt.any_value": {
            "unique_id": "macro.dbt.any_value",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/utils/any_value.sql",
            "original_file_path": "macros/utils/any_value.sql",
            "name": "any_value",
            "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__any_value"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.1258602,
            "supported_languages": null
        },
        "macro.dbt.default__any_value": {
            "unique_id": "macro.dbt.default__any_value",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/utils/any_value.sql",
            "original_file_path": "macros/utils/any_value.sql",
            "name": "default__any_value",
            "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.1261458,
            "supported_languages": null
        },
        "macro.dbt.datediff": {
            "unique_id": "macro.dbt.datediff",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/utils/datediff.sql",
            "original_file_path": "macros/utils/datediff.sql",
            "name": "datediff",
            "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__datediff"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.1271384,
            "supported_languages": null
        },
        "macro.dbt.default__datediff": {
            "unique_id": "macro.dbt.default__datediff",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/utils/datediff.sql",
            "original_file_path": "macros/utils/datediff.sql",
            "name": "default__datediff",
            "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.1275768,
            "supported_languages": null
        },
        "macro.dbt.array_construct": {
            "unique_id": "macro.dbt.array_construct",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/utils/array_construct.sql",
            "original_file_path": "macros/utils/array_construct.sql",
            "name": "array_construct",
            "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__array_construct"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.1286783,
            "supported_languages": null
        },
        "macro.dbt.default__array_construct": {
            "unique_id": "macro.dbt.default__array_construct",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/utils/array_construct.sql",
            "original_file_path": "macros/utils/array_construct.sql",
            "name": "default__array_construct",
            "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.1293411,
            "supported_languages": null
        },
        "macro.dbt.last_day": {
            "unique_id": "macro.dbt.last_day",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/utils/last_day.sql",
            "original_file_path": "macros/utils/last_day.sql",
            "name": "last_day",
            "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__last_day"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.130345,
            "supported_languages": null
        },
        "macro.dbt.default_last_day": {
            "unique_id": "macro.dbt.default_last_day",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/utils/last_day.sql",
            "original_file_path": "macros/utils/last_day.sql",
            "name": "default_last_day",
            "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.dateadd",
                    "macro.dbt.date_trunc"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.1310313,
            "supported_languages": null
        },
        "macro.dbt.default__last_day": {
            "unique_id": "macro.dbt.default__last_day",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/utils/last_day.sql",
            "original_file_path": "macros/utils/last_day.sql",
            "name": "default__last_day",
            "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default_last_day"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.1314397,
            "supported_languages": null
        },
        "macro.dbt.position": {
            "unique_id": "macro.dbt.position",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/utils/position.sql",
            "original_file_path": "macros/utils/position.sql",
            "name": "position",
            "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__position"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.1323473,
            "supported_languages": null
        },
        "macro.dbt.default__position": {
            "unique_id": "macro.dbt.default__position",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/utils/position.sql",
            "original_file_path": "macros/utils/position.sql",
            "name": "default__position",
            "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.1328447,
            "supported_languages": null
        },
        "macro.dbt.split_part": {
            "unique_id": "macro.dbt.split_part",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/utils/split_part.sql",
            "original_file_path": "macros/utils/split_part.sql",
            "name": "split_part",
            "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__split_part"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.1341023,
            "supported_languages": null
        },
        "macro.dbt.default__split_part": {
            "unique_id": "macro.dbt.default__split_part",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/utils/split_part.sql",
            "original_file_path": "macros/utils/split_part.sql",
            "name": "default__split_part",
            "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.1345363,
            "supported_languages": null
        },
        "macro.dbt._split_part_negative": {
            "unique_id": "macro.dbt._split_part_negative",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/utils/split_part.sql",
            "original_file_path": "macros/utils/split_part.sql",
            "name": "_split_part_negative",
            "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.1351244,
            "supported_languages": null
        },
        "macro.dbt.listagg": {
            "unique_id": "macro.dbt.listagg",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/utils/listagg.sql",
            "original_file_path": "macros/utils/listagg.sql",
            "name": "listagg",
            "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__listagg"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.1366506,
            "supported_languages": null
        },
        "macro.dbt.default__listagg": {
            "unique_id": "macro.dbt.default__listagg",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/utils/listagg.sql",
            "original_file_path": "macros/utils/listagg.sql",
            "name": "default__listagg",
            "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.137715,
            "supported_languages": null
        },
        "macro.dbt.string_literal": {
            "unique_id": "macro.dbt.string_literal",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/utils/literal.sql",
            "original_file_path": "macros/utils/literal.sql",
            "name": "string_literal",
            "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__string_literal"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.1385407,
            "supported_languages": null
        },
        "macro.dbt.default__string_literal": {
            "unique_id": "macro.dbt.default__string_literal",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/utils/literal.sql",
            "original_file_path": "macros/utils/literal.sql",
            "name": "default__string_literal",
            "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.1388247,
            "supported_languages": null
        },
        "macro.dbt.right": {
            "unique_id": "macro.dbt.right",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/utils/right.sql",
            "original_file_path": "macros/utils/right.sql",
            "name": "right",
            "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__right"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.139744,
            "supported_languages": null
        },
        "macro.dbt.default__right": {
            "unique_id": "macro.dbt.default__right",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/utils/right.sql",
            "original_file_path": "macros/utils/right.sql",
            "name": "default__right",
            "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.1401126,
            "supported_languages": null
        },
        "macro.dbt.hash": {
            "unique_id": "macro.dbt.hash",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/utils/hash.sql",
            "original_file_path": "macros/utils/hash.sql",
            "name": "hash",
            "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__hash"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.1409612,
            "supported_languages": null
        },
        "macro.dbt.default__hash": {
            "unique_id": "macro.dbt.default__hash",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/utils/hash.sql",
            "original_file_path": "macros/utils/hash.sql",
            "name": "default__hash",
            "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.141389,
            "supported_languages": null
        },
        "macro.dbt.replace": {
            "unique_id": "macro.dbt.replace",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/utils/replace.sql",
            "original_file_path": "macros/utils/replace.sql",
            "name": "replace",
            "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__replace"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.1424038,
            "supported_languages": null
        },
        "macro.dbt.default__replace": {
            "unique_id": "macro.dbt.default__replace",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/utils/replace.sql",
            "original_file_path": "macros/utils/replace.sql",
            "name": "default__replace",
            "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.1428611,
            "supported_languages": null
        },
        "macro.dbt.safe_cast": {
            "unique_id": "macro.dbt.safe_cast",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/utils/safe_cast.sql",
            "original_file_path": "macros/utils/safe_cast.sql",
            "name": "safe_cast",
            "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__safe_cast"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.1437736,
            "supported_languages": null
        },
        "macro.dbt.default__safe_cast": {
            "unique_id": "macro.dbt.default__safe_cast",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/utils/safe_cast.sql",
            "original_file_path": "macros/utils/safe_cast.sql",
            "name": "default__safe_cast",
            "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.144155,
            "supported_languages": null
        },
        "macro.dbt.intersect": {
            "unique_id": "macro.dbt.intersect",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/utils/intersect.sql",
            "original_file_path": "macros/utils/intersect.sql",
            "name": "intersect",
            "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__intersect"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.1449268,
            "supported_languages": null
        },
        "macro.dbt.default__intersect": {
            "unique_id": "macro.dbt.default__intersect",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/utils/intersect.sql",
            "original_file_path": "macros/utils/intersect.sql",
            "name": "default__intersect",
            "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.1451383,
            "supported_languages": null
        },
        "macro.dbt.concat": {
            "unique_id": "macro.dbt.concat",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/utils/concat.sql",
            "original_file_path": "macros/utils/concat.sql",
            "name": "concat",
            "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__concat"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.1459596,
            "supported_languages": null
        },
        "macro.dbt.default__concat": {
            "unique_id": "macro.dbt.default__concat",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/utils/concat.sql",
            "original_file_path": "macros/utils/concat.sql",
            "name": "default__concat",
            "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.146704,
            "supported_languages": null
        },
        "macro.dbt.escape_single_quotes": {
            "unique_id": "macro.dbt.escape_single_quotes",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/utils/escape_single_quotes.sql",
            "original_file_path": "macros/utils/escape_single_quotes.sql",
            "name": "escape_single_quotes",
            "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__escape_single_quotes"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.147624,
            "supported_languages": null
        },
        "macro.dbt.default__escape_single_quotes": {
            "unique_id": "macro.dbt.default__escape_single_quotes",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/utils/escape_single_quotes.sql",
            "original_file_path": "macros/utils/escape_single_quotes.sql",
            "name": "default__escape_single_quotes",
            "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.1479943,
            "supported_languages": null
        },
        "macro.dbt.array_append": {
            "unique_id": "macro.dbt.array_append",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/utils/array_append.sql",
            "original_file_path": "macros/utils/array_append.sql",
            "name": "array_append",
            "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__array_append"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.1488795,
            "supported_languages": null
        },
        "macro.dbt.default__array_append": {
            "unique_id": "macro.dbt.default__array_append",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/utils/array_append.sql",
            "original_file_path": "macros/utils/array_append.sql",
            "name": "default__array_append",
            "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.149241,
            "supported_languages": null
        },
        "macro.dbt.dateadd": {
            "unique_id": "macro.dbt.dateadd",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/utils/dateadd.sql",
            "original_file_path": "macros/utils/dateadd.sql",
            "name": "dateadd",
            "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__dateadd"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.1502469,
            "supported_languages": null
        },
        "macro.dbt.default__dateadd": {
            "unique_id": "macro.dbt.default__dateadd",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/utils/dateadd.sql",
            "original_file_path": "macros/utils/dateadd.sql",
            "name": "default__dateadd",
            "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.150678,
            "supported_languages": null
        },
        "macro.dbt.type_string": {
            "unique_id": "macro.dbt.type_string",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/utils/data_types.sql",
            "original_file_path": "macros/utils/data_types.sql",
            "name": "type_string",
            "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__type_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.152761,
            "supported_languages": null
        },
        "macro.dbt.default__type_string": {
            "unique_id": "macro.dbt.default__type_string",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/utils/data_types.sql",
            "original_file_path": "macros/utils/data_types.sql",
            "name": "default__type_string",
            "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.1531734,
            "supported_languages": null
        },
        "macro.dbt.type_timestamp": {
            "unique_id": "macro.dbt.type_timestamp",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/utils/data_types.sql",
            "original_file_path": "macros/utils/data_types.sql",
            "name": "type_timestamp",
            "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__type_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.153607,
            "supported_languages": null
        },
        "macro.dbt.default__type_timestamp": {
            "unique_id": "macro.dbt.default__type_timestamp",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/utils/data_types.sql",
            "original_file_path": "macros/utils/data_types.sql",
            "name": "default__type_timestamp",
            "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.1540134,
            "supported_languages": null
        },
        "macro.dbt.type_float": {
            "unique_id": "macro.dbt.type_float",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/utils/data_types.sql",
            "original_file_path": "macros/utils/data_types.sql",
            "name": "type_float",
            "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__type_float"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.1544418,
            "supported_languages": null
        },
        "macro.dbt.default__type_float": {
            "unique_id": "macro.dbt.default__type_float",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/utils/data_types.sql",
            "original_file_path": "macros/utils/data_types.sql",
            "name": "default__type_float",
            "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.1548448,
            "supported_languages": null
        },
        "macro.dbt.type_numeric": {
            "unique_id": "macro.dbt.type_numeric",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/utils/data_types.sql",
            "original_file_path": "macros/utils/data_types.sql",
            "name": "type_numeric",
            "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__type_numeric"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.1552703,
            "supported_languages": null
        },
        "macro.dbt.default__type_numeric": {
            "unique_id": "macro.dbt.default__type_numeric",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/utils/data_types.sql",
            "original_file_path": "macros/utils/data_types.sql",
            "name": "default__type_numeric",
            "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.1557298,
            "supported_languages": null
        },
        "macro.dbt.type_bigint": {
            "unique_id": "macro.dbt.type_bigint",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/utils/data_types.sql",
            "original_file_path": "macros/utils/data_types.sql",
            "name": "type_bigint",
            "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__type_bigint"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.15615,
            "supported_languages": null
        },
        "macro.dbt.default__type_bigint": {
            "unique_id": "macro.dbt.default__type_bigint",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/utils/data_types.sql",
            "original_file_path": "macros/utils/data_types.sql",
            "name": "default__type_bigint",
            "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.1565492,
            "supported_languages": null
        },
        "macro.dbt.type_int": {
            "unique_id": "macro.dbt.type_int",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/utils/data_types.sql",
            "original_file_path": "macros/utils/data_types.sql",
            "name": "type_int",
            "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__type_int"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.1569717,
            "supported_languages": null
        },
        "macro.dbt.default__type_int": {
            "unique_id": "macro.dbt.default__type_int",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/utils/data_types.sql",
            "original_file_path": "macros/utils/data_types.sql",
            "name": "default__type_int",
            "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.157362,
            "supported_languages": null
        },
        "macro.dbt.type_boolean": {
            "unique_id": "macro.dbt.type_boolean",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/utils/data_types.sql",
            "original_file_path": "macros/utils/data_types.sql",
            "name": "type_boolean",
            "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__type_boolean"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.207511,
            "supported_languages": null
        },
        "macro.dbt.default__type_boolean": {
            "unique_id": "macro.dbt.default__type_boolean",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/utils/data_types.sql",
            "original_file_path": "macros/utils/data_types.sql",
            "name": "default__type_boolean",
            "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.2082512,
            "supported_languages": null
        },
        "macro.dbt.array_concat": {
            "unique_id": "macro.dbt.array_concat",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/utils/array_concat.sql",
            "original_file_path": "macros/utils/array_concat.sql",
            "name": "array_concat",
            "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__array_concat"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.2099223,
            "supported_languages": null
        },
        "macro.dbt.default__array_concat": {
            "unique_id": "macro.dbt.default__array_concat",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/utils/array_concat.sql",
            "original_file_path": "macros/utils/array_concat.sql",
            "name": "default__array_concat",
            "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.2105427,
            "supported_languages": null
        },
        "macro.dbt.cast_bool_to_text": {
            "unique_id": "macro.dbt.cast_bool_to_text",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/utils/cast_bool_to_text.sql",
            "original_file_path": "macros/utils/cast_bool_to_text.sql",
            "name": "cast_bool_to_text",
            "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__cast_bool_to_text"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.212015,
            "supported_languages": null
        },
        "macro.dbt.default__cast_bool_to_text": {
            "unique_id": "macro.dbt.default__cast_bool_to_text",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/utils/cast_bool_to_text.sql",
            "original_file_path": "macros/utils/cast_bool_to_text.sql",
            "name": "default__cast_bool_to_text",
            "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.2127774,
            "supported_languages": null
        },
        "macro.dbt.set_sql_header": {
            "unique_id": "macro.dbt.set_sql_header",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/configs.sql",
            "original_file_path": "macros/materializations/configs.sql",
            "name": "set_sql_header",
            "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.2146165,
            "supported_languages": null
        },
        "macro.dbt.should_full_refresh": {
            "unique_id": "macro.dbt.should_full_refresh",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/configs.sql",
            "original_file_path": "macros/materializations/configs.sql",
            "name": "should_full_refresh",
            "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.2160275,
            "supported_languages": null
        },
        "macro.dbt.should_store_failures": {
            "unique_id": "macro.dbt.should_store_failures",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/configs.sql",
            "original_file_path": "macros/materializations/configs.sql",
            "name": "should_store_failures",
            "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.2174592,
            "supported_languages": null
        },
        "macro.dbt.run_hooks": {
            "unique_id": "macro.dbt.run_hooks",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/hooks.sql",
            "original_file_path": "macros/materializations/hooks.sql",
            "name": "run_hooks",
            "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.2220273,
            "supported_languages": null
        },
        "macro.dbt.make_hook_config": {
            "unique_id": "macro.dbt.make_hook_config",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/hooks.sql",
            "original_file_path": "macros/materializations/hooks.sql",
            "name": "make_hook_config",
            "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.2229612,
            "supported_languages": null
        },
        "macro.dbt.before_begin": {
            "unique_id": "macro.dbt.before_begin",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/hooks.sql",
            "original_file_path": "macros/materializations/hooks.sql",
            "name": "before_begin",
            "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.make_hook_config"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.223627,
            "supported_languages": null
        },
        "macro.dbt.in_transaction": {
            "unique_id": "macro.dbt.in_transaction",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/hooks.sql",
            "original_file_path": "macros/materializations/hooks.sql",
            "name": "in_transaction",
            "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.make_hook_config"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.2242818,
            "supported_languages": null
        },
        "macro.dbt.after_commit": {
            "unique_id": "macro.dbt.after_commit",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/hooks.sql",
            "original_file_path": "macros/materializations/hooks.sql",
            "name": "after_commit",
            "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.make_hook_config"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.2249289,
            "supported_languages": null
        },
        "macro.dbt.materialization_seed_default": {
            "unique_id": "macro.dbt.materialization_seed_default",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/seeds/seed.sql",
            "original_file_path": "macros/materializations/seeds/seed.sql",
            "name": "materialization_seed_default",
            "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.should_full_refresh",
                    "macro.dbt.run_hooks",
                    "macro.dbt.reset_csv_table",
                    "macro.dbt.create_csv_table",
                    "macro.dbt.load_csv_rows",
                    "macro.dbt.noop_statement",
                    "macro.dbt.get_csv_sql",
                    "macro.dbt.should_revoke",
                    "macro.dbt.apply_grants",
                    "macro.dbt.persist_docs",
                    "macro.dbt.create_indexes"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.2370512,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.dbt.create_csv_table": {
            "unique_id": "macro.dbt.create_csv_table",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/seeds/helpers.sql",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "name": "create_csv_table",
            "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__create_csv_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.2468991,
            "supported_languages": null
        },
        "macro.dbt.default__create_csv_table": {
            "unique_id": "macro.dbt.default__create_csv_table",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/seeds/helpers.sql",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "name": "default__create_csv_table",
            "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.2496626,
            "supported_languages": null
        },
        "macro.dbt.reset_csv_table": {
            "unique_id": "macro.dbt.reset_csv_table",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/seeds/helpers.sql",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "name": "reset_csv_table",
            "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__reset_csv_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.2503538,
            "supported_languages": null
        },
        "macro.dbt.default__reset_csv_table": {
            "unique_id": "macro.dbt.default__reset_csv_table",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/seeds/helpers.sql",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "name": "default__reset_csv_table",
            "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.create_csv_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.251772,
            "supported_languages": null
        },
        "macro.dbt.get_csv_sql": {
            "unique_id": "macro.dbt.get_csv_sql",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/seeds/helpers.sql",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "name": "get_csv_sql",
            "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_csv_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.2523553,
            "supported_languages": null
        },
        "macro.dbt.default__get_csv_sql": {
            "unique_id": "macro.dbt.default__get_csv_sql",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/seeds/helpers.sql",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "name": "default__get_csv_sql",
            "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.2527928,
            "supported_languages": null
        },
        "macro.dbt.get_binding_char": {
            "unique_id": "macro.dbt.get_binding_char",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/seeds/helpers.sql",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "name": "get_binding_char",
            "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_binding_char"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.2532284,
            "supported_languages": null
        },
        "macro.dbt.default__get_binding_char": {
            "unique_id": "macro.dbt.default__get_binding_char",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/seeds/helpers.sql",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "name": "default__get_binding_char",
            "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.2535977,
            "supported_languages": null
        },
        "macro.dbt.get_batch_size": {
            "unique_id": "macro.dbt.get_batch_size",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/seeds/helpers.sql",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "name": "get_batch_size",
            "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_batch_size"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.2540667,
            "supported_languages": null
        },
        "macro.dbt.default__get_batch_size": {
            "unique_id": "macro.dbt.default__get_batch_size",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/seeds/helpers.sql",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "name": "default__get_batch_size",
            "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.2544138,
            "supported_languages": null
        },
        "macro.dbt.get_seed_column_quoted_csv": {
            "unique_id": "macro.dbt.get_seed_column_quoted_csv",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/seeds/helpers.sql",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "name": "get_seed_column_quoted_csv",
            "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.2558022,
            "supported_languages": null
        },
        "macro.dbt.load_csv_rows": {
            "unique_id": "macro.dbt.load_csv_rows",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/seeds/helpers.sql",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "name": "load_csv_rows",
            "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__load_csv_rows"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.2563722,
            "supported_languages": null
        },
        "macro.dbt.default__load_csv_rows": {
            "unique_id": "macro.dbt.default__load_csv_rows",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/seeds/helpers.sql",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "name": "default__load_csv_rows",
            "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_batch_size",
                    "macro.dbt.get_seed_column_quoted_csv",
                    "macro.dbt.get_binding_char"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.2600234,
            "supported_languages": null
        },
        "macro.dbt.create_or_replace_view": {
            "unique_id": "macro.dbt.create_or_replace_view",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/view/create_or_replace_view.sql",
            "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql",
            "name": "create_or_replace_view",
            "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=True) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.handle_existing_table",
                    "macro.dbt.should_full_refresh",
                    "macro.dbt.statement",
                    "macro.dbt.get_create_view_as_sql",
                    "macro.dbt.should_revoke",
                    "macro.dbt.apply_grants"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.2641509,
            "supported_languages": null
        },
        "macro.dbt.get_create_view_as_sql": {
            "unique_id": "macro.dbt.get_create_view_as_sql",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/view/create_view_as.sql",
            "original_file_path": "macros/materializations/models/view/create_view_as.sql",
            "name": "get_create_view_as_sql",
            "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_create_view_as_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.2653332,
            "supported_languages": null
        },
        "macro.dbt.default__get_create_view_as_sql": {
            "unique_id": "macro.dbt.default__get_create_view_as_sql",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/view/create_view_as.sql",
            "original_file_path": "macros/materializations/models/view/create_view_as.sql",
            "name": "default__get_create_view_as_sql",
            "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.create_view_as"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.2657924,
            "supported_languages": null
        },
        "macro.dbt.create_view_as": {
            "unique_id": "macro.dbt.create_view_as",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/view/create_view_as.sql",
            "original_file_path": "macros/materializations/models/view/create_view_as.sql",
            "name": "create_view_as",
            "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__create_view_as"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.2662992,
            "supported_languages": null
        },
        "macro.dbt.default__create_view_as": {
            "unique_id": "macro.dbt.default__create_view_as",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/view/create_view_as.sql",
            "original_file_path": "macros/materializations/models/view/create_view_as.sql",
            "name": "default__create_view_as",
            "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.2670133,
            "supported_languages": null
        },
        "macro.dbt.materialization_view_default": {
            "unique_id": "macro.dbt.materialization_view_default",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/view/view.sql",
            "original_file_path": "macros/materializations/models/view/view.sql",
            "name": "materialization_view_default",
            "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.load_cached_relation",
                    "macro.dbt.make_intermediate_relation",
                    "macro.dbt.make_backup_relation",
                    "macro.dbt.run_hooks",
                    "macro.dbt.drop_relation_if_exists",
                    "macro.dbt.statement",
                    "macro.dbt.get_create_view_as_sql",
                    "macro.dbt.should_revoke",
                    "macro.dbt.apply_grants",
                    "macro.dbt.persist_docs"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.273014,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.dbt.handle_existing_table": {
            "unique_id": "macro.dbt.handle_existing_table",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/view/helpers.sql",
            "original_file_path": "macros/materializations/models/view/helpers.sql",
            "name": "handle_existing_table",
            "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__handle_existing_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.273976,
            "supported_languages": null
        },
        "macro.dbt.default__handle_existing_table": {
            "unique_id": "macro.dbt.default__handle_existing_table",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/view/helpers.sql",
            "original_file_path": "macros/materializations/models/view/helpers.sql",
            "name": "default__handle_existing_table",
            "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.274571,
            "supported_languages": null
        },
        "macro.dbt.get_create_table_as_sql": {
            "unique_id": "macro.dbt.get_create_table_as_sql",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/table/create_table_as.sql",
            "original_file_path": "macros/materializations/models/table/create_table_as.sql",
            "name": "get_create_table_as_sql",
            "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_create_table_as_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.2758777,
            "supported_languages": null
        },
        "macro.dbt.default__get_create_table_as_sql": {
            "unique_id": "macro.dbt.default__get_create_table_as_sql",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/table/create_table_as.sql",
            "original_file_path": "macros/materializations/models/table/create_table_as.sql",
            "name": "default__get_create_table_as_sql",
            "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.create_table_as"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.2763715,
            "supported_languages": null
        },
        "macro.dbt.create_table_as": {
            "unique_id": "macro.dbt.create_table_as",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/table/create_table_as.sql",
            "original_file_path": "macros/materializations/models/table/create_table_as.sql",
            "name": "create_table_as",
            "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__create_table_as"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.2776988,
            "supported_languages": null
        },
        "macro.dbt.default__create_table_as": {
            "unique_id": "macro.dbt.default__create_table_as",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/table/create_table_as.sql",
            "original_file_path": "macros/materializations/models/table/create_table_as.sql",
            "name": "default__create_table_as",
            "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.2788017,
            "supported_languages": null
        },
        "macro.dbt.materialization_table_default": {
            "unique_id": "macro.dbt.materialization_table_default",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/table/table.sql",
            "original_file_path": "macros/materializations/models/table/table.sql",
            "name": "materialization_table_default",
            "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.load_cached_relation",
                    "macro.dbt.make_intermediate_relation",
                    "macro.dbt.make_backup_relation",
                    "macro.dbt.drop_relation_if_exists",
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.get_create_table_as_sql",
                    "macro.dbt.create_indexes",
                    "macro.dbt.should_revoke",
                    "macro.dbt.apply_grants",
                    "macro.dbt.persist_docs"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.2850573,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.dbt.get_incremental_append_sql": {
            "unique_id": "macro.dbt.get_incremental_append_sql",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/incremental/strategies.sql",
            "original_file_path": "macros/materializations/models/incremental/strategies.sql",
            "name": "get_incremental_append_sql",
            "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_incremental_append_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.287085,
            "supported_languages": null
        },
        "macro.dbt.default__get_incremental_append_sql": {
            "unique_id": "macro.dbt.default__get_incremental_append_sql",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/incremental/strategies.sql",
            "original_file_path": "macros/materializations/models/incremental/strategies.sql",
            "name": "default__get_incremental_append_sql",
            "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_insert_into_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.2877085,
            "supported_languages": null
        },
        "macro.dbt.get_incremental_delete_insert_sql": {
            "unique_id": "macro.dbt.get_incremental_delete_insert_sql",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/incremental/strategies.sql",
            "original_file_path": "macros/materializations/models/incremental/strategies.sql",
            "name": "get_incremental_delete_insert_sql",
            "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_incremental_delete_insert_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.2882028,
            "supported_languages": null
        },
        "macro.dbt.default__get_incremental_delete_insert_sql": {
            "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/incremental/strategies.sql",
            "original_file_path": "macros/materializations/models/incremental/strategies.sql",
            "name": "default__get_incremental_delete_insert_sql",
            "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_delete_insert_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.28892,
            "supported_languages": null
        },
        "macro.dbt.get_incremental_merge_sql": {
            "unique_id": "macro.dbt.get_incremental_merge_sql",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/incremental/strategies.sql",
            "original_file_path": "macros/materializations/models/incremental/strategies.sql",
            "name": "get_incremental_merge_sql",
            "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_incremental_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.2894285,
            "supported_languages": null
        },
        "macro.dbt.default__get_incremental_merge_sql": {
            "unique_id": "macro.dbt.default__get_incremental_merge_sql",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/incremental/strategies.sql",
            "original_file_path": "macros/materializations/models/incremental/strategies.sql",
            "name": "default__get_incremental_merge_sql",
            "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.290117,
            "supported_languages": null
        },
        "macro.dbt.get_incremental_insert_overwrite_sql": {
            "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/incremental/strategies.sql",
            "original_file_path": "macros/materializations/models/incremental/strategies.sql",
            "name": "get_incremental_insert_overwrite_sql",
            "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_incremental_insert_overwrite_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.290615,
            "supported_languages": null
        },
        "macro.dbt.default__get_incremental_insert_overwrite_sql": {
            "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/incremental/strategies.sql",
            "original_file_path": "macros/materializations/models/incremental/strategies.sql",
            "name": "default__get_incremental_insert_overwrite_sql",
            "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"predicates\"])) %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_insert_overwrite_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.2913096,
            "supported_languages": null
        },
        "macro.dbt.get_incremental_default_sql": {
            "unique_id": "macro.dbt.get_incremental_default_sql",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/incremental/strategies.sql",
            "original_file_path": "macros/materializations/models/incremental/strategies.sql",
            "name": "get_incremental_default_sql",
            "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_incremental_default_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.2918096,
            "supported_languages": null
        },
        "macro.dbt.default__get_incremental_default_sql": {
            "unique_id": "macro.dbt.default__get_incremental_default_sql",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/incremental/strategies.sql",
            "original_file_path": "macros/materializations/models/incremental/strategies.sql",
            "name": "default__get_incremental_default_sql",
            "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_incremental_append_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.292221,
            "supported_languages": null
        },
        "macro.dbt.get_insert_into_sql": {
            "unique_id": "macro.dbt.get_insert_into_sql",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/incremental/strategies.sql",
            "original_file_path": "macros/materializations/models/incremental/strategies.sql",
            "name": "get_insert_into_sql",
            "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_quoted_csv"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.2930143,
            "supported_languages": null
        },
        "macro.dbt.is_incremental": {
            "unique_id": "macro.dbt.is_incremental",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/incremental/is_incremental.sql",
            "original_file_path": "macros/materializations/models/incremental/is_incremental.sql",
            "name": "is_incremental",
            "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.should_full_refresh"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.2950895,
            "supported_languages": null
        },
        "macro.dbt.materialization_incremental_default": {
            "unique_id": "macro.dbt.materialization_incremental_default",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/incremental/incremental.sql",
            "original_file_path": "macros/materializations/models/incremental/incremental.sql",
            "name": "materialization_incremental_default",
            "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.load_cached_relation",
                    "macro.dbt.make_temp_relation",
                    "macro.dbt.make_intermediate_relation",
                    "macro.dbt.make_backup_relation",
                    "macro.dbt.should_full_refresh",
                    "macro.dbt.incremental_validate_on_schema_change",
                    "macro.dbt.drop_relation_if_exists",
                    "macro.dbt.run_hooks",
                    "macro.dbt.get_create_table_as_sql",
                    "macro.dbt.run_query",
                    "macro.dbt.process_schema_changes",
                    "macro.dbt.statement",
                    "macro.dbt.should_revoke",
                    "macro.dbt.apply_grants",
                    "macro.dbt.persist_docs",
                    "macro.dbt.create_indexes"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.306868,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.dbt.get_merge_sql": {
            "unique_id": "macro.dbt.get_merge_sql",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/incremental/merge.sql",
            "original_file_path": "macros/materializations/models/incremental/merge.sql",
            "name": "get_merge_sql",
            "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.313875,
            "supported_languages": null
        },
        "macro.dbt.default__get_merge_sql": {
            "unique_id": "macro.dbt.default__get_merge_sql",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/incremental/merge.sql",
            "original_file_path": "macros/materializations/models/incremental/merge.sql",
            "name": "default__get_merge_sql",
            "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_quoted_csv",
                    "macro.dbt.get_merge_update_columns"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.317929,
            "supported_languages": null
        },
        "macro.dbt.get_delete_insert_merge_sql": {
            "unique_id": "macro.dbt.get_delete_insert_merge_sql",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/incremental/merge.sql",
            "original_file_path": "macros/materializations/models/incremental/merge.sql",
            "name": "get_delete_insert_merge_sql",
            "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_delete_insert_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.3185706,
            "supported_languages": null
        },
        "macro.dbt.default__get_delete_insert_merge_sql": {
            "unique_id": "macro.dbt.default__get_delete_insert_merge_sql",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/incremental/merge.sql",
            "original_file_path": "macros/materializations/models/incremental/merge.sql",
            "name": "default__get_delete_insert_merge_sql",
            "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last }}\n                {% endfor %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            );\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_quoted_csv"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.3204956,
            "supported_languages": null
        },
        "macro.dbt.get_insert_overwrite_merge_sql": {
            "unique_id": "macro.dbt.get_insert_overwrite_merge_sql",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/incremental/merge.sql",
            "original_file_path": "macros/materializations/models/incremental/merge.sql",
            "name": "get_insert_overwrite_merge_sql",
            "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_insert_overwrite_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.3211787,
            "supported_languages": null
        },
        "macro.dbt.default__get_insert_overwrite_merge_sql": {
            "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/incremental/merge.sql",
            "original_file_path": "macros/materializations/models/incremental/merge.sql",
            "name": "default__get_insert_overwrite_merge_sql",
            "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_quoted_csv"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.3228467,
            "supported_languages": null
        },
        "macro.dbt.incremental_validate_on_schema_change": {
            "unique_id": "macro.dbt.incremental_validate_on_schema_change",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/incremental/on_schema_change.sql",
            "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql",
            "name": "incremental_validate_on_schema_change",
            "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.331687,
            "supported_languages": null
        },
        "macro.dbt.check_for_schema_changes": {
            "unique_id": "macro.dbt.check_for_schema_changes",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/incremental/on_schema_change.sql",
            "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql",
            "name": "check_for_schema_changes",
            "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.diff_columns",
                    "macro.dbt.diff_column_data_types"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.3349347,
            "supported_languages": null
        },
        "macro.dbt.sync_column_schemas": {
            "unique_id": "macro.dbt.sync_column_schemas",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/incremental/on_schema_change.sql",
            "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql",
            "name": "sync_column_schemas",
            "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.alter_relation_add_remove_columns",
                    "macro.dbt.alter_column_type"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.3382201,
            "supported_languages": null
        },
        "macro.dbt.process_schema_changes": {
            "unique_id": "macro.dbt.process_schema_changes",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/incremental/on_schema_change.sql",
            "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql",
            "name": "process_schema_changes",
            "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.check_for_schema_changes",
                    "macro.dbt.sync_column_schemas"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.3404508,
            "supported_languages": null
        },
        "macro.dbt.get_quoted_csv": {
            "unique_id": "macro.dbt.get_quoted_csv",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/incremental/column_helpers.sql",
            "original_file_path": "macros/materializations/models/incremental/column_helpers.sql",
            "name": "get_quoted_csv",
            "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.3440034,
            "supported_languages": null
        },
        "macro.dbt.diff_columns": {
            "unique_id": "macro.dbt.diff_columns",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/incremental/column_helpers.sql",
            "original_file_path": "macros/materializations/models/incremental/column_helpers.sql",
            "name": "diff_columns",
            "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.345483,
            "supported_languages": null
        },
        "macro.dbt.diff_column_data_types": {
            "unique_id": "macro.dbt.diff_column_data_types",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/incremental/column_helpers.sql",
            "original_file_path": "macros/materializations/models/incremental/column_helpers.sql",
            "name": "diff_column_data_types",
            "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.34721,
            "supported_languages": null
        },
        "macro.dbt.get_merge_update_columns": {
            "unique_id": "macro.dbt.get_merge_update_columns",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/incremental/column_helpers.sql",
            "original_file_path": "macros/materializations/models/incremental/column_helpers.sql",
            "name": "get_merge_update_columns",
            "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_merge_update_columns"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.347834,
            "supported_languages": null
        },
        "macro.dbt.default__get_merge_update_columns": {
            "unique_id": "macro.dbt.default__get_merge_update_columns",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/incremental/column_helpers.sql",
            "original_file_path": "macros/materializations/models/incremental/column_helpers.sql",
            "name": "default__get_merge_update_columns",
            "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.3497028,
            "supported_languages": null
        },
        "macro.dbt.snapshot_merge_sql": {
            "unique_id": "macro.dbt.snapshot_merge_sql",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/snapshots/snapshot_merge.sql",
            "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql",
            "name": "snapshot_merge_sql",
            "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__snapshot_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.350984,
            "supported_languages": null
        },
        "macro.dbt.default__snapshot_merge_sql": {
            "unique_id": "macro.dbt.default__snapshot_merge_sql",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/snapshots/snapshot_merge.sql",
            "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql",
            "name": "default__snapshot_merge_sql",
            "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.3516903,
            "supported_languages": null
        },
        "macro.dbt.strategy_dispatch": {
            "unique_id": "macro.dbt.strategy_dispatch",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/snapshots/strategies.sql",
            "original_file_path": "macros/materializations/snapshots/strategies.sql",
            "name": "strategy_dispatch",
            "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.3588507,
            "supported_languages": null
        },
        "macro.dbt.snapshot_hash_arguments": {
            "unique_id": "macro.dbt.snapshot_hash_arguments",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/snapshots/strategies.sql",
            "original_file_path": "macros/materializations/snapshots/strategies.sql",
            "name": "snapshot_hash_arguments",
            "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__snapshot_hash_arguments"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.3593242,
            "supported_languages": null
        },
        "macro.dbt.default__snapshot_hash_arguments": {
            "unique_id": "macro.dbt.default__snapshot_hash_arguments",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/snapshots/strategies.sql",
            "original_file_path": "macros/materializations/snapshots/strategies.sql",
            "name": "default__snapshot_hash_arguments",
            "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.3599207,
            "supported_languages": null
        },
        "macro.dbt.snapshot_timestamp_strategy": {
            "unique_id": "macro.dbt.snapshot_timestamp_strategy",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/snapshots/strategies.sql",
            "original_file_path": "macros/materializations/snapshots/strategies.sql",
            "name": "snapshot_timestamp_strategy",
            "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.snapshot_hash_arguments"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.3618152,
            "supported_languages": null
        },
        "macro.dbt.snapshot_string_as_time": {
            "unique_id": "macro.dbt.snapshot_string_as_time",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/snapshots/strategies.sql",
            "original_file_path": "macros/materializations/snapshots/strategies.sql",
            "name": "snapshot_string_as_time",
            "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__snapshot_string_as_time"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.3622587,
            "supported_languages": null
        },
        "macro.dbt.default__snapshot_string_as_time": {
            "unique_id": "macro.dbt.default__snapshot_string_as_time",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/snapshots/strategies.sql",
            "original_file_path": "macros/materializations/snapshots/strategies.sql",
            "name": "default__snapshot_string_as_time",
            "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.3627408,
            "supported_languages": null
        },
        "macro.dbt.snapshot_check_all_get_existing_columns": {
            "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/snapshots/strategies.sql",
            "original_file_path": "macros/materializations/snapshots/strategies.sql",
            "name": "snapshot_check_all_get_existing_columns",
            "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n          select {{ check_cols_config | join(', ') }} from ({{ node['compiled_code'] }}) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_columns_in_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.3663898,
            "supported_languages": null
        },
        "macro.dbt.snapshot_check_strategy": {
            "unique_id": "macro.dbt.snapshot_check_strategy",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/snapshots/strategies.sql",
            "original_file_path": "macros/materializations/snapshots/strategies.sql",
            "name": "snapshot_check_strategy",
            "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.snapshot_get_time",
                    "macro.dbt.snapshot_check_all_get_existing_columns",
                    "macro.dbt.get_true_sql",
                    "macro.dbt.snapshot_hash_arguments"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.3697617,
            "supported_languages": null
        },
        "macro.dbt.materialization_snapshot_default": {
            "unique_id": "macro.dbt.materialization_snapshot_default",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/snapshots/snapshot.sql",
            "original_file_path": "macros/materializations/snapshots/snapshot.sql",
            "name": "materialization_snapshot_default",
            "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_or_create_relation",
                    "macro.dbt.run_hooks",
                    "macro.dbt.strategy_dispatch",
                    "macro.dbt.build_snapshot_table",
                    "macro.dbt.create_table_as",
                    "macro.dbt.build_snapshot_staging_table",
                    "macro.dbt.create_columns",
                    "macro.dbt.snapshot_merge_sql",
                    "macro.dbt.statement",
                    "macro.dbt.should_revoke",
                    "macro.dbt.apply_grants",
                    "macro.dbt.persist_docs",
                    "macro.dbt.create_indexes",
                    "macro.dbt.post_snapshot"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.3822963,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.dbt.create_columns": {
            "unique_id": "macro.dbt.create_columns",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/snapshots/helpers.sql",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "name": "create_columns",
            "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__create_columns"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.3885965,
            "supported_languages": null
        },
        "macro.dbt.default__create_columns": {
            "unique_id": "macro.dbt.default__create_columns",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/snapshots/helpers.sql",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "name": "default__create_columns",
            "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.3893797,
            "supported_languages": null
        },
        "macro.dbt.post_snapshot": {
            "unique_id": "macro.dbt.post_snapshot",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/snapshots/helpers.sql",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "name": "post_snapshot",
            "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__post_snapshot"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.3898404,
            "supported_languages": null
        },
        "macro.dbt.default__post_snapshot": {
            "unique_id": "macro.dbt.default__post_snapshot",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/snapshots/helpers.sql",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "name": "default__post_snapshot",
            "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.3900933,
            "supported_languages": null
        },
        "macro.dbt.get_true_sql": {
            "unique_id": "macro.dbt.get_true_sql",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/snapshots/helpers.sql",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "name": "get_true_sql",
            "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_true_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.390493,
            "supported_languages": null
        },
        "macro.dbt.default__get_true_sql": {
            "unique_id": "macro.dbt.default__get_true_sql",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/snapshots/helpers.sql",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "name": "default__get_true_sql",
            "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.390851,
            "supported_languages": null
        },
        "macro.dbt.snapshot_staging_table": {
            "unique_id": "macro.dbt.snapshot_staging_table",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/snapshots/helpers.sql",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "name": "snapshot_staging_table",
            "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__snapshot_staging_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.3914044,
            "supported_languages": null
        },
        "macro.dbt.default__snapshot_staging_table": {
            "unique_id": "macro.dbt.default__snapshot_staging_table",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/snapshots/helpers.sql",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "name": "default__snapshot_staging_table",
            "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.snapshot_get_time"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.3936553,
            "supported_languages": null
        },
        "macro.dbt.build_snapshot_table": {
            "unique_id": "macro.dbt.build_snapshot_table",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/snapshots/helpers.sql",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "name": "build_snapshot_table",
            "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__build_snapshot_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.3941746,
            "supported_languages": null
        },
        "macro.dbt.default__build_snapshot_table": {
            "unique_id": "macro.dbt.default__build_snapshot_table",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/snapshots/helpers.sql",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "name": "default__build_snapshot_table",
            "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.3948398,
            "supported_languages": null
        },
        "macro.dbt.build_snapshot_staging_table": {
            "unique_id": "macro.dbt.build_snapshot_staging_table",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/snapshots/helpers.sql",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "name": "build_snapshot_staging_table",
            "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.make_temp_relation",
                    "macro.dbt.snapshot_staging_table",
                    "macro.dbt.statement",
                    "macro.dbt.create_table_as"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.3959532,
            "supported_languages": null
        },
        "macro.dbt.materialization_test_default": {
            "unique_id": "macro.dbt.materialization_test_default",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/tests/test.sql",
            "original_file_path": "macros/materializations/tests/test.sql",
            "name": "materialization_test_default",
            "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.should_store_failures",
                    "macro.dbt.statement",
                    "macro.dbt.create_table_as",
                    "macro.dbt.get_test_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.4011593,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.dbt.get_where_subquery": {
            "unique_id": "macro.dbt.get_where_subquery",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/tests/where_subquery.sql",
            "original_file_path": "macros/materializations/tests/where_subquery.sql",
            "name": "get_where_subquery",
            "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_where_subquery"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.402249,
            "supported_languages": null
        },
        "macro.dbt.default__get_where_subquery": {
            "unique_id": "macro.dbt.default__get_where_subquery",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/tests/where_subquery.sql",
            "original_file_path": "macros/materializations/tests/where_subquery.sql",
            "name": "default__get_where_subquery",
            "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.403298,
            "supported_languages": null
        },
        "macro.dbt.get_test_sql": {
            "unique_id": "macro.dbt.get_test_sql",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/tests/helpers.sql",
            "original_file_path": "macros/materializations/tests/helpers.sql",
            "name": "get_test_sql",
            "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_test_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.4046345,
            "supported_languages": null
        },
        "macro.dbt.default__get_test_sql": {
            "unique_id": "macro.dbt.default__get_test_sql",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/materializations/tests/helpers.sql",
            "original_file_path": "macros/materializations/tests/helpers.sql",
            "name": "default__get_test_sql",
            "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.4054573,
            "supported_languages": null
        },
        "macro.dbt.statement": {
            "unique_id": "macro.dbt.statement",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/etc/statement.sql",
            "original_file_path": "macros/etc/statement.sql",
            "name": "statement",
            "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.4091656,
            "supported_languages": null
        },
        "macro.dbt.noop_statement": {
            "unique_id": "macro.dbt.noop_statement",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/etc/statement.sql",
            "original_file_path": "macros/etc/statement.sql",
            "name": "noop_statement",
            "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.4106548,
            "supported_languages": null
        },
        "macro.dbt.run_query": {
            "unique_id": "macro.dbt.run_query",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/etc/statement.sql",
            "original_file_path": "macros/etc/statement.sql",
            "name": "run_query",
            "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.41147,
            "supported_languages": null
        },
        "macro.dbt.convert_datetime": {
            "unique_id": "macro.dbt.convert_datetime",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/etc/datetime.sql",
            "original_file_path": "macros/etc/datetime.sql",
            "name": "convert_datetime",
            "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.4149375,
            "supported_languages": null
        },
        "macro.dbt.dates_in_range": {
            "unique_id": "macro.dbt.dates_in_range",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/etc/datetime.sql",
            "original_file_path": "macros/etc/datetime.sql",
            "name": "dates_in_range",
            "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.convert_datetime"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.4180646,
            "supported_languages": null
        },
        "macro.dbt.partition_range": {
            "unique_id": "macro.dbt.partition_range",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/etc/datetime.sql",
            "original_file_path": "macros/etc/datetime.sql",
            "name": "partition_range",
            "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.dates_in_range"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.4203372,
            "supported_languages": null
        },
        "macro.dbt.py_current_timestring": {
            "unique_id": "macro.dbt.py_current_timestring",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/etc/datetime.sql",
            "original_file_path": "macros/etc/datetime.sql",
            "name": "py_current_timestring",
            "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.4209967,
            "supported_languages": null
        },
        "macro.dbt.copy_grants": {
            "unique_id": "macro.dbt.copy_grants",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "name": "copy_grants",
            "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__copy_grants"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.4243312,
            "supported_languages": null
        },
        "macro.dbt.default__copy_grants": {
            "unique_id": "macro.dbt.default__copy_grants",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "name": "default__copy_grants",
            "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.424661,
            "supported_languages": null
        },
        "macro.dbt.support_multiple_grantees_per_dcl_statement": {
            "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "name": "support_multiple_grantees_per_dcl_statement",
            "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__support_multiple_grantees_per_dcl_statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.4251056,
            "supported_languages": null
        },
        "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {
            "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "name": "default__support_multiple_grantees_per_dcl_statement",
            "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.4254107,
            "supported_languages": null
        },
        "macro.dbt.should_revoke": {
            "unique_id": "macro.dbt.should_revoke",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "name": "should_revoke",
            "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.copy_grants"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.4262953,
            "supported_languages": null
        },
        "macro.dbt.get_show_grant_sql": {
            "unique_id": "macro.dbt.get_show_grant_sql",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "name": "get_show_grant_sql",
            "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__get_show_grant_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.4267948,
            "supported_languages": null
        },
        "macro.dbt.default__get_show_grant_sql": {
            "unique_id": "macro.dbt.default__get_show_grant_sql",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "name": "default__get_show_grant_sql",
            "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.42708,
            "supported_languages": null
        },
        "macro.dbt.get_grant_sql": {
            "unique_id": "macro.dbt.get_grant_sql",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "name": "get_grant_sql",
            "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__get_grant_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.4276702,
            "supported_languages": null
        },
        "macro.dbt.default__get_grant_sql": {
            "unique_id": "macro.dbt.default__get_grant_sql",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "name": "default__get_grant_sql",
            "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.4281719,
            "supported_languages": null
        },
        "macro.dbt.get_revoke_sql": {
            "unique_id": "macro.dbt.get_revoke_sql",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "name": "get_revoke_sql",
            "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__get_revoke_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.428809,
            "supported_languages": null
        },
        "macro.dbt.default__get_revoke_sql": {
            "unique_id": "macro.dbt.default__get_revoke_sql",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "name": "default__get_revoke_sql",
            "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.429318,
            "supported_languages": null
        },
        "macro.dbt.get_dcl_statement_list": {
            "unique_id": "macro.dbt.get_dcl_statement_list",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "name": "get_dcl_statement_list",
            "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_dcl_statement_list"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.4299157,
            "supported_languages": null
        },
        "macro.dbt.default__get_dcl_statement_list": {
            "unique_id": "macro.dbt.default__get_dcl_statement_list",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "name": "default__get_dcl_statement_list",
            "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.support_multiple_grantees_per_dcl_statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.4316714,
            "supported_languages": null
        },
        "macro.dbt.call_dcl_statements": {
            "unique_id": "macro.dbt.call_dcl_statements",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "name": "call_dcl_statements",
            "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__call_dcl_statements"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.4321818,
            "supported_languages": null
        },
        "macro.dbt.default__call_dcl_statements": {
            "unique_id": "macro.dbt.default__call_dcl_statements",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "name": "default__call_dcl_statements",
            "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.4328883,
            "supported_languages": null
        },
        "macro.dbt.apply_grants": {
            "unique_id": "macro.dbt.apply_grants",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "name": "apply_grants",
            "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__apply_grants"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.4334922,
            "supported_languages": null
        },
        "macro.dbt.default__apply_grants": {
            "unique_id": "macro.dbt.default__apply_grants",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "name": "default__apply_grants",
            "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.run_query",
                    "macro.dbt.get_show_grant_sql",
                    "macro.dbt.get_dcl_statement_list",
                    "macro.dbt.call_dcl_statements"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.4368324,
            "supported_languages": null
        },
        "macro.dbt.current_timestamp": {
            "unique_id": "macro.dbt.current_timestamp",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/adapters/timestamps.sql",
            "original_file_path": "macros/adapters/timestamps.sql",
            "name": "current_timestamp",
            "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__current_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.4381533,
            "supported_languages": null
        },
        "macro.dbt.default__current_timestamp": {
            "unique_id": "macro.dbt.default__current_timestamp",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/adapters/timestamps.sql",
            "original_file_path": "macros/adapters/timestamps.sql",
            "name": "default__current_timestamp",
            "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.4385576,
            "supported_languages": null
        },
        "macro.dbt.snapshot_get_time": {
            "unique_id": "macro.dbt.snapshot_get_time",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/adapters/timestamps.sql",
            "original_file_path": "macros/adapters/timestamps.sql",
            "name": "snapshot_get_time",
            "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__snapshot_get_time"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.438945,
            "supported_languages": null
        },
        "macro.dbt.default__snapshot_get_time": {
            "unique_id": "macro.dbt.default__snapshot_get_time",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/adapters/timestamps.sql",
            "original_file_path": "macros/adapters/timestamps.sql",
            "name": "default__snapshot_get_time",
            "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.current_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.4392393,
            "supported_languages": null
        },
        "macro.dbt.current_timestamp_backcompat": {
            "unique_id": "macro.dbt.current_timestamp_backcompat",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/adapters/timestamps.sql",
            "original_file_path": "macros/adapters/timestamps.sql",
            "name": "current_timestamp_backcompat",
            "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__current_timestamp_backcompat"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.4396834,
            "supported_languages": null
        },
        "macro.dbt.default__current_timestamp_backcompat": {
            "unique_id": "macro.dbt.default__current_timestamp_backcompat",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/adapters/timestamps.sql",
            "original_file_path": "macros/adapters/timestamps.sql",
            "name": "default__current_timestamp_backcompat",
            "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.4398963,
            "supported_languages": null
        },
        "macro.dbt.current_timestamp_in_utc_backcompat": {
            "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/adapters/timestamps.sql",
            "original_file_path": "macros/adapters/timestamps.sql",
            "name": "current_timestamp_in_utc_backcompat",
            "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__current_timestamp_in_utc_backcompat"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.4403415,
            "supported_languages": null
        },
        "macro.dbt.default__current_timestamp_in_utc_backcompat": {
            "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/adapters/timestamps.sql",
            "original_file_path": "macros/adapters/timestamps.sql",
            "name": "default__current_timestamp_in_utc_backcompat",
            "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.current_timestamp_backcompat",
                    "macro.dbt_bigquery.bigquery__current_timestamp_backcompat"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.4408274,
            "supported_languages": null
        },
        "macro.dbt.collect_freshness": {
            "unique_id": "macro.dbt.collect_freshness",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/adapters/freshness.sql",
            "original_file_path": "macros/adapters/freshness.sql",
            "name": "collect_freshness",
            "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__collect_freshness"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.442057,
            "supported_languages": null
        },
        "macro.dbt.default__collect_freshness": {
            "unique_id": "macro.dbt.default__collect_freshness",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/adapters/freshness.sql",
            "original_file_path": "macros/adapters/freshness.sql",
            "name": "default__collect_freshness",
            "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt.current_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.443169,
            "supported_languages": null
        },
        "macro.dbt.alter_column_comment": {
            "unique_id": "macro.dbt.alter_column_comment",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/adapters/persist_docs.sql",
            "original_file_path": "macros/adapters/persist_docs.sql",
            "name": "alter_column_comment",
            "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__alter_column_comment"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.4447777,
            "supported_languages": null
        },
        "macro.dbt.default__alter_column_comment": {
            "unique_id": "macro.dbt.default__alter_column_comment",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/adapters/persist_docs.sql",
            "original_file_path": "macros/adapters/persist_docs.sql",
            "name": "default__alter_column_comment",
            "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.4452374,
            "supported_languages": null
        },
        "macro.dbt.alter_relation_comment": {
            "unique_id": "macro.dbt.alter_relation_comment",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/adapters/persist_docs.sql",
            "original_file_path": "macros/adapters/persist_docs.sql",
            "name": "alter_relation_comment",
            "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__alter_relation_comment"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.4457777,
            "supported_languages": null
        },
        "macro.dbt.default__alter_relation_comment": {
            "unique_id": "macro.dbt.default__alter_relation_comment",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/adapters/persist_docs.sql",
            "original_file_path": "macros/adapters/persist_docs.sql",
            "name": "default__alter_relation_comment",
            "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.4462245,
            "supported_languages": null
        },
        "macro.dbt.persist_docs": {
            "unique_id": "macro.dbt.persist_docs",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/adapters/persist_docs.sql",
            "original_file_path": "macros/adapters/persist_docs.sql",
            "name": "persist_docs",
            "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__persist_docs"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.4469147,
            "supported_languages": null
        },
        "macro.dbt.default__persist_docs": {
            "unique_id": "macro.dbt.default__persist_docs",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/adapters/persist_docs.sql",
            "original_file_path": "macros/adapters/persist_docs.sql",
            "name": "default__persist_docs",
            "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.run_query",
                    "macro.dbt.alter_relation_comment",
                    "macro.dbt.alter_column_comment"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.4482782,
            "supported_languages": null
        },
        "macro.dbt.get_catalog": {
            "unique_id": "macro.dbt.get_catalog",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "name": "get_catalog",
            "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__get_catalog"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.4512093,
            "supported_languages": null
        },
        "macro.dbt.default__get_catalog": {
            "unique_id": "macro.dbt.default__get_catalog",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "name": "default__get_catalog",
            "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.4518957,
            "supported_languages": null
        },
        "macro.dbt.information_schema_name": {
            "unique_id": "macro.dbt.information_schema_name",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "name": "information_schema_name",
            "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__information_schema_name"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.4524362,
            "supported_languages": null
        },
        "macro.dbt.default__information_schema_name": {
            "unique_id": "macro.dbt.default__information_schema_name",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "name": "default__information_schema_name",
            "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.4528728,
            "supported_languages": null
        },
        "macro.dbt.list_schemas": {
            "unique_id": "macro.dbt.list_schemas",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "name": "list_schemas",
            "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__list_schemas"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.4533868,
            "supported_languages": null
        },
        "macro.dbt.default__list_schemas": {
            "unique_id": "macro.dbt.default__list_schemas",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "name": "default__list_schemas",
            "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.information_schema_name",
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.4540465,
            "supported_languages": null
        },
        "macro.dbt.check_schema_exists": {
            "unique_id": "macro.dbt.check_schema_exists",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "name": "check_schema_exists",
            "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__check_schema_exists"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.4545848,
            "supported_languages": null
        },
        "macro.dbt.default__check_schema_exists": {
            "unique_id": "macro.dbt.default__check_schema_exists",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "name": "default__check_schema_exists",
            "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.replace",
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.4553833,
            "supported_languages": null
        },
        "macro.dbt.list_relations_without_caching": {
            "unique_id": "macro.dbt.list_relations_without_caching",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "name": "list_relations_without_caching",
            "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__list_relations_without_caching"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.455886,
            "supported_languages": null
        },
        "macro.dbt.default__list_relations_without_caching": {
            "unique_id": "macro.dbt.default__list_relations_without_caching",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "name": "default__list_relations_without_caching",
            "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.4563196,
            "supported_languages": null
        },
        "macro.dbt.get_create_index_sql": {
            "unique_id": "macro.dbt.get_create_index_sql",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/adapters/indexes.sql",
            "original_file_path": "macros/adapters/indexes.sql",
            "name": "get_create_index_sql",
            "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_create_index_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.4576046,
            "supported_languages": null
        },
        "macro.dbt.default__get_create_index_sql": {
            "unique_id": "macro.dbt.default__get_create_index_sql",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/adapters/indexes.sql",
            "original_file_path": "macros/adapters/indexes.sql",
            "name": "default__get_create_index_sql",
            "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.457993,
            "supported_languages": null
        },
        "macro.dbt.create_indexes": {
            "unique_id": "macro.dbt.create_indexes",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/adapters/indexes.sql",
            "original_file_path": "macros/adapters/indexes.sql",
            "name": "create_indexes",
            "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__create_indexes"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.4584253,
            "supported_languages": null
        },
        "macro.dbt.default__create_indexes": {
            "unique_id": "macro.dbt.default__create_indexes",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/adapters/indexes.sql",
            "original_file_path": "macros/adapters/indexes.sql",
            "name": "default__create_indexes",
            "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_create_index_sql",
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.459478,
            "supported_languages": null
        },
        "macro.dbt.create_schema": {
            "unique_id": "macro.dbt.create_schema",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/adapters/schema.sql",
            "original_file_path": "macros/adapters/schema.sql",
            "name": "create_schema",
            "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__create_schema"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.4605448,
            "supported_languages": null
        },
        "macro.dbt.default__create_schema": {
            "unique_id": "macro.dbt.default__create_schema",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/adapters/schema.sql",
            "original_file_path": "macros/adapters/schema.sql",
            "name": "default__create_schema",
            "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.461041,
            "supported_languages": null
        },
        "macro.dbt.drop_schema": {
            "unique_id": "macro.dbt.drop_schema",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/adapters/schema.sql",
            "original_file_path": "macros/adapters/schema.sql",
            "name": "drop_schema",
            "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__drop_schema"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.4615097,
            "supported_languages": null
        },
        "macro.dbt.default__drop_schema": {
            "unique_id": "macro.dbt.default__drop_schema",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/adapters/schema.sql",
            "original_file_path": "macros/adapters/schema.sql",
            "name": "default__drop_schema",
            "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.4620392,
            "supported_languages": null
        },
        "macro.dbt.make_intermediate_relation": {
            "unique_id": "macro.dbt.make_intermediate_relation",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "name": "make_intermediate_relation",
            "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__make_intermediate_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.4680002,
            "supported_languages": null
        },
        "macro.dbt.default__make_intermediate_relation": {
            "unique_id": "macro.dbt.default__make_intermediate_relation",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "name": "default__make_intermediate_relation",
            "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__make_temp_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.4684494,
            "supported_languages": null
        },
        "macro.dbt.make_temp_relation": {
            "unique_id": "macro.dbt.make_temp_relation",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "name": "make_temp_relation",
            "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__make_temp_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.4690275,
            "supported_languages": null
        },
        "macro.dbt.default__make_temp_relation": {
            "unique_id": "macro.dbt.default__make_temp_relation",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "name": "default__make_temp_relation",
            "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.4697857,
            "supported_languages": null
        },
        "macro.dbt.make_backup_relation": {
            "unique_id": "macro.dbt.make_backup_relation",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "name": "make_backup_relation",
            "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__make_backup_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.4704185,
            "supported_languages": null
        },
        "macro.dbt.default__make_backup_relation": {
            "unique_id": "macro.dbt.default__make_backup_relation",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "name": "default__make_backup_relation",
            "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.4712772,
            "supported_languages": null
        },
        "macro.dbt.drop_relation": {
            "unique_id": "macro.dbt.drop_relation",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "name": "drop_relation",
            "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__drop_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.4717999,
            "supported_languages": null
        },
        "macro.dbt.default__drop_relation": {
            "unique_id": "macro.dbt.default__drop_relation",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "name": "default__drop_relation",
            "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.4723802,
            "supported_languages": null
        },
        "macro.dbt.truncate_relation": {
            "unique_id": "macro.dbt.truncate_relation",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "name": "truncate_relation",
            "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__truncate_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.472876,
            "supported_languages": null
        },
        "macro.dbt.default__truncate_relation": {
            "unique_id": "macro.dbt.default__truncate_relation",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "name": "default__truncate_relation",
            "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.4733212,
            "supported_languages": null
        },
        "macro.dbt.rename_relation": {
            "unique_id": "macro.dbt.rename_relation",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "name": "rename_relation",
            "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__rename_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.4738557,
            "supported_languages": null
        },
        "macro.dbt.default__rename_relation": {
            "unique_id": "macro.dbt.default__rename_relation",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "name": "default__rename_relation",
            "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.4746094,
            "supported_languages": null
        },
        "macro.dbt.get_or_create_relation": {
            "unique_id": "macro.dbt.get_or_create_relation",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "name": "get_or_create_relation",
            "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_or_create_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.4753087,
            "supported_languages": null
        },
        "macro.dbt.default__get_or_create_relation": {
            "unique_id": "macro.dbt.default__get_or_create_relation",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "name": "default__get_or_create_relation",
            "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.476727,
            "supported_languages": null
        },
        "macro.dbt.load_cached_relation": {
            "unique_id": "macro.dbt.load_cached_relation",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "name": "load_cached_relation",
            "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.4773314,
            "supported_languages": null
        },
        "macro.dbt.load_relation": {
            "unique_id": "macro.dbt.load_relation",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "name": "load_relation",
            "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.load_cached_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.477717,
            "supported_languages": null
        },
        "macro.dbt.drop_relation_if_exists": {
            "unique_id": "macro.dbt.drop_relation_if_exists",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "name": "drop_relation_if_exists",
            "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.4782388,
            "supported_languages": null
        },
        "macro.dbt.get_columns_in_relation": {
            "unique_id": "macro.dbt.get_columns_in_relation",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/adapters/columns.sql",
            "original_file_path": "macros/adapters/columns.sql",
            "name": "get_columns_in_relation",
            "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__get_columns_in_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.4814985,
            "supported_languages": null
        },
        "macro.dbt.default__get_columns_in_relation": {
            "unique_id": "macro.dbt.default__get_columns_in_relation",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/adapters/columns.sql",
            "original_file_path": "macros/adapters/columns.sql",
            "name": "default__get_columns_in_relation",
            "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.4819787,
            "supported_languages": null
        },
        "macro.dbt.sql_convert_columns_in_relation": {
            "unique_id": "macro.dbt.sql_convert_columns_in_relation",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/adapters/columns.sql",
            "original_file_path": "macros/adapters/columns.sql",
            "name": "sql_convert_columns_in_relation",
            "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.4828198,
            "supported_languages": null
        },
        "macro.dbt.get_columns_in_query": {
            "unique_id": "macro.dbt.get_columns_in_query",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/adapters/columns.sql",
            "original_file_path": "macros/adapters/columns.sql",
            "name": "get_columns_in_query",
            "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_columns_in_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.4835086,
            "supported_languages": null
        },
        "macro.dbt.default__get_columns_in_query": {
            "unique_id": "macro.dbt.default__get_columns_in_query",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/adapters/columns.sql",
            "original_file_path": "macros/adapters/columns.sql",
            "name": "default__get_columns_in_query",
            "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.4844346,
            "supported_languages": null
        },
        "macro.dbt.alter_column_type": {
            "unique_id": "macro.dbt.alter_column_type",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/adapters/columns.sql",
            "original_file_path": "macros/adapters/columns.sql",
            "name": "alter_column_type",
            "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__alter_column_type"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.4850357,
            "supported_languages": null
        },
        "macro.dbt.default__alter_column_type": {
            "unique_id": "macro.dbt.default__alter_column_type",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/adapters/columns.sql",
            "original_file_path": "macros/adapters/columns.sql",
            "name": "default__alter_column_type",
            "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.4866006,
            "supported_languages": null
        },
        "macro.dbt.alter_relation_add_remove_columns": {
            "unique_id": "macro.dbt.alter_relation_add_remove_columns",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/adapters/columns.sql",
            "original_file_path": "macros/adapters/columns.sql",
            "name": "alter_relation_add_remove_columns",
            "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__alter_relation_add_remove_columns"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.487267,
            "supported_languages": null
        },
        "macro.dbt.default__alter_relation_add_remove_columns": {
            "unique_id": "macro.dbt.default__alter_relation_add_remove_columns",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/adapters/columns.sql",
            "original_file_path": "macros/adapters/columns.sql",
            "name": "default__alter_relation_add_remove_columns",
            "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.489365,
            "supported_languages": null
        },
        "macro.dbt.default__test_not_null": {
            "unique_id": "macro.dbt.default__test_not_null",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/generic_test_sql/not_null.sql",
            "original_file_path": "macros/generic_test_sql/not_null.sql",
            "name": "default__test_not_null",
            "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.should_store_failures"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.4904256,
            "supported_languages": null
        },
        "macro.dbt.default__test_accepted_values": {
            "unique_id": "macro.dbt.default__test_accepted_values",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/generic_test_sql/accepted_values.sql",
            "original_file_path": "macros/generic_test_sql/accepted_values.sql",
            "name": "default__test_accepted_values",
            "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.4920728,
            "supported_languages": null
        },
        "macro.dbt.default__test_relationships": {
            "unique_id": "macro.dbt.default__test_relationships",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/generic_test_sql/relationships.sql",
            "original_file_path": "macros/generic_test_sql/relationships.sql",
            "name": "default__test_relationships",
            "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.4930956,
            "supported_languages": null
        },
        "macro.dbt.default__test_unique": {
            "unique_id": "macro.dbt.default__test_unique",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "macros/generic_test_sql/unique.sql",
            "original_file_path": "macros/generic_test_sql/unique.sql",
            "name": "default__test_unique",
            "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.4939203,
            "supported_languages": null
        },
        "macro.dbt.test_unique": {
            "unique_id": "macro.dbt.test_unique",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "tests/generic/builtin.sql",
            "original_file_path": "tests/generic/builtin.sql",
            "name": "test_unique",
            "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__test_unique"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.495228,
            "supported_languages": null
        },
        "macro.dbt.test_not_null": {
            "unique_id": "macro.dbt.test_not_null",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "tests/generic/builtin.sql",
            "original_file_path": "tests/generic/builtin.sql",
            "name": "test_not_null",
            "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__test_not_null"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.4958708,
            "supported_languages": null
        },
        "macro.dbt.test_accepted_values": {
            "unique_id": "macro.dbt.test_accepted_values",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "tests/generic/builtin.sql",
            "original_file_path": "tests/generic/builtin.sql",
            "name": "test_accepted_values",
            "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__test_accepted_values"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.4966235,
            "supported_languages": null
        },
        "macro.dbt.test_relationships": {
            "unique_id": "macro.dbt.test_relationships",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "tests/generic/builtin.sql",
            "original_file_path": "tests/generic/builtin.sql",
            "name": "test_relationships",
            "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__test_relationships"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.4973416,
            "supported_languages": null
        },
        "macro.codegen.get_tables_in_schema": {
            "unique_id": "macro.codegen.get_tables_in_schema",
            "package_name": "codegen",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/codegen",
            "path": "macros/generate_source.sql",
            "original_file_path": "macros/generate_source.sql",
            "name": "get_tables_in_schema",
            "macro_sql": "{% macro get_tables_in_schema(schema_name, database_name=target.database, table_pattern='%', exclude='') %}\n    \n    {% set tables=dbt_utils.get_relations_by_pattern(\n        schema_pattern=schema_name,\n        database=database_name,\n        table_pattern=table_pattern,\n        exclude=exclude\n    ) %}\n\n    {% set table_list= tables | map(attribute='identifier') %}\n\n    {{ return(table_list | sort) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.get_relations_by_pattern"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.5004337,
            "supported_languages": null
        },
        "macro.codegen.generate_source": {
            "unique_id": "macro.codegen.generate_source",
            "package_name": "codegen",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/codegen",
            "path": "macros/generate_source.sql",
            "original_file_path": "macros/generate_source.sql",
            "name": "generate_source",
            "macro_sql": "{% macro generate_source(schema_name, database_name=target.database, generate_columns=False, include_descriptions=False, table_pattern='%', exclude='') %}\n\n{% set sources_yaml=[] %}\n\n{% do sources_yaml.append('version: 2') %}\n{% do sources_yaml.append('') %}\n{% do sources_yaml.append('sources:') %}\n{% do sources_yaml.append('  - name: ' ~ schema_name | lower) %}\n\n{% if database_name != target.database %}\n{% do sources_yaml.append('    database: ' ~ database_name | lower) %}\n{% endif %}\n\n{% do sources_yaml.append('    tables:') %}\n\n{% set tables=codegen.get_tables_in_schema(schema_name, database_name, table_pattern, exclude) %}\n\n{% for table in tables %}\n    {% do sources_yaml.append('      - name: ' ~ table | lower ) %}\n\n    {% if generate_columns %}\n    {% do sources_yaml.append('        columns:') %}\n\n        {% set table_relation=api.Relation.create(\n            database=database_name,\n            schema=schema_name,\n            identifier=table\n        ) %}\n\n        {% set columns=adapter.get_columns_in_relation(table_relation) %}\n\n        {% for column in columns %}\n            {% do sources_yaml.append('          - name: ' ~ column.name | lower ) %}\n            {% if include_descriptions %}\n                {% do sources_yaml.append('            description: \"\"' ) %}\n            {% endif %}\n        {% endfor %}\n            {% do sources_yaml.append('') %}\n\n    {% endif %}\n\n{% endfor %}\n\n{% if execute %}\n\n    {% set joined = sources_yaml | join ('\\n') %}\n    {{ log(joined, info=True) }}\n    {% do return(joined) %}\n\n{% endif %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.codegen.get_tables_in_schema"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.505233,
            "supported_languages": null
        },
        "macro.codegen.generate_base_model": {
            "unique_id": "macro.codegen.generate_base_model",
            "package_name": "codegen",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/codegen",
            "path": "macros/generate_base_model.sql",
            "original_file_path": "macros/generate_base_model.sql",
            "name": "generate_base_model",
            "macro_sql": "{% macro generate_base_model(source_name, table_name, leading_commas=False) %}\n\n{%- set source_relation = source(source_name, table_name) -%}\n\n{%- set columns = adapter.get_columns_in_relation(source_relation) -%}\n{% set column_names=columns | map(attribute='name') %}\n{% set base_model_sql %}\nwith source as (\n\n    select * from {% raw %}{{ source({% endraw %}'{{ source_name }}', '{{ table_name }}'{% raw %}) }}{% endraw %}\n\n),\n\nrenamed as (\n\n    select\n        {%- if leading_commas -%}\n        {%- for column in column_names %}\n        {{\", \" if not loop.first}}{{ column | lower }}\n        {%- endfor %}\n        {%- else -%}\n        {%- for column in column_names %}\n        {{ column | lower }}{{\",\" if not loop.last}}\n        {%- endfor -%}\n        {%- endif %}\n\n    from source\n\n)\n\nselect * from renamed\n{% endset %}\n\n{% if execute %}\n\n{{ log(base_model_sql, info=True) }}\n{% do return(base_model_sql) %}\n\n{% endif %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.5085945,
            "supported_languages": null
        },
        "macro.codegen.generate_model_yaml": {
            "unique_id": "macro.codegen.generate_model_yaml",
            "package_name": "codegen",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/codegen",
            "path": "macros/generate_model_yaml.sql",
            "original_file_path": "macros/generate_model_yaml.sql",
            "name": "generate_model_yaml",
            "macro_sql": "{% macro generate_model_yaml(model_name) %}\n\n{% set model_yaml=[] %}\n\n{% do model_yaml.append('version: 2') %}\n{% do model_yaml.append('') %}\n{% do model_yaml.append('models:') %}\n{% do model_yaml.append('  - name: ' ~ model_name | lower) %}\n{% do model_yaml.append('    description: \"\"') %}\n{% do model_yaml.append('    columns:') %}\n\n{% set relation=ref(model_name) %}\n{%- set columns = adapter.get_columns_in_relation(relation) -%}\n\n{% for column in columns %}\n    {% do model_yaml.append('      - name: ' ~ column.name | lower ) %}\n    {% do model_yaml.append('        description: \"\"') %}\n    {% do model_yaml.append('') %}\n{% endfor %}\n\n{% if execute %}\n\n    {% set joined = model_yaml | join ('\\n') %}\n    {{ log(joined, info=True) }}\n    {% do return(joined) %}\n\n{% endif %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.5122478,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_compound_columns_to_be_unique": {
            "unique_id": "macro.dbt_expectations.test_expect_compound_columns_to_be_unique",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/multi-column/expect_compound_columns_to_be_unique.sql",
            "original_file_path": "macros/schema_tests/multi-column/expect_compound_columns_to_be_unique.sql",
            "name": "test_expect_compound_columns_to_be_unique",
            "macro_sql": "{% test expect_compound_columns_to_be_unique(model,\n                                                column_list,\n                                                quote_columns=False,\n                                                ignore_row_if=\"all_values_are_missing\",\n                                                row_condition=None\n                                                ) %}\n{% if not column_list %}\n    {{ exceptions.raise_compiler_error(\n        \"`column_list` must be specified as a list of columns. Got: '\" ~ column_list ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for expect_compound_columns_to_be_unique test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set row_condition_ext -%}\n\n{%- if row_condition  %}\n    {{ row_condition }} and\n{% endif -%}\n\n{%- if ignore_row_if == \"all_values_are_missing\" %}\n        (\n            {% for column in columns -%}\n            {{ column }} is not null{% if not loop.last %} and {% endif %}\n            {% endfor %}\n        )\n{%- elif ignore_row_if == \"any_value_is_missing\" %}\n        (\n            {% for column in columns -%}\n            {{ column }} is not null{% if not loop.last %} or {% endif %}\n            {% endfor %}\n        )\n{%- endif -%}\n{%- endset -%}\n\nwith validation_errors as (\n\n    select\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    from {{ model }}\n    where\n        1=1\n    {%- if row_condition_ext %}\n        and {{ row_condition_ext }}\n    {% endif %}\n    group by\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    having count(*) > 1\n\n)\nselect * from validation_errors\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.5184767,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B": {
            "unique_id": "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/multi-column/expect_column_pair_values_A_to_be_greater_than_B.sql",
            "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_A_to_be_greater_than_B.sql",
            "name": "test_expect_column_pair_values_A_to_be_greater_than_B",
            "macro_sql": "{% test expect_column_pair_values_A_to_be_greater_than_B(model,\n                                                                column_A,\n                                                                column_B,\n                                                                or_equal=False,\n                                                                row_condition=None\n                                                                ) %}\n\n{% set operator = \">=\" if or_equal else \">\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.expression_is_true"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.5201344,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal": {
            "unique_id": "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/multi-column/expect_multicolumn_sum_to_equal.sql",
            "original_file_path": "macros/schema_tests/multi-column/expect_multicolumn_sum_to_equal.sql",
            "name": "test_expect_multicolumn_sum_to_equal",
            "macro_sql": "{% test expect_multicolumn_sum_to_equal(model,\n                                                column_list,\n                                                sum_total,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) %}\n\n{% set expression %}\n{% for column in column_list %}\nsum({{ column }}){% if not loop.last %} + {% endif %}\n{% endfor %} = {{ sum_total }}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.expression_is_true"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.5221817,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record": {
            "unique_id": "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql",
            "original_file_path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql",
            "name": "test_expect_select_column_values_to_be_unique_within_record",
            "macro_sql": "{% test expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns=False,\n                                                    ignore_row_if=\"all_values_are_missing\",\n                                                    row_condition=None\n                                                    )  -%}\n    {{ adapter.dispatch('test_expect_select_column_values_to_be_unique_within_record', 'dbt_expectations') (model, column_list, quote_columns, ignore_row_if, row_condition) }}\n{%- endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.5254579,
            "supported_languages": null
        },
        "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record": {
            "unique_id": "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql",
            "original_file_path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql",
            "name": "default__test_expect_select_column_values_to_be_unique_within_record",
            "macro_sql": "{% macro default__test_expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns,\n                                                    ignore_row_if,\n                                                    row_condition\n                                                    ) %}\n\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\nwith column_values as (\n\n    select\n        row_number() over(order by 1) as row_index,\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    from {{ model }}\n    where 1=1\n    {% if row_condition %}\n        and {{ row_condition }}\n    {% endif %}\n    {% if ignore_row_if == \"all_values_are_missing\" %}\n        and\n        (\n            {% for column in columns -%}\n            {{ column }} is not null{% if not loop.last %} and {% endif %}\n            {%- endfor %}\n        )\n    {% elif ignore_row_if == \"any_value_is_missing\" %}\n        and\n        (\n            {% for column in columns -%}\n            {{ column }} is not null{% if not loop.last %} or {% endif %}\n            {%- endfor %}\n        )\n    {% endif %}\n\n),\nunpivot_columns as (\n\n    {% for column in columns %}\n    select row_index, '{{ column }}' as column_name, {{ column }} as column_value from column_values\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n\n    select\n        row_index,\n        count(distinct column_value) as column_values\n    from unpivot_columns\n    group by 1\n    having count(distinct column_value) < {{ columns | length }}\n\n)\nselect * from validation_errors\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.528973,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal": {
            "unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_equal.sql",
            "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_equal.sql",
            "name": "test_expect_column_pair_values_to_be_equal",
            "macro_sql": "{% test expect_column_pair_values_to_be_equal(model,\n                                                        column_A,\n                                                        column_B,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set operator = \"=\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.expression_is_true"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.5304816,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set": {
            "unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_in_set.sql",
            "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_in_set.sql",
            "name": "test_expect_column_pair_values_to_be_in_set",
            "macro_sql": "{% test expect_column_pair_values_to_be_in_set(model,\n                                                        column_A,\n                                                        column_B,\n                                                        value_pairs_set,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set expression %}\n{% for pair in value_pairs_set %}\n{%- if (pair | length) == 2 %}\n({{ column_A }} = {{ pair[0] }} and {{ column_B }} = {{ pair[1] }}){% if not loop.last %} or {% endif %}\n{% else %}\n{{ exceptions.raise_compiler_error(\n        \"`value_pairs_set` argument for expect_column_pair_values_to_be_in_set test cannot have more than 2 item per element.\n        Got: '\" ~ pair ~ \"'.'\"\n    ) }}\n{% endif %}\n{% endfor %}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.expression_is_true"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.5334773,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between": {
            "unique_id": "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/aggregate_functions/expect_column_unique_value_count_to_be_between.sql",
            "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_unique_value_count_to_be_between.sql",
            "name": "test_expect_column_unique_value_count_to_be_between",
            "macro_sql": "{% test expect_column_unique_value_count_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.expression_between"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.5353184,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between": {
            "unique_id": "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/aggregate_functions/expect_column_quantile_values_to_be_between.sql",
            "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_quantile_values_to_be_between.sql",
            "name": "test_expect_column_quantile_values_to_be_between",
            "macro_sql": "{% test expect_column_quantile_values_to_be_between(model, column_name,\n                                                            quantile,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n\n{% set expression %}\n{{ dbt_expectations.percentile_cont(column_name, quantile) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.percentile_cont",
                    "macro.dbt_expectations.expression_between"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.5373735,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_stdev_to_be_between": {
            "unique_id": "macro.dbt_expectations.test_expect_column_stdev_to_be_between",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql",
            "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql",
            "name": "test_expect_column_stdev_to_be_between",
            "macro_sql": "{% test expect_column_stdev_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) -%}\n    {{ adapter.dispatch('test_expect_column_stdev_to_be_between', 'dbt_expectations') (\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) }}\n{%- endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.5396883,
            "supported_languages": null
        },
        "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between": {
            "unique_id": "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql",
            "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql",
            "name": "default__test_expect_column_stdev_to_be_between",
            "macro_sql": "{% macro default__test_expect_column_stdev_to_be_between(\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) %}\n\n{% set expression %}\nstddev({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.expression_between"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.5406857,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between": {
            "unique_id": "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/aggregate_functions/expect_column_proportion_of_unique_values_to_be_between.sql",
            "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_proportion_of_unique_values_to_be_between.sql",
            "name": "test_expect_column_proportion_of_unique_values_to_be_between",
            "macro_sql": "{% test expect_column_proportion_of_unique_values_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})/count({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.expression_between"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.5426557,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set": {
            "unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_contain_set.sql",
            "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_contain_set.sql",
            "name": "test_expect_column_distinct_values_to_contain_set",
            "macro_sql": "{% test expect_column_distinct_values_to_contain_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values in set that are not in the list of values from the model\n    select\n        s.value_field\n    from\n        unique_set_values s\n        left join\n        all_values v on s.value_field = v.value_field\n    where\n        v.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.5448043,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_sum_to_be_between": {
            "unique_id": "macro.dbt_expectations.test_expect_column_sum_to_be_between",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/aggregate_functions/expect_column_sum_to_be_between.sql",
            "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_sum_to_be_between.sql",
            "name": "test_expect_column_sum_to_be_between",
            "macro_sql": "{% test expect_column_sum_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nsum({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.expression_between"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.5466506,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set": {
            "unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_be_in_set.sql",
            "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_be_in_set.sql",
            "name": "test_expect_column_distinct_values_to_be_in_set",
            "macro_sql": "{% test expect_column_distinct_values_to_be_in_set(model, column_name,\n                                                    value_set,\n                                                    quote_values=False,\n                                                    row_condition=None\n                                                    ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        unique_set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.5489528,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_distinct_count_to_equal": {
            "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal.sql",
            "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal.sql",
            "name": "test_expect_column_distinct_count_to_equal",
            "macro_sql": "{% test expect_column_distinct_count_to_equal(model,\n                                                    column_name,\n                                                    value,\n                                                    quote_values=False,\n                                                    group_by=None,\n                                                    row_condition=None\n                                                    ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.expression_is_true"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.5504663,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_max_to_be_between": {
            "unique_id": "macro.dbt_expectations.test_expect_column_max_to_be_between",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/aggregate_functions/expect_column_max_to_be_between.sql",
            "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_max_to_be_between.sql",
            "name": "test_expect_column_max_to_be_between",
            "macro_sql": "{% test expect_column_max_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nmax({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.expression_between"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.5523863,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than": {
            "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_greater_than.sql",
            "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_greater_than.sql",
            "name": "test_expect_column_distinct_count_to_be_greater_than",
            "macro_sql": "{% test expect_column_distinct_count_to_be_greater_than(model,\n                                                                column_name,\n                                                                value,\n                                                                quote_values=False,\n                                                                group_by=None,\n                                                                row_condition=None\n                                                                ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) > {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.expression_is_true"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.553956,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_min_to_be_between": {
            "unique_id": "macro.dbt_expectations.test_expect_column_min_to_be_between",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/aggregate_functions/expect_column_min_to_be_between.sql",
            "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_min_to_be_between.sql",
            "name": "test_expect_column_min_to_be_between",
            "macro_sql": "{% test expect_column_min_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\nmin({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.expression_between"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.5558,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_median_to_be_between": {
            "unique_id": "macro.dbt_expectations.test_expect_column_median_to_be_between",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/aggregate_functions/expect_column_median_to_be_between.sql",
            "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_median_to_be_between.sql",
            "name": "test_expect_column_median_to_be_between",
            "macro_sql": "{% test expect_column_median_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.median(column_name) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.median",
                    "macro.dbt_expectations.expression_between"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.5576844,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set": {
            "unique_id": "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql",
            "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql",
            "name": "test_expect_column_most_common_value_to_be_in_set",
            "macro_sql": "{% test expect_column_most_common_value_to_be_in_set(model, column_name,\n                                                            value_set,\n                                                            top_n,\n                                                            quote_values=False,\n                                                            data_type=\"decimal\",\n                                                            row_condition=None\n                                                            ) -%}\n    {{ adapter.dispatch('test_expect_column_most_common_value_to_be_in_set', 'dbt_expectations') (model, column_name, value_set, top_n, quote_values, data_type, row_condition) }}\n{%- endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.5606666,
            "supported_languages": null
        },
        "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set": {
            "unique_id": "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql",
            "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql",
            "name": "default__test_expect_column_most_common_value_to_be_in_set",
            "macro_sql": "{% macro default__test_expect_column_most_common_value_to_be_in_set(model, column_name,\n                                                            value_set,\n                                                            top_n,\n                                                            quote_values,\n                                                            data_type,\n                                                            row_condition\n                                                            ) %}\n\nwith value_counts as (\n\n    select\n        {% if quote_values -%}\n        {{ column_name }}\n        {%- else -%}\n        cast({{ column_name }} as {{ data_type }})\n        {%- endif %} as value_field,\n        count(*) as value_count\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n    group by {% if quote_values -%}\n                {{ column_name }}\n            {%- else -%}\n                cast({{ column_name }} as {{ data_type }})\n            {%- endif %}\n\n),\nvalue_counts_ranked as (\n\n    select\n        *,\n        row_number() over(order by value_count desc) as value_count_rank\n    from\n        value_counts\n\n),\nvalue_count_top_n as (\n\n    select\n        value_field\n    from\n        value_counts_ranked\n    where\n        value_count_rank = {{ top_n }}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        cast({{ value }} as {{ data_type }})\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        value_field\n    from\n        value_count_top_n\n    where\n        value_field not in (select value_field from unique_set_values)\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.5627003,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table": {
            "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal_other_table.sql",
            "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal_other_table.sql",
            "name": "test_expect_column_distinct_count_to_equal_other_table",
            "macro_sql": "{% test expect_column_distinct_count_to_equal_other_table(model,\n                                                                compare_model,\n                                                                column_name,\n                                                                compare_column_name,\n                                                                row_condition=None,\n                                                                compare_row_condition=None\n                                                                ) %}\n{%- set expression -%}\ncount(distinct {{ column_name }})\n{%- endset -%}\n{%- set compare_expression -%}\n{%- if compare_column_name -%}\ncount(distinct {{ compare_column_name }})\n{%- else -%}\n{{ expression }}\n{%- endif -%}\n{%- endset -%}\n{{ dbt_expectations.test_equal_expression(\n    model,\n    expression=expression,\n    compare_model=compare_model,\n    compare_expression=compare_expression,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_equal_expression"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.5649266,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_mean_to_be_between": {
            "unique_id": "macro.dbt_expectations.test_expect_column_mean_to_be_between",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/aggregate_functions/expect_column_mean_to_be_between.sql",
            "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_mean_to_be_between.sql",
            "name": "test_expect_column_mean_to_be_between",
            "macro_sql": "{% test expect_column_mean_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\navg({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.expression_between"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.5668082,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set": {
            "unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_equal_set.sql",
            "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_equal_set.sql",
            "name": "test_expect_column_distinct_values_to_equal_set",
            "macro_sql": "{% test expect_column_distinct_values_to_equal_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as column_value\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        all_values v\n        full outer join\n        unique_set_values s on v.column_value = s.value_field\n    where\n        v.column_value is null or\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.5689404,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expression_between": {
            "unique_id": "macro.dbt_expectations.test_expression_between",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/_generalized/expression_between.sql",
            "original_file_path": "macros/schema_tests/_generalized/expression_between.sql",
            "name": "test_expression_between",
            "macro_sql": "{% test expression_between(model,\n                                 expression,\n                                 min_value=None,\n                                 max_value=None,\n                                 group_by_columns=None,\n                                 row_condition=None,\n                                 strictly=False\n                                 ) %}\n\n    {{ dbt_expectations.expression_between(model, expression, min_value, max_value, group_by_columns, row_condition, strictly) }}\n\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.expression_between"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.5712075,
            "supported_languages": null
        },
        "macro.dbt_expectations.expression_between": {
            "unique_id": "macro.dbt_expectations.expression_between",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/_generalized/expression_between.sql",
            "original_file_path": "macros/schema_tests/_generalized/expression_between.sql",
            "name": "expression_between",
            "macro_sql": "{% macro expression_between(model,\n                            expression,\n                            min_value,\n                            max_value,\n                            group_by_columns,\n                            row_condition,\n                            strictly\n                            ) %}\n\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n\n{%- set strict_operator = \"\" if strictly else \"=\" -%}\n\n{% set expression_min_max %}\n( 1=1\n{%- if min_value is not none %} and {{ expression | trim }} >{{ strict_operator }} {{ min_value }}{% endif %}\n{%- if max_value is not none %} and {{ expression | trim }} <{{ strict_operator }} {{ max_value }}{% endif %}\n)\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression_min_max,\n                                        group_by_columns=group_by_columns,\n                                        row_condition=row_condition)\n                                        }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.expression_is_true"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.57318,
            "supported_languages": null
        },
        "macro.dbt_expectations.truth_expression": {
            "unique_id": "macro.dbt_expectations.truth_expression",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/_generalized/_truth_expression.sql",
            "original_file_path": "macros/schema_tests/_generalized/_truth_expression.sql",
            "name": "truth_expression",
            "macro_sql": "{% macro truth_expression(expression) %}\n    {{ adapter.dispatch('truth_expression', 'dbt_expectations') (expression) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.default__truth_expression"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.5740147,
            "supported_languages": null
        },
        "macro.dbt_expectations.default__truth_expression": {
            "unique_id": "macro.dbt_expectations.default__truth_expression",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/_generalized/_truth_expression.sql",
            "original_file_path": "macros/schema_tests/_generalized/_truth_expression.sql",
            "name": "default__truth_expression",
            "macro_sql": "{% macro default__truth_expression(expression) %}\n  {{ expression }} as expression\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.5743046,
            "supported_languages": null
        },
        "macro.dbt_expectations.get_select": {
            "unique_id": "macro.dbt_expectations.get_select",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/_generalized/equal_expression.sql",
            "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql",
            "name": "get_select",
            "macro_sql": "{% macro get_select(model, expression, row_condition, group_by) -%}\n    {{ adapter.dispatch('get_select', 'dbt_expectations') (model, expression, row_condition, group_by) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.default__get_select"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.5818622,
            "supported_languages": null
        },
        "macro.dbt_expectations.default__get_select": {
            "unique_id": "macro.dbt_expectations.default__get_select",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/_generalized/equal_expression.sql",
            "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql",
            "name": "default__get_select",
            "macro_sql": "\n\n{%- macro default__get_select(model, expression, row_condition, group_by) %}\n    select\n        {% if group_by %}\n        {% for g in group_by -%}\n            {{ g }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ expression }} as expression\n    from\n        {{ model }}\n    {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by %}\n    group by\n        {% for g in group_by -%}\n            {{ loop.index }}{% if not loop.last %},{% endif %}\n        {% endfor %}\n    {% endif %}\n{% endmacro -%}\n\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.5833418,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_equal_expression": {
            "unique_id": "macro.dbt_expectations.test_equal_expression",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/_generalized/equal_expression.sql",
            "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql",
            "name": "test_equal_expression",
            "macro_sql": "{% test equal_expression(model, expression,\n                                compare_model=None,\n                                compare_expression=None,\n                                group_by=None,\n                                compare_group_by=None,\n                                row_condition=None,\n                                compare_row_condition=None,\n                                tolerance=0.0,\n                                tolerance_percent=None\n                                ) -%}\n\n    {{ adapter.dispatch('test_equal_expression', 'dbt_expectations') (\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) }}\n{%- endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.default__test_equal_expression"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.5847404,
            "supported_languages": null
        },
        "macro.dbt_expectations.default__test_equal_expression": {
            "unique_id": "macro.dbt_expectations.default__test_equal_expression",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/_generalized/equal_expression.sql",
            "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql",
            "name": "default__test_equal_expression",
            "macro_sql": "\n\n{%- macro default__test_equal_expression(\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) -%}\n\n    {%- set compare_model = model if not compare_model else compare_model -%}\n    {%- set compare_expression = expression if not compare_expression else compare_expression -%}\n    {%- set compare_row_condition = row_condition if not compare_row_condition else compare_row_condition -%}\n    {%- set compare_group_by = group_by if not compare_group_by else compare_group_by -%}\n\n    {%- set n_cols = (group_by|length) if group_by else 0 %}\n    with a as (\n        {{ dbt_expectations.get_select(model, expression, row_condition, group_by) }}\n    ),\n    b as (\n        {{ dbt_expectations.get_select(compare_model, compare_expression, compare_row_condition, compare_group_by) }}\n    ),\n    final as (\n\n        select\n            {% for i in range(1, n_cols + 1) -%}\n            coalesce(a.col_{{ i }}, b.col_{{ i }}) as col_{{ i }},\n            {% endfor %}\n            a.expression,\n            b.expression as compare_expression,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0)) as expression_difference,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0))/\n                nullif(a.expression * 1.0, 0) as expression_difference_percent\n        from\n        {% if n_cols > 0 %}\n            a\n            full outer join\n            b on\n            {% for i in range(1, n_cols + 1) -%}\n                a.col_{{ i }} = b.col_{{ i }} {% if not loop.last %}and{% endif %}\n            {% endfor -%}\n        {% else %}\n            a cross join b\n        {% endif %}\n    )\n    -- DEBUG:\n    -- select * from final\n    select\n        *\n    from final\n    where\n        {% if tolerance_percent %}\n        expression_difference_percent > {{ tolerance_percent }}\n        {% else %}\n        expression_difference > {{ tolerance }}\n        {% endif %}\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.get_select"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.588134,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expression_is_true": {
            "unique_id": "macro.dbt_expectations.test_expression_is_true",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/_generalized/expression_is_true.sql",
            "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql",
            "name": "test_expression_is_true",
            "macro_sql": "{% test expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n\n    {{ dbt_expectations.expression_is_true(model, expression, test_condition, group_by_columns, row_condition) }}\n\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.expression_is_true"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.590185,
            "supported_languages": null
        },
        "macro.dbt_expectations.expression_is_true": {
            "unique_id": "macro.dbt_expectations.expression_is_true",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/_generalized/expression_is_true.sql",
            "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql",
            "name": "expression_is_true",
            "macro_sql": "{% macro expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n    {{ adapter.dispatch('expression_is_true', 'dbt_expectations') (model, expression, test_condition, group_by_columns, row_condition) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.default__expression_is_true"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.5909324,
            "supported_languages": null
        },
        "macro.dbt_expectations.default__expression_is_true": {
            "unique_id": "macro.dbt_expectations.default__expression_is_true",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/_generalized/expression_is_true.sql",
            "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql",
            "name": "default__expression_is_true",
            "macro_sql": "{% macro default__expression_is_true(model, expression, test_condition, group_by_columns, row_condition) -%}\nwith grouped_expression as (\n    select\n        {% if group_by_columns %}\n        {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ dbt_expectations.truth_expression(expression) }}\n    from {{ model }}\n     {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by_columns %}\n    group by\n    {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }}{% if not loop.last %},{% endif %}\n    {% endfor %}\n    {% endif %}\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression {{ test_condition }})\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.truth_expression"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.5925846,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_value_lengths_to_equal": {
            "unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_equal",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_equal.sql",
            "original_file_path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_equal.sql",
            "name": "test_expect_column_value_lengths_to_equal",
            "macro_sql": "{% test expect_column_value_lengths_to_equal(model, column_name,\n                                                    value,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_utils.length(column_name) ~ \" = \" ~ value %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.length",
                    "macro.dbt_expectations.expression_is_true"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.5939813,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list": {
            "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern_list.sql",
            "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern_list.sql",
            "name": "test_expect_column_values_to_match_like_pattern_list",
            "macro_sql": "{% test expect_column_values_to_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations._get_like_pattern_expression",
                    "macro.dbt_expectations.expression_is_true"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.5964484,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list": {
            "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern_list.sql",
            "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern_list.sql",
            "name": "test_expect_column_values_to_not_match_like_pattern_list",
            "macro_sql": "{% test expect_column_values_to_not_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations._get_like_pattern_expression",
                    "macro.dbt_expectations.expression_is_true"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.5987813,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_values_to_match_regex_list": {
            "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex_list",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex_list.sql",
            "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex_list.sql",
            "name": "test_expect_column_values_to_match_regex_list",
            "macro_sql": "{% test expect_column_values_to_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for regex in regex_list %}\n    {{ dbt_expectations.regexp_instr(column_name, regex) }} > 0\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.regexp_instr",
                    "macro.dbt_expectations.expression_is_true"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.6010664,
            "supported_languages": null
        },
        "macro.dbt_expectations._get_like_pattern_expression": {
            "unique_id": "macro.dbt_expectations._get_like_pattern_expression",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/string_matching/_get_like_pattern_expression.sql",
            "original_file_path": "macros/schema_tests/string_matching/_get_like_pattern_expression.sql",
            "name": "_get_like_pattern_expression",
            "macro_sql": "{% macro _get_like_pattern_expression(column_name, like_pattern, positive) %}\n{{ column_name }} {{ \"not\" if not positive else \"\" }} like '{{ like_pattern }}'\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.6019495,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between": {
            "unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_be_between.sql",
            "original_file_path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_be_between.sql",
            "name": "test_expect_column_value_lengths_to_be_between",
            "macro_sql": "{% test expect_column_value_lengths_to_be_between(model, column_name,\n                                                         min_value=None,\n                                                         max_value=None,\n                                                         row_condition=None,\n                                                         strictly=False\n                                                      ) %}\n{% set expression %}\n{{ dbt_utils.length(column_name) }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.length",
                    "macro.dbt_expectations.expression_between"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.6037629,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern": {
            "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern.sql",
            "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern.sql",
            "name": "test_expect_column_values_to_not_match_like_pattern",
            "macro_sql": "{% test expect_column_values_to_not_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations._get_like_pattern_expression",
                    "macro.dbt_expectations.expression_is_true"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.6050985,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list": {
            "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex_list.sql",
            "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex_list.sql",
            "name": "test_expect_column_values_to_not_match_regex_list",
            "macro_sql": "{% test expect_column_values_to_not_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n{% for regex in regex_list %}\n{{ dbt_expectations.regexp_instr(column_name, regex) }} = 0\n{%- if not loop.last %}\n{{ \" and \" if match_on == \"all\" else \" or \"}}\n{% endif -%}\n{% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.regexp_instr",
                    "macro.dbt_expectations.expression_is_true"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.6074693,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern": {
            "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern.sql",
            "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern.sql",
            "name": "test_expect_column_values_to_match_like_pattern",
            "macro_sql": "{% test expect_column_values_to_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations._get_like_pattern_expression",
                    "macro.dbt_expectations.expression_is_true"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.6088626,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_values_to_match_regex": {
            "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex.sql",
            "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex.sql",
            "name": "test_expect_column_values_to_match_regex",
            "macro_sql": "{% test expect_column_values_to_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex) }} > 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.regexp_instr",
                    "macro.dbt_expectations.expression_is_true"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.6103334,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_values_to_not_match_regex": {
            "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex.sql",
            "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex.sql",
            "name": "test_expect_column_values_to_not_match_regex",
            "macro_sql": "{% test expect_column_values_to_not_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex) }} = 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.regexp_instr",
                    "macro.dbt_expectations.expression_is_true"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.6118436,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_table_row_count_to_be_between": {
            "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_be_between",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql",
            "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql",
            "name": "test_expect_table_row_count_to_be_between",
            "macro_sql": "{%- test expect_table_row_count_to_be_between(model,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) -%}\n{% set expression %}\ncount(*)\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{%- endtest -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.expression_between"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.6135023,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_to_exist": {
            "unique_id": "macro.dbt_expectations.test_expect_column_to_exist",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/table_shape/expect_column_to_exist.sql",
            "original_file_path": "macros/schema_tests/table_shape/expect_column_to_exist.sql",
            "name": "test_expect_column_to_exist",
            "macro_sql": "{%- test expect_column_to_exist(model, column_name, column_index=None, transform=\"upper\") -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | map(transform) | join -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n\n    {%- set matching_column_index = relation_column_names.index(column_name) if column_name in relation_column_names else -1 %}\n\n    {%- if column_index -%}\n\n        {%- set column_index_0 = column_index - 1 if column_index > 0 else 0 -%}\n\n        {%- set column_index_matches = true if matching_column_index == column_index_0 else false %}\n\n    {%- else -%}\n\n        {%- set column_index_matches = true -%}\n\n    {%- endif %}\n\n    with test_data as (\n\n        select\n            cast('{{ column_name }}' as {{ dbt_utils.type_string() }}) as column_name,\n            {{ matching_column_index }} as matching_column_index,\n            {{ column_index_matches }} as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)\n\n{%- endif -%}\n{%- endtest -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations._get_column_list",
                    "macro.dbt_utils.type_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.6164827,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_row_values_to_have_recent_data": {
            "unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_recent_data",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql",
            "original_file_path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql",
            "name": "test_expect_row_values_to_have_recent_data",
            "macro_sql": "{% test expect_row_values_to_have_recent_data(model,\n                                                column_name,\n                                                datepart,\n                                                interval,\n                                                row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                        column_name,\n                                                                                        datepart,\n                                                                                        interval,\n                                                                                        row_condition) }}\n\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.6185496,
            "supported_languages": null
        },
        "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data": {
            "unique_id": "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql",
            "original_file_path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql",
            "name": "default__test_expect_row_values_to_have_recent_data",
            "macro_sql": "{% macro default__test_expect_row_values_to_have_recent_data(model, column_name, datepart, interval, row_condition) %}\n{%- set default_start_date = '1970-01-01' -%}\nwith max_recency as (\n\n    select max(cast({{ column_name }} as {{ dbt_utils.type_timestamp() }})) as max_timestamp\n    from\n        {{ model }}\n    where\n        -- to exclude erroneous future dates\n        cast({{ column_name }} as {{ dbt_utils.type_timestamp() }}) <= {{ dbt_date.now() }}\n        {% if row_condition %}\n        and {{ row_condition }}\n        {% endif %}\n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('{{ default_start_date }}' as {{ dbt_utils.type_timestamp() }}))\n        <\n        cast({{ dbt_utils.dateadd(datepart, interval * -1, dbt_date.now()) }} as {{ dbt_utils.type_timestamp() }})\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.type_timestamp",
                    "macro.dbt_date.now",
                    "macro.dbt_utils.dateadd"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.6201165,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_table_column_count_to_be_between": {
            "unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_be_between",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/table_shape/expect_table_column_count_to_be_between.sql",
            "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_be_between.sql",
            "name": "test_expect_table_column_count_to_be_between",
            "macro_sql": "{%- test expect_table_column_count_to_be_between(model,\n                                                        min_value=None,\n                                                        max_value=None\n                                                        ) -%}\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\n\n{%- set expression %}\n( 1=1\n{%- if min_value %} and number_actual_columns >= min_value{% endif %}\n{%- if max_value %} and number_actual_columns <= max_value{% endif %}\n)\n{% endset -%}\n\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ min_value if min_value else 0 }} as min_value,\n        {{ max_value if max_value else 0 }} as max_value\n\n)\nselect *\nfrom test_data\nwhere\n    not {{ expression }}\n{%- endif -%}\n{%- endtest -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.6225915,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_table_columns_to_match_set": {
            "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_set",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/table_shape/expect_table_columns_to_match_set.sql",
            "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_match_set.sql",
            "name": "test_expect_table_columns_to_match_set",
            "macro_sql": "{%- test expect_table_columns_to_match_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        -- or any table column that is not in the input list\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations._get_column_list",
                    "macro.dbt_expectations._list_intersect",
                    "macro.dbt_utils.type_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.625465,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data": {
            "unique_id": "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql",
            "original_file_path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql",
            "name": "test_expect_grouped_row_values_to_have_recent_data",
            "macro_sql": "{% test expect_grouped_row_values_to_have_recent_data(model,\n                                                        group_by,\n                                                        timestamp_column,\n                                                        datepart,\n                                                        interval,\n                                                        row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_grouped_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                                group_by,\n                                                                                                timestamp_column,\n                                                                                                datepart,\n                                                                                                interval,\n                                                                                                row_condition) }}\n\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.6289086,
            "supported_languages": null
        },
        "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data": {
            "unique_id": "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql",
            "original_file_path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql",
            "name": "default__test_expect_grouped_row_values_to_have_recent_data",
            "macro_sql": "{% macro default__test_expect_grouped_row_values_to_have_recent_data(model,\n                                                                        group_by,\n                                                                        timestamp_column,\n                                                                        datepart,\n                                                                        interval,\n                                                                        row_condition) %}\nwith latest_grouped_timestamps as (\n\n    select\n        {%- for g in group_by %}\n        {{ g }},\n        {%- endfor %}\n        max(1) as join_key,\n        max(cast({{ timestamp_column }} as {{ dbt_utils.type_timestamp() }})) as latest_timestamp_column\n    from\n        {{ model }}\n    where\n        -- to exclude erroneous future dates\n        cast({{ timestamp_column }} as {{ dbt_utils.type_timestamp() }}) <= {{ dbt_date.now() }}\n        {% if row_condition %}\n        and {{ row_condition }}\n        {% endif %}\n\n    {{ dbt_utils.group_by(group_by | length )}}\n\n),\ntotal_row_counts as (\n\n    select\n        max(1) as join_key,\n        count(*) as row_count\n    from\n        latest_grouped_timestamps\n\n),\noutdated_grouped_timestamps as (\n\n    select *\n    from\n        latest_grouped_timestamps\n    where\n        -- are the max timestamps per group older than the specified cutoff?\n        latest_timestamp_column <\n            cast(\n                {{ dbt_utils.dateadd(datepart, interval * -1, dbt_date.now()) }}\n                as {{ dbt_utils.type_timestamp() }}\n            )\n\n),\nvalidation_errors as (\n\n    select\n        r.row_count,\n        t.*\n    from\n        total_row_counts r\n        left join\n        outdated_grouped_timestamps t\n        on r.join_key = t.join_key\n    where\n        -- fail if either no rows were returned due to row_condition,\n        -- or the recency test returned failed rows\n        r.row_count = 0\n        or\n        t.join_key is not null\n\n)\nselect * from validation_errors\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.type_timestamp",
                    "macro.dbt_date.now",
                    "macro.dbt_utils.group_by",
                    "macro.dbt_utils.dateadd"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.6306896,
            "supported_languages": null
        },
        "macro.dbt_expectations._get_column_list": {
            "unique_id": "macro.dbt_expectations._get_column_list",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/table_shape/_get_column_list.sql",
            "original_file_path": "macros/schema_tests/table_shape/_get_column_list.sql",
            "name": "_get_column_list",
            "macro_sql": "{%- macro _get_column_list(model, transform=\"upper\") -%}\n{%- set relation_columns = adapter.get_columns_in_relation(model) -%}\n{%- set relation_column_names = relation_columns | map(attribute=\"name\") | map(transform) | list -%}\n{%- do return(relation_column_names) -%}\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.631865,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor": {
            "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql",
            "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql",
            "name": "test_expect_table_row_count_to_equal_other_table_times_factor",
            "macro_sql": "{%- test expect_table_row_count_to_equal_other_table_times_factor(model, compare_model, factor, row_condition=None, compare_row_condition=None) -%}\n{{ dbt_expectations.test_expect_table_row_count_to_equal_other_table(model, compare_model,\n    factor=factor,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.6328611,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set": {
            "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/table_shape/expect_table_columns_to_not_contain_set.sql",
            "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_not_contain_set.sql",
            "name": "test_expect_table_columns_to_not_contain_set",
            "macro_sql": "{%- test expect_table_columns_to_not_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    -- catch any column in input list that is in the list of table columns\n    select *\n    from\n        input_columns i\n        inner join\n        relation_columns r on r.relation_column = i.input_column\n\n{%- endif -%}\n{%- endtest -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations._get_column_list",
                    "macro.dbt_expectations._list_intersect",
                    "macro.dbt_utils.type_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.635676,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table": {
            "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql",
            "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql",
            "name": "test_expect_table_row_count_to_equal_other_table",
            "macro_sql": "{%- test expect_table_row_count_to_equal_other_table(model, compare_model, factor=1, row_condition=None, compare_row_condition=None) -%}\n{{ dbt_expectations.test_equal_expression(model, \"count(*)\",\n    compare_model=compare_model,\n    compare_expression=\"count(*) * \" + factor|string,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_equal_expression"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.6368318,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list": {
            "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/table_shape/expect_table_columns_to_match_ordered_list.sql",
            "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_match_ordered_list.sql",
            "name": "test_expect_table_columns_to_match_ordered_list",
            "macro_sql": "{%- test expect_table_columns_to_match_ordered_list(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select\n            {{ loop.index }} as relation_column_idx,\n            cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select\n            {{ loop.index }} as input_column_idx,\n            cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column and r.relation_column_idx = i.input_column_idx\n    where\n        -- catch any column in input list that is not in the sequence of table columns\n        -- or any table column that is not in the input sequence\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations._get_column_list",
                    "macro.dbt_expectations._list_intersect",
                    "macro.dbt_utils.type_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.6401231,
            "supported_languages": null
        },
        "macro.dbt_expectations._list_intersect": {
            "unique_id": "macro.dbt_expectations._list_intersect",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/table_shape/_list_intersect.sql",
            "original_file_path": "macros/schema_tests/table_shape/_list_intersect.sql",
            "name": "_list_intersect",
            "macro_sql": "{%- macro _list_intersect(list1, list2) -%}\n{%- set matching_items = [] -%}\n{%- for itm in list1 -%}\n    {%- if itm in list2 -%}\n        {%- do matching_items.append(itm) -%}\n    {%- endif -%}\n{%- endfor -%}\n{%- do return(matching_items) -%}\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.6414213,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table": {
            "unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal_other_table.sql",
            "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal_other_table.sql",
            "name": "test_expect_table_column_count_to_equal_other_table",
            "macro_sql": "{%- test expect_table_column_count_to_equal_other_table(model, compare_model) -%}\n{%- if execute -%}\n{%- set number_columns = (adapter.get_columns_in_relation(model) | length) -%}\n{%- set compare_number_columns = (adapter.get_columns_in_relation(compare_model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_columns }} as number_columns,\n        {{ compare_number_columns }} as compare_number_columns\n\n)\nselect *\nfrom test_data\nwhere\n    number_columns != compare_number_columns\n{%- endif -%}\n{%- endtest -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.6427794,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_table_column_count_to_equal": {
            "unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal.sql",
            "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal.sql",
            "name": "test_expect_table_column_count_to_equal",
            "macro_sql": "{%- test expect_table_column_count_to_equal(model, value) -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ value }} as value\n\n)\nselect *\nfrom test_data\nwhere\n    number_actual_columns != value\n{%- endif -%}\n{%- endtest -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.6438596,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_table_columns_to_contain_set": {
            "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_contain_set",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/table_shape/expect_table_columns_to_contain_set.sql",
            "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_contain_set.sql",
            "name": "test_expect_table_columns_to_contain_set",
            "macro_sql": "{%- test expect_table_columns_to_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        input_columns i\n        left join\n        relation_columns r on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        r.relation_column is null\n{%- endif -%}\n{%- endtest -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations._get_column_list",
                    "macro.dbt_expectations._list_intersect",
                    "macro.dbt_utils.type_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.646659,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_table_row_count_to_equal": {
            "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql",
            "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql",
            "name": "test_expect_table_row_count_to_equal",
            "macro_sql": "{%- test expect_table_row_count_to_equal(model,\n                                                value,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal',\n                        'dbt_expectations') (model,\n                                                                        value,\n                                                                        group_by,\n                                                                        row_condition\n                                                                        ) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.default__test_expect_table_row_count_to_equal"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.6484659,
            "supported_languages": null
        },
        "macro.dbt_expectations.default__test_expect_table_row_count_to_equal": {
            "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql",
            "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql",
            "name": "default__test_expect_table_row_count_to_equal",
            "macro_sql": "\n\n\n\n{%- macro default__test_expect_table_row_count_to_equal(model,\n                                                value,\n                                                group_by,\n                                                row_condition\n                                                ) -%}\n{% set expression %}\ncount(*) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.expression_is_true"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.6492007,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set": {
            "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_in_set.sql",
            "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_in_set.sql",
            "name": "test_expect_column_values_to_not_be_in_set",
            "macro_sql": "{% test expect_column_values_to_not_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ dbt_utils.type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that match the set\n    select\n        v.value_field\n    from\n        all_values v\n        join\n        set_values s on v.value_field = s.value_field\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.type_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.6514254,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_values_to_be_increasing": {
            "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_increasing",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_increasing.sql",
            "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_increasing.sql",
            "name": "test_expect_column_values_to_be_increasing",
            "macro_sql": "{% test expect_column_values_to_be_increasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \">\" if strictly else \">=\" -%}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.6547594,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list": {
            "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_type_list.sql",
            "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_type_list.sql",
            "name": "test_expect_column_values_to_be_in_type_list",
            "macro_sql": "{%- test expect_column_values_to_be_in_type_list(model, column_name, column_type_list) -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | upper -%}\n    {%- set columns_in_relation = adapter.get_columns_in_relation(model) -%}\n    {%- set column_type_list = column_type_list| map(\"upper\") | list -%}\n    with relation_columns as (\n\n        {% for column in columns_in_relation %}\n        select\n            cast('{{ column.name | upper }}' as {{ dbt_utils.type_string() }}) as relation_column,\n            cast('{{ column.dtype | upper }}' as {{ dbt_utils.type_string() }}) as relation_column_type\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '{{ column_name }}'\n            and\n            relation_column_type not in ('{{ column_type_list | join(\"', '\") }}')\n\n    )\n    select *\n    from test_data\n\n{%- endif -%}\n{%- endtest -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.type_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.6573565,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_values_to_be_between": {
            "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_between",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_between.sql",
            "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_between.sql",
            "name": "test_expect_column_values_to_be_between",
            "macro_sql": "{% test expect_column_values_to_be_between(model, column_name,\n                                                   min_value=None,\n                                                   max_value=None,\n                                                   row_condition=None,\n                                                   strictly=False\n                                                   ) %}\n\n{% set expression %}\n{{ column_name }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.expression_between"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.6590772,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_values_to_be_of_type": {
            "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_of_type",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_of_type.sql",
            "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_of_type.sql",
            "name": "test_expect_column_values_to_be_of_type",
            "macro_sql": "{%- test expect_column_values_to_be_of_type(model, column_name, column_type) -%}\n{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(model, column_name, [column_type]) }}\n{%- endtest -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.6598878,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_values_to_be_null": {
            "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_null",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_null.sql",
            "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_null.sql",
            "name": "test_expect_column_values_to_be_null",
            "macro_sql": "{% test expect_column_values_to_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.expression_is_true"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.6610503,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_values_to_be_in_set": {
            "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_set",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_set.sql",
            "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_set.sql",
            "name": "test_expect_column_values_to_be_in_set",
            "macro_sql": "{% test expect_column_values_to_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ dbt_utils.type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.type_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.6631966,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing": {
            "unique_id": "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/column_values_basic/expect_column_values_to_have_consistent_casing.sql",
            "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_have_consistent_casing.sql",
            "name": "test_expect_column_values_to_have_consistent_casing",
            "macro_sql": "{% test expect_column_values_to_have_consistent_casing(model, column_name, display_inconsistent_columns=False) %}\n\nwith test_data as (\n\n    select\n        distinct {{ column_name }} as distinct_values\n    from\n        {{ model }}\n\n ),\n {% if display_inconsistent_columns %}\n validation_errors as (\n\n    select\n        lower(distinct_values) as inconsistent_columns,\n        count(distinct_values) as set_count_case_insensitive\n    from\n        test_data\n    group by 1\n    having\n        count(distinct_values) > 1\n\n )\n select * from validation_errors\n {% else %}\n validation_errors as (\n\n    select\n        count(1) as set_count,\n        count(distinct lower(distinct_values)) as set_count_case_insensitive\n    from\n        test_data\n\n )\n select *\n from\n    validation_errors\n where\n    set_count != set_count_case_insensitive\n {% endif %}\n {%- endtest -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.6643062,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_values_to_be_unique": {
            "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_unique",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_unique.sql",
            "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_unique.sql",
            "name": "test_expect_column_values_to_be_unique",
            "macro_sql": "{% test expect_column_values_to_be_unique(model, column_name, row_condition=None) %}\n{{ dbt_expectations.test_expect_compound_columns_to_be_unique(model, [column_name], row_condition=row_condition) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_compound_columns_to_be_unique"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.665178,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_values_to_be_decreasing": {
            "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_decreasing",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_decreasing.sql",
            "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_decreasing.sql",
            "name": "test_expect_column_values_to_be_decreasing",
            "macro_sql": "{% test expect_column_values_to_be_decreasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \"<\" if strictly else \"<=\" %}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.667895,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_values_to_not_be_null": {
            "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_null",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_null.sql",
            "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_null.sql",
            "name": "test_expect_column_values_to_not_be_null",
            "macro_sql": "{% test expect_column_values_to_not_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is not null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.expression_is_true"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.6690698,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs": {
            "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql",
            "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql",
            "name": "test_expect_column_values_to_be_within_n_stdevs",
            "macro_sql": "{% test expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by=None,\n                                  sigma_threshold=3\n                                ) -%}\n    {{ adapter.dispatch('test_expect_column_values_to_be_within_n_stdevs', 'dbt_expectations') (model, column_name, group_by, sigma_threshold) }}\n{%- endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.6711185,
            "supported_languages": null
        },
        "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs": {
            "unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql",
            "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql",
            "name": "default__test_expect_column_values_to_be_within_n_stdevs",
            "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by,\n                                  sigma_threshold\n                                ) %}\nwith metric_values as (\n\n    {% if group_by -%}\n    select\n        {{ group_by }} as metric_date,\n        sum({{ column_name }}) as {{ column_name }}\n    from\n        {{ model }}\n    group by\n        1\n    {%- else -%}\n    select\n        {{ column_name }} as {{ column_name }}\n    from\n        {{ model }}\n    {%- endif %}\n\n),\nmetric_values_with_statistics as (\n\n    select\n        *,\n        avg({{ column_name }}) over() as {{ column_name }}_average,\n        stddev({{ column_name }}) over() as {{ column_name }}_stddev\n    from\n        metric_values\n\n),\nmetric_values_z_scores as (\n\n    select\n        *,\n        ({{ column_name }} - {{ column_name }}_average)/{{ column_name }}_stddev as {{ column_name }}_sigma\n    from\n        metric_values_with_statistics\n\n)\nselect\n    *\nfrom\n    metric_values_z_scores\nwhere\n    abs({{ column_name }}_sigma) > {{ sigma_threshold }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.672507,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart": {
            "unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/distributional/expect_row_values_to_have_data_for_every_n_datepart.sql",
            "original_file_path": "macros/schema_tests/distributional/expect_row_values_to_have_data_for_every_n_datepart.sql",
            "name": "test_expect_row_values_to_have_data_for_every_n_datepart",
            "macro_sql": "{%- test expect_row_values_to_have_data_for_every_n_datepart(model,\n                                                            date_col,\n                                                            date_part=\"day\",\n                                                            interval=None,\n                                                            row_condition=None,\n                                                            exclusion_condition=None,\n                                                            test_start_date=None,\n                                                            test_end_date=None) -%}\n{% if not execute %}\n    {{ return('') }}\n{% endif %}\n\n{% if not test_start_date or not test_end_date %}\n    {% set sql %}\n\n        select\n            min({{ date_col }}) as start_{{ date_part }},\n            max({{ date_col }}) as end_{{ date_part }}\n        from {{ model }}\n        {% if row_condition %}\n        where {{ row_condition }}\n        {% endif %}\n\n    {% endset %}\n\n    {%- set dr = run_query(sql) -%}\n    {%- set db_start_date = dr.columns[0].values()[0].strftime('%Y-%m-%d') -%}\n    {%- set db_end_date = dr.columns[1].values()[0].strftime('%Y-%m-%d') -%}\n\n{% endif %}\n\n{% if not test_start_date %}\n{% set start_date = db_start_date %}\n{% else %}\n{% set start_date = test_start_date %}\n{% endif %}\n\n\n{% if not test_end_date %}\n{% set end_date = db_end_date %}\n{% else %}\n{% set end_date = test_end_date %}\n{% endif %}\nwith base_dates as (\n\n    {{ dbt_date.get_base_dates(start_date=start_date, end_date=end_date, datepart=date_part) }}\n    {% if interval %}\n    {# \n        Filter the date spine created above down to the interval granularity using a modulo operation.\n        The number of date_parts after the start_date divided by the integer interval will produce no remainder for the desired intervals, \n        e.g. for 2-day interval from a starting Jan 1, 2020:\n            params: start_date = '2020-01-01', date_part = 'day', interval = 2\n            date spine created above: [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-04, 2020-01-05, ...]\n            The first parameter to the `mod` function would be the number of days between the start_date and the spine date, i.e. [0, 1, 2, 3, 4 ...]\n            The second parameter to the `mod` function would be the integer interval, i.e. 2\n            This modulo operation produces the following remainders: [0, 1, 0, 1, 0, ...]\n            Filtering the spine only where this remainder == 0 will return a spine with every other day as desired, i.e. [2020-01-01, 2020-01-03, 2020-01-05, ...]\n    #}\n    where mod(\n            cast({{ dbt_utils.datediff(\"'\" ~ start_date ~ \"'\", 'date_' ~ date_part, date_part) }} as {{ dbt_utils.type_int() }}),\n            cast({{interval}} as {{ dbt_utils.type_int() }})\n        ) = 0\n    {% endif %}\n\n),\nmodel_data as (\n\n    select\n    {% if not interval %}\n\n        cast({{ dbt_utils.date_trunc(date_part, date_col) }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n\n    {% else %}\n        {# \n            Use a modulo operator to determine the number of intervals that a date_col is away from the interval-date spine \n            and subtracts that amount to effectively slice each date_col record into its corresponding spine bucket,\n            e.g. given a date_col of with records [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-11, 2020-01-12]\n                if we want to slice these dates into their 2-day buckets starting Jan 1, 2020 (start_date = '2020-01-01', date_part='day', interval=2),\n                the modulo operation described above will produce these remainders: [0, 1, 0, 0, 1]\n                subtracting that number of days from the observations will produce records [2020-01-01, 2020-01-01, 2020-01-03, 2020-01-11, 2020-01-11],\n                all of which align with records from the interval-date spine\n        #}\n        {{dbt_utils.dateadd(\n            date_part, \n            \"mod(\n                cast(\" ~ dbt_utils.datediff(\"'\" ~ start_date ~ \"'\", date_col, date_part) ~ \" as \" ~ dbt_utils.type_int() ~ \" ),\n                cast(\" ~ interval ~ \" as  \" ~ dbt_utils.type_int() ~ \" )\n            ) * (-1)\", \n            \"cast( \" ~ dbt_utils.date_trunc(date_part, date_col) ~ \" as  \" ~ dbt_expectations.type_datetime() ~ \")\"\n        )}} as date_{{ date_part }},\n            \n    {% endif %}\n    \n        count(*) as row_cnt\n    from\n        {{ model }} f\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n    group by\n        date_{{date_part}}\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n        case when f.date_{{ date_part }} is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) = f.date_{{ date_part }}\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n{% if exclusion_condition %}\n  and {{ exclusion_condition }}\n{% endif %}\n{%- endtest -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.run_query",
                    "macro.dbt_date.get_base_dates",
                    "macro.dbt_utils.datediff",
                    "macro.dbt_utils.type_int",
                    "macro.dbt_utils.date_trunc",
                    "macro.dbt_expectations.type_datetime",
                    "macro.dbt_utils.dateadd"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.681456,
            "supported_languages": null
        },
        "macro.dbt_expectations._get_metric_expression": {
            "unique_id": "macro.dbt_expectations._get_metric_expression",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql",
            "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql",
            "name": "_get_metric_expression",
            "macro_sql": "{%- macro _get_metric_expression(metric_column, take_logs) -%}\n\n{%- if take_logs %}\n{%- set expr = \"nullif(\" ~ metric_column ~ \", 0)\" -%}\ncoalesce({{ dbt_expectations.log_natural(expr) }}, 0)\n{%- else -%}\ncoalesce({{ metric_column }}, 0)\n{%- endif %}\n\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.log_natural"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.6867948,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs": {
            "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql",
            "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql",
            "name": "test_expect_column_values_to_be_within_n_moving_stdevs",
            "macro_sql": "{% test expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  period='day',\n                                  lookback_periods=1,\n                                  trend_periods=7,\n                                  test_periods=14,\n                                  sigma_threshold=3,\n                                  sigma_threshold_upper=None,\n                                  sigma_threshold_lower=None,\n                                  take_diffs=true,\n                                  take_logs=true\n                                ) -%}\n    {{ adapter.dispatch('test_expect_column_values_to_be_within_n_moving_stdevs', 'dbt_expectations') (model,\n                                  column_name,\n                                  date_column_name,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) }}\n{%- endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.6880772,
            "supported_languages": null
        },
        "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs": {
            "unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql",
            "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql",
            "name": "default__test_expect_column_values_to_be_within_n_moving_stdevs",
            "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) %}\n\n{%- set sigma_threshold_upper = sigma_threshold_upper if sigma_threshold_upper else sigma_threshold -%}\n{%- set sigma_threshold_lower = sigma_threshold_lower if sigma_threshold_lower else -1 * sigma_threshold -%}\n\nwith metric_values as (\n\n    with grouped_metric_values as (\n\n        select\n            {{ dbt_utils.date_trunc(period, date_column_name) }} as metric_period,\n            sum({{ column_name }}) as agg_metric_value\n        from\n            {{ model }}\n        group by\n            1\n\n    )\n    {%- if take_diffs %}\n    , grouped_metric_values_with_priors as (\n\n        select\n            *,\n            lag(agg_metric_value, {{ lookback_periods }}) over(order by metric_period) as prior_agg_metric_value\n    from\n        grouped_metric_values d\n\n    )\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        -\n        {{ dbt_expectations._get_metric_expression(\"prior_agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values_with_priors d\n\n    {%- else %}\n\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values\n\n    {%- endif %}\n\n),\nmetric_moving_calcs as (\n\n    select\n        *,\n        avg(metric_test_value)\n            over(order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_average,\n        stddev(metric_test_value)\n            over(order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_stddev\n    from\n        metric_values\n\n),\nmetric_sigma as (\n\n    select\n        *,\n        (metric_test_value - metric_test_rolling_average) as metric_test_delta,\n        (metric_test_value - metric_test_rolling_average)/nullif(metric_test_rolling_stddev, 0) as metric_test_sigma\n    from\n        metric_moving_calcs\n\n)\nselect\n    *\nfrom\n    metric_sigma\nwhere\n\n    metric_period >= cast(\n            {{ dbt_utils.dateadd(period, -test_periods, dbt_utils.date_trunc(period, dbt_date.now())) }}\n            as {{ dbt_utils.type_timestamp() }})\n    and\n    metric_period < {{ dbt_utils.date_trunc(period, dbt_date.now()) }}\n    and\n\n    not (\n        metric_test_sigma >= {{ sigma_threshold_lower }} and\n        metric_test_sigma <= {{ sigma_threshold_upper }}\n    )\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.date_trunc",
                    "macro.dbt_expectations._get_metric_expression",
                    "macro.dbt_utils.dateadd",
                    "macro.dbt_date.now",
                    "macro.dbt_utils.type_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.690829,
            "supported_languages": null
        },
        "macro.dbt_expectations.rand": {
            "unique_id": "macro.dbt_expectations.rand",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/math/rand.sql",
            "original_file_path": "macros/math/rand.sql",
            "name": "rand",
            "macro_sql": "{% macro rand() -%}\n    {{ adapter.dispatch('rand', 'dbt_expectations') () }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.bigquery__rand"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.6917844,
            "supported_languages": null
        },
        "macro.dbt_expectations.default__rand": {
            "unique_id": "macro.dbt_expectations.default__rand",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/math/rand.sql",
            "original_file_path": "macros/math/rand.sql",
            "name": "default__rand",
            "macro_sql": "{% macro default__rand() %}\n\n    rand()\n\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.6919987,
            "supported_languages": null
        },
        "macro.dbt_expectations.bigquery__rand": {
            "unique_id": "macro.dbt_expectations.bigquery__rand",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/math/rand.sql",
            "original_file_path": "macros/math/rand.sql",
            "name": "bigquery__rand",
            "macro_sql": "{% macro bigquery__rand() %}\n\n    rand()\n\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.6922011,
            "supported_languages": null
        },
        "macro.dbt_expectations.snowflake__rand": {
            "unique_id": "macro.dbt_expectations.snowflake__rand",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/math/rand.sql",
            "original_file_path": "macros/math/rand.sql",
            "name": "snowflake__rand",
            "macro_sql": "{% macro snowflake__rand(seed) %}\n\n    uniform(0::float, 1::float, random())\n\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.692422,
            "supported_languages": null
        },
        "macro.dbt_expectations.postgres__rand": {
            "unique_id": "macro.dbt_expectations.postgres__rand",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/math/rand.sql",
            "original_file_path": "macros/math/rand.sql",
            "name": "postgres__rand",
            "macro_sql": "{% macro postgres__rand() %}\n\n    random()\n\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.6926339,
            "supported_languages": null
        },
        "macro.dbt_expectations.redshift__rand": {
            "unique_id": "macro.dbt_expectations.redshift__rand",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/math/rand.sql",
            "original_file_path": "macros/math/rand.sql",
            "name": "redshift__rand",
            "macro_sql": "{% macro redshift__rand() %}\n\n    random()\n\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.6928318,
            "supported_languages": null
        },
        "macro.dbt_expectations.percentile_cont": {
            "unique_id": "macro.dbt_expectations.percentile_cont",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/math/percentile_cont.sql",
            "original_file_path": "macros/math/percentile_cont.sql",
            "name": "percentile_cont",
            "macro_sql": "{% macro percentile_cont(field, quantile, partition=None) %}\n  {{ adapter.dispatch('quantile', 'dbt_expectations') (field, quantile, partition) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.bigquery__quantile"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.694013,
            "supported_languages": null
        },
        "macro.dbt_expectations.default__quantile": {
            "unique_id": "macro.dbt_expectations.default__quantile",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/math/percentile_cont.sql",
            "original_file_path": "macros/math/percentile_cont.sql",
            "name": "default__quantile",
            "macro_sql": "{% macro default__quantile(field, quantile, partition)  -%}\n    percentile_cont({{ quantile }}) within group (order by {{ field }})\n    {%- if partition %}over(partition by {{ partition }}){% endif -%}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.6945548,
            "supported_languages": null
        },
        "macro.dbt_expectations.bigquery__quantile": {
            "unique_id": "macro.dbt_expectations.bigquery__quantile",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/math/percentile_cont.sql",
            "original_file_path": "macros/math/percentile_cont.sql",
            "name": "bigquery__quantile",
            "macro_sql": "{% macro bigquery__quantile(field, quantile, partition) %}\n    percentile_cont({{ field }}, {{ quantile }})\n    over({%- if partition %}partition by {{ partition }}{% endif -%})\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.6950932,
            "supported_languages": null
        },
        "macro.dbt_expectations.log_natural": {
            "unique_id": "macro.dbt_expectations.log_natural",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/math/log_natural.sql",
            "original_file_path": "macros/math/log_natural.sql",
            "name": "log_natural",
            "macro_sql": "{% macro log_natural(x) -%}\n    {{ adapter.dispatch('log_natural', 'dbt_expectations') (x) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.bigquery__log_natural"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.6959703,
            "supported_languages": null
        },
        "macro.dbt_expectations.default__log_natural": {
            "unique_id": "macro.dbt_expectations.default__log_natural",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/math/log_natural.sql",
            "original_file_path": "macros/math/log_natural.sql",
            "name": "default__log_natural",
            "macro_sql": "{% macro default__log_natural(x) %}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.6962519,
            "supported_languages": null
        },
        "macro.dbt_expectations.bigquery__log_natural": {
            "unique_id": "macro.dbt_expectations.bigquery__log_natural",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/math/log_natural.sql",
            "original_file_path": "macros/math/log_natural.sql",
            "name": "bigquery__log_natural",
            "macro_sql": "{% macro bigquery__log_natural(x) %}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.69653,
            "supported_languages": null
        },
        "macro.dbt_expectations.snowflake__log_natural": {
            "unique_id": "macro.dbt_expectations.snowflake__log_natural",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/math/log_natural.sql",
            "original_file_path": "macros/math/log_natural.sql",
            "name": "snowflake__log_natural",
            "macro_sql": "{% macro snowflake__log_natural(x) %}\n\n    ln({{ x }})\n\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.6968012,
            "supported_languages": null
        },
        "macro.dbt_expectations.median": {
            "unique_id": "macro.dbt_expectations.median",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/math/median.sql",
            "original_file_path": "macros/math/median.sql",
            "name": "median",
            "macro_sql": "{% macro median(field) %}\n{{ dbt_expectations.percentile_cont(field, 0.5) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.percentile_cont"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.6975274,
            "supported_languages": null
        },
        "macro.dbt_expectations.regexp_instr": {
            "unique_id": "macro.dbt_expectations.regexp_instr",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/regex/regexp_instr.sql",
            "original_file_path": "macros/regex/regexp_instr.sql",
            "name": "regexp_instr",
            "macro_sql": "{% macro regexp_instr(source_value, regexp, position=1, occurrence=1) %}\n\n    {{ adapter.dispatch('regexp_instr', 'dbt_expectations')(\n        source_value, regexp, position, occurrence\n    ) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.default__regexp_instr"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.6989655,
            "supported_languages": null
        },
        "macro.dbt_expectations.default__regexp_instr": {
            "unique_id": "macro.dbt_expectations.default__regexp_instr",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/regex/regexp_instr.sql",
            "original_file_path": "macros/regex/regexp_instr.sql",
            "name": "default__regexp_instr",
            "macro_sql": "{% macro default__regexp_instr(source_value, regexp, position, occurrence) %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }})\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.6995842,
            "supported_languages": null
        },
        "macro.dbt_expectations.redshift__regexp_instr": {
            "unique_id": "macro.dbt_expectations.redshift__regexp_instr",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/regex/regexp_instr.sql",
            "original_file_path": "macros/regex/regexp_instr.sql",
            "name": "redshift__regexp_instr",
            "macro_sql": "{% macro redshift__regexp_instr(source_value, regexp, position, occurrence) %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }})\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.7000735,
            "supported_languages": null
        },
        "macro.dbt_expectations.postgres__regexp_instr": {
            "unique_id": "macro.dbt_expectations.postgres__regexp_instr",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/regex/regexp_instr.sql",
            "original_file_path": "macros/regex/regexp_instr.sql",
            "name": "postgres__regexp_instr",
            "macro_sql": "{% macro postgres__regexp_instr(source_value, regexp, position, occurrence) %}\narray_length((select regexp_matches({{ source_value }}, '{{ regexp }}')), 1)\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.700468,
            "supported_languages": null
        },
        "macro.dbt_expectations.spark__regexp_instr": {
            "unique_id": "macro.dbt_expectations.spark__regexp_instr",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/regex/regexp_instr.sql",
            "original_file_path": "macros/regex/regexp_instr.sql",
            "name": "spark__regexp_instr",
            "macro_sql": "{% macro spark__regexp_instr(source_value, regexp, position, occurrence) %}\ncase when {{ source_value }} rlike '{{ regexp }}' then 1 else 0 end\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.7008576,
            "supported_languages": null
        },
        "macro.dbt_expectations.type_timestamp": {
            "unique_id": "macro.dbt_expectations.type_timestamp",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/utils/datatypes.sql",
            "original_file_path": "macros/utils/datatypes.sql",
            "name": "type_timestamp",
            "macro_sql": "\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_expectations')()) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.default__type_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.7020292,
            "supported_languages": null
        },
        "macro.dbt_expectations.default__type_timestamp": {
            "unique_id": "macro.dbt_expectations.default__type_timestamp",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/utils/datatypes.sql",
            "original_file_path": "macros/utils/datatypes.sql",
            "name": "default__type_timestamp",
            "macro_sql": "{% macro default__type_timestamp() -%}\n    timestamp\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.7022784,
            "supported_languages": null
        },
        "macro.dbt_expectations.snowflake__type_timestamp": {
            "unique_id": "macro.dbt_expectations.snowflake__type_timestamp",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/utils/datatypes.sql",
            "original_file_path": "macros/utils/datatypes.sql",
            "name": "snowflake__type_timestamp",
            "macro_sql": "{% macro snowflake__type_timestamp() -%}\n    timestamp_ntz\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.7024975,
            "supported_languages": null
        },
        "macro.dbt_expectations.postgres__type_timestamp": {
            "unique_id": "macro.dbt_expectations.postgres__type_timestamp",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/utils/datatypes.sql",
            "original_file_path": "macros/utils/datatypes.sql",
            "name": "postgres__type_timestamp",
            "macro_sql": "{% macro postgres__type_timestamp() -%}\n    timestamp without time zone\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.7027059,
            "supported_languages": null
        },
        "macro.dbt_expectations.type_datetime": {
            "unique_id": "macro.dbt_expectations.type_datetime",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/utils/datatypes.sql",
            "original_file_path": "macros/utils/datatypes.sql",
            "name": "type_datetime",
            "macro_sql": "{% macro type_datetime() -%}\n  {{ return(adapter.dispatch('type_datetime', 'dbt_expectations')()) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.default__type_datetime"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.7031188,
            "supported_languages": null
        },
        "macro.dbt_expectations.default__type_datetime": {
            "unique_id": "macro.dbt_expectations.default__type_datetime",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/utils/datatypes.sql",
            "original_file_path": "macros/utils/datatypes.sql",
            "name": "default__type_datetime",
            "macro_sql": "{% macro default__type_datetime() -%}\n    datetime\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.7033236,
            "supported_languages": null
        },
        "macro.dbt_expectations.snowflake__type_datetime": {
            "unique_id": "macro.dbt_expectations.snowflake__type_datetime",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/utils/datatypes.sql",
            "original_file_path": "macros/utils/datatypes.sql",
            "name": "snowflake__type_datetime",
            "macro_sql": "{% macro snowflake__type_datetime() -%}\n    timestamp_ntz\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.7035248,
            "supported_languages": null
        },
        "macro.dbt_expectations.postgres__type_datetime": {
            "unique_id": "macro.dbt_expectations.postgres__type_datetime",
            "package_name": "dbt_expectations",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_expectations",
            "path": "macros/utils/datatypes.sql",
            "original_file_path": "macros/utils/datatypes.sql",
            "name": "postgres__type_datetime",
            "macro_sql": "{% macro postgres__type_datetime() -%}\n    timestamp without time zone\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.7037232,
            "supported_languages": null
        },
        "macro.dbt_date.get_date_dimension": {
            "unique_id": "macro.dbt_date.get_date_dimension",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/get_date_dimension.sql",
            "original_file_path": "macros/get_date_dimension.sql",
            "name": "get_date_dimension",
            "macro_sql": "{% macro get_date_dimension(start_date, end_date) %}\n    {{ adapter.dispatch('get_date_dimension', 'dbt_date') (start_date, end_date) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.default__get_date_dimension"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.716756,
            "supported_languages": null
        },
        "macro.dbt_date.default__get_date_dimension": {
            "unique_id": "macro.dbt_date.default__get_date_dimension",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/get_date_dimension.sql",
            "original_file_path": "macros/get_date_dimension.sql",
            "name": "default__get_date_dimension",
            "macro_sql": "{% macro default__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt_utils.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt_utils.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=false) }} as day_of_week,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week_iso,\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt_utils.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt_utils.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ dbt_utils.last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as quarter_of_year,\n    cast({{ dbt_utils.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'quarter') }} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as year_number,\n    cast({{ dbt_utils.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.get_base_dates",
                    "macro.dbt_utils.dateadd",
                    "macro.dbt_date.yesterday",
                    "macro.dbt_date.tomorrow",
                    "macro.dbt_date.day_of_week",
                    "macro.dbt_date.day_name",
                    "macro.dbt_date.day_of_month",
                    "macro.dbt_date.day_of_year",
                    "macro.dbt_date.week_start",
                    "macro.dbt_date.week_end",
                    "macro.dbt_date.week_of_year",
                    "macro.dbt_date.iso_week_start",
                    "macro.dbt_date.iso_week_end",
                    "macro.dbt_date.iso_week_of_year",
                    "macro.dbt_date.date_part",
                    "macro.dbt_utils.type_int",
                    "macro.dbt_date.month_name",
                    "macro.dbt_utils.date_trunc",
                    "macro.dbt_utils.last_day"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.7229497,
            "supported_languages": null
        },
        "macro.dbt_date.postgres__get_date_dimension": {
            "unique_id": "macro.dbt_date.postgres__get_date_dimension",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/get_date_dimension.sql",
            "original_file_path": "macros/get_date_dimension.sql",
            "name": "postgres__get_date_dimension",
            "macro_sql": "{% macro postgres__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt_utils.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt_utils.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week,\n\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt_utils.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt_utils.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ dbt_utils.last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as quarter_of_year,\n    cast({{ dbt_utils.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    {# dbt_utils.last_day does not support quarter because postgresql does not support quarter interval. #}\n    cast({{dbt_utils.dateadd('day', '-1', dbt_utils.dateadd('month', '3', dbt_utils.date_trunc('quarter', 'd.date_day')))}} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as year_number,\n    cast({{ dbt_utils.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.get_base_dates",
                    "macro.dbt_utils.dateadd",
                    "macro.dbt_date.yesterday",
                    "macro.dbt_date.tomorrow",
                    "macro.dbt_date.day_of_week",
                    "macro.dbt_date.day_name",
                    "macro.dbt_date.day_of_month",
                    "macro.dbt_date.day_of_year",
                    "macro.dbt_date.week_start",
                    "macro.dbt_date.week_end",
                    "macro.dbt_date.week_of_year",
                    "macro.dbt_date.iso_week_start",
                    "macro.dbt_date.iso_week_end",
                    "macro.dbt_date.iso_week_of_year",
                    "macro.dbt_date.date_part",
                    "macro.dbt_utils.type_int",
                    "macro.dbt_date.month_name",
                    "macro.dbt_utils.date_trunc",
                    "macro.dbt_utils.last_day"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.7289708,
            "supported_languages": null
        },
        "macro.dbt_date.get_base_dates": {
            "unique_id": "macro.dbt_date.get_base_dates",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/get_base_dates.sql",
            "original_file_path": "macros/get_base_dates.sql",
            "name": "get_base_dates",
            "macro_sql": "{% macro get_base_dates(start_date=None, end_date=None, n_dateparts=None, datepart=\"day\") %}\n    {{ adapter.dispatch('get_base_dates', 'dbt_date') (start_date, end_date, n_dateparts, datepart) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.bigquery__get_base_dates"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.7311962,
            "supported_languages": null
        },
        "macro.dbt_date.default__get_base_dates": {
            "unique_id": "macro.dbt_date.default__get_base_dates",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/get_base_dates.sql",
            "original_file_path": "macros/get_base_dates.sql",
            "name": "default__get_base_dates",
            "macro_sql": "{% macro default__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as \" ~ dbt_utils.type_timestamp() ~ \")\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as \" ~ dbt_utils.type_timestamp() ~ \")\"  -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt_utils.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_utils.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt_utils.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.type_timestamp",
                    "macro.dbt_utils.dateadd",
                    "macro.dbt_date.today",
                    "macro.dbt_date.tomorrow",
                    "macro.dbt_utils.date_spine"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.7330816,
            "supported_languages": null
        },
        "macro.dbt_date.bigquery__get_base_dates": {
            "unique_id": "macro.dbt_date.bigquery__get_base_dates",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/get_base_dates.sql",
            "original_file_path": "macros/get_base_dates.sql",
            "name": "bigquery__get_base_dates",
            "macro_sql": "{% macro bigquery__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as date )\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as date )\" -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt_utils.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_utils.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt_utils.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.dateadd",
                    "macro.dbt_date.today",
                    "macro.dbt_date.tomorrow",
                    "macro.dbt_utils.date_spine",
                    "macro.dbt_utils.type_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.7350616,
            "supported_languages": null
        },
        "macro.dbt_date.get_fiscal_periods": {
            "unique_id": "macro.dbt_date.get_fiscal_periods",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/fiscal_date/get_fiscal_periods.sql",
            "original_file_path": "macros/fiscal_date/get_fiscal_periods.sql",
            "name": "get_fiscal_periods",
            "macro_sql": "{% macro get_fiscal_periods(dates, year_end_month, week_start_day, shift_year=1) %}\n{# \nThis macro requires you to pass in a ref to a date dimension, created via\ndbt_date.get_date_dimension()s\n#}\nwith fscl_year_dates_for_periods as (\n    {{ dbt_date.get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) }}\n),\nfscl_year_w13 as (\n\n    select\n        f.*,\n        -- We count the weeks in a 13 week period\n        -- and separate the 4-5-4 week sequences\n        mod(cast(\n            (f.fiscal_week_of_year-1) as {{ dbt_utils.type_int() }}\n            ), 13) as w13_number,\n        -- Chop weeks into 13 week merch quarters\n        cast(\n            least(\n                floor((f.fiscal_week_of_year-1)/13.0)\n                , 3)\n            as {{ dbt_utils.type_int() }}) as quarter_number\n    from\n        fscl_year_dates_for_periods f\n\n),\nfscl_periods as (\n\n    select\n        f.date_day,\n        f.fiscal_year_number,\n        f.week_start_date,\n        f.week_end_date,\n        f.fiscal_week_of_year,\n        case \n            -- we move week 53 into the 3rd period of the quarter\n            when f.fiscal_week_of_year = 53 then 3\n            when f.w13_number between 0 and 3 then 1\n            when f.w13_number between 4 and 8 then 2\n            when f.w13_number between 9 and 12 then 3\n        end as period_of_quarter,\n        f.quarter_number\n    from\n        fscl_year_w13 f\n\n),\nfscl_periods_quarters as (\n\n    select\n        f.*,\n        cast((\n            (f.quarter_number * 3) + f.period_of_quarter\n         ) as {{ dbt_utils.type_int() }}) as fiscal_period_number\n    from\n        fscl_periods f\n\n)\nselect\n    date_day,\n    fiscal_year_number,\n    week_start_date,\n    week_end_date,\n    fiscal_week_of_year, \n    dense_rank() over(partition by fiscal_period_number order by fiscal_week_of_year) as fiscal_week_of_period,\n    fiscal_period_number,\n    quarter_number+1 as fiscal_quarter_number,\n    period_of_quarter as fiscal_period_of_quarter\nfrom \n    fscl_periods_quarters \norder by 1,2\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.get_fiscal_year_dates",
                    "macro.dbt_utils.type_int"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.7369795,
            "supported_languages": null
        },
        "macro.dbt_date.get_fiscal_year_dates": {
            "unique_id": "macro.dbt_date.get_fiscal_year_dates",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/fiscal_date/get_fiscal_year_dates.sql",
            "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql",
            "name": "get_fiscal_year_dates",
            "macro_sql": "{% macro get_fiscal_year_dates(dates, year_end_month=12, week_start_day=1, shift_year=1) %}\n{{ adapter.dispatch('get_fiscal_year_dates', 'dbt_date') (dates, year_end_month, week_start_day, shift_year) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.default__get_fiscal_year_dates"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.73982,
            "supported_languages": null
        },
        "macro.dbt_date.default__get_fiscal_year_dates": {
            "unique_id": "macro.dbt_date.default__get_fiscal_year_dates",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/fiscal_date/get_fiscal_year_dates.sql",
            "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql",
            "name": "default__get_fiscal_year_dates",
            "macro_sql": "{% macro default__get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) %}\n-- this gets all the dates within a fiscal year\n-- determined by the given year-end-month\n-- ending on the saturday closest to that month's end date\nwith date_dimension as (\n    select * from {{ dates }}\n),\nyear_month_end as (\n\n    select\n       d.year_number - {{ shift_year }} as fiscal_year_number,\n       d.month_end_date\n    from\n        date_dimension d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by 1,2\n\n),\nweeks as (\n\n    select\n        d.year_number,\n        d.month_of_year,\n        d.date_day as week_start_date,\n        cast({{ dbt_utils.dateadd('day', 6, 'd.date_day') }} as date) as week_end_date\n    from\n        date_dimension d\n    where\n        d.day_of_week = {{ week_start_day }}\n\n),\n-- get all the weeks that start in the month the year ends\nyear_week_ends as (\n\n    select\n        d.year_number - {{ shift_year }} as fiscal_year_number,\n        d.week_end_date\n    from\n        weeks d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by\n        1,2\n\n),\n-- then calculate which Saturday is closest to month end\nweeks_at_month_end as (\n\n    select\n        d.fiscal_year_number,\n        d.week_end_date,\n        m.month_end_date,\n        rank() over\n            (partition by d.fiscal_year_number\n                order by\n                abs({{ dbt_utils.datediff('d.week_end_date', 'm.month_end_date', 'day') }})\n\n            ) as closest_to_month_end\n    from\n        year_week_ends d\n        join\n        year_month_end m on d.fiscal_year_number = m.fiscal_year_number\n),\nfiscal_year_range as (\n\n    select\n        w.fiscal_year_number,\n        cast(\n            {{ dbt_utils.dateadd('day', 1,\n            'lag(w.week_end_date) over(order by w.week_end_date)') }}\n            as date) as fiscal_year_start_date,\n        w.week_end_date as fiscal_year_end_date\n    from\n        weeks_at_month_end w\n    where\n        w.closest_to_month_end = 1\n\n),\nfiscal_year_dates as (\n\n    select\n        d.date_day,\n        m.fiscal_year_number,\n        m.fiscal_year_start_date,\n        m.fiscal_year_end_date,\n        w.week_start_date,\n        w.week_end_date,\n        -- we reset the weeks of the year starting with the merch year start date\n        dense_rank()\n            over(\n                partition by m.fiscal_year_number\n                order by w.week_start_date\n                ) as fiscal_week_of_year\n    from\n        date_dimension d\n        join\n        fiscal_year_range m on d.date_day between m.fiscal_year_start_date and m.fiscal_year_end_date\n        join\n        weeks w on d.date_day between w.week_start_date and w.week_end_date\n\n)\nselect * from fiscal_year_dates order by 1\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.dateadd",
                    "macro.dbt_utils.datediff"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.7412183,
            "supported_languages": null
        },
        "macro.dbt_date.yesterday": {
            "unique_id": "macro.dbt_date.yesterday",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/calendar_date/yesterday.sql",
            "original_file_path": "macros/calendar_date/yesterday.sql",
            "name": "yesterday",
            "macro_sql": "{%- macro yesterday(date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(1, date, tz) }}\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.n_days_ago"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.7420032,
            "supported_languages": null
        },
        "macro.dbt_date.day_name": {
            "unique_id": "macro.dbt_date.day_name",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/calendar_date/day_name.sql",
            "original_file_path": "macros/calendar_date/day_name.sql",
            "name": "day_name",
            "macro_sql": "{%- macro day_name(date, short=True) -%}\n    {{ adapter.dispatch('day_name', 'dbt_date') (date, short) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.bigquery__day_name"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.7434638,
            "supported_languages": null
        },
        "macro.dbt_date.default__day_name": {
            "unique_id": "macro.dbt_date.default__day_name",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/calendar_date/day_name.sql",
            "original_file_path": "macros/calendar_date/day_name.sql",
            "name": "default__day_name",
            "macro_sql": "\n\n{%- macro default__day_name(date, short) -%}\n{%- set f = 'Dy' if short else 'Day' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.743992,
            "supported_languages": null
        },
        "macro.dbt_date.snowflake__day_name": {
            "unique_id": "macro.dbt_date.snowflake__day_name",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/calendar_date/day_name.sql",
            "original_file_path": "macros/calendar_date/day_name.sql",
            "name": "snowflake__day_name",
            "macro_sql": "\n\n{%- macro snowflake__day_name(date, short) -%}\n    {%- if short -%}\n    dayname({{ date }})\n    {%- else -%}\n    -- long version not implemented on Snowflake so we're doing it manually :/\n    case dayname({{ date }})\n        when 'Mon' then 'Monday'\n        when 'Tue' then 'Tuesday'\n        when 'Wed' then 'Wednesday'\n        when 'Thu' then 'Thursday'\n        when 'Fri' then 'Friday'\n        when 'Sat' then 'Saturday'\n        when 'Sun' then 'Sunday'\n    end\n    {%- endif -%}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.7445204,
            "supported_languages": null
        },
        "macro.dbt_date.bigquery__day_name": {
            "unique_id": "macro.dbt_date.bigquery__day_name",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/calendar_date/day_name.sql",
            "original_file_path": "macros/calendar_date/day_name.sql",
            "name": "bigquery__day_name",
            "macro_sql": "\n\n{%- macro bigquery__day_name(date, short) -%}\n{%- set f = '%a' if short else '%A' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.7450383,
            "supported_languages": null
        },
        "macro.dbt_date.postgres__day_name": {
            "unique_id": "macro.dbt_date.postgres__day_name",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/calendar_date/day_name.sql",
            "original_file_path": "macros/calendar_date/day_name.sql",
            "name": "postgres__day_name",
            "macro_sql": "\n\n{%- macro postgres__day_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMDy' if short else 'FMDay' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.7455916,
            "supported_languages": null
        },
        "macro.dbt_date.last_week": {
            "unique_id": "macro.dbt_date.last_week",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/calendar_date/last_week.sql",
            "original_file_path": "macros/calendar_date/last_week.sql",
            "name": "last_week",
            "macro_sql": "{%- macro last_week(tz=None) -%}\n{{ dbt_date.n_weeks_ago(1, tz) }}\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.n_weeks_ago"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.7463257,
            "supported_languages": null
        },
        "macro.dbt_date.to_unixtimestamp": {
            "unique_id": "macro.dbt_date.to_unixtimestamp",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/calendar_date/to_unixtimestamp.sql",
            "original_file_path": "macros/calendar_date/to_unixtimestamp.sql",
            "name": "to_unixtimestamp",
            "macro_sql": "{%- macro to_unixtimestamp(timestamp) -%}\n    {{ adapter.dispatch('to_unixtimestamp', 'dbt_date') (timestamp) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.bigquery__to_unixtimestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.7472384,
            "supported_languages": null
        },
        "macro.dbt_date.default__to_unixtimestamp": {
            "unique_id": "macro.dbt_date.default__to_unixtimestamp",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/calendar_date/to_unixtimestamp.sql",
            "original_file_path": "macros/calendar_date/to_unixtimestamp.sql",
            "name": "default__to_unixtimestamp",
            "macro_sql": "\n\n{%- macro default__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch', timestamp) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.date_part"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.7476153,
            "supported_languages": null
        },
        "macro.dbt_date.snowflake__to_unixtimestamp": {
            "unique_id": "macro.dbt_date.snowflake__to_unixtimestamp",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/calendar_date/to_unixtimestamp.sql",
            "original_file_path": "macros/calendar_date/to_unixtimestamp.sql",
            "name": "snowflake__to_unixtimestamp",
            "macro_sql": "\n\n{%- macro snowflake__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch_seconds', timestamp) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.date_part"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.7479851,
            "supported_languages": null
        },
        "macro.dbt_date.bigquery__to_unixtimestamp": {
            "unique_id": "macro.dbt_date.bigquery__to_unixtimestamp",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/calendar_date/to_unixtimestamp.sql",
            "original_file_path": "macros/calendar_date/to_unixtimestamp.sql",
            "name": "bigquery__to_unixtimestamp",
            "macro_sql": "\n\n{%- macro bigquery__to_unixtimestamp(timestamp) -%}\n    unix_seconds({{ timestamp }})\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.7482626,
            "supported_languages": null
        },
        "macro.dbt_date.today": {
            "unique_id": "macro.dbt_date.today",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/calendar_date/today.sql",
            "original_file_path": "macros/calendar_date/today.sql",
            "name": "today",
            "macro_sql": "{%- macro today(tz=None) -%}\ncast({{ dbt_date.now(tz) }} as date)\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.now"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.7489176,
            "supported_languages": null
        },
        "macro.dbt_date.tomorrow": {
            "unique_id": "macro.dbt_date.tomorrow",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/calendar_date/tomorrow.sql",
            "original_file_path": "macros/calendar_date/tomorrow.sql",
            "name": "tomorrow",
            "macro_sql": "{%- macro tomorrow(date=None, tz=None) -%}\n{{ dbt_date.n_days_away(1, date, tz) }}\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.n_days_away"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.7497692,
            "supported_languages": null
        },
        "macro.dbt_date.n_weeks_ago": {
            "unique_id": "macro.dbt_date.n_weeks_ago",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/calendar_date/n_weeks_ago.sql",
            "original_file_path": "macros/calendar_date/n_weeks_ago.sql",
            "name": "n_weeks_ago",
            "macro_sql": "{%- macro n_weeks_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt_utils.date_trunc('week', \n    dbt_utils.dateadd('week', -1 * n, \n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.date_trunc",
                    "macro.dbt_utils.dateadd",
                    "macro.dbt_date.today"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.7512114,
            "supported_languages": null
        },
        "macro.dbt_date.n_days_ago": {
            "unique_id": "macro.dbt_date.n_days_ago",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/calendar_date/n_days_ago.sql",
            "original_file_path": "macros/calendar_date/n_days_ago.sql",
            "name": "n_days_ago",
            "macro_sql": "{%- macro n_days_ago(n, date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{%- set n = n|int -%}\ncast({{ dbt_utils.dateadd('day', -1 * n, dt) }} as date)\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.today",
                    "macro.dbt_utils.dateadd"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.7524638,
            "supported_languages": null
        },
        "macro.dbt_date.month_name": {
            "unique_id": "macro.dbt_date.month_name",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/calendar_date/month_name.sql",
            "original_file_path": "macros/calendar_date/month_name.sql",
            "name": "month_name",
            "macro_sql": "{%- macro month_name(date, short=True) -%}\n    {{ adapter.dispatch('month_name', 'dbt_date') (date, short) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.bigquery__month_name"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.7537236,
            "supported_languages": null
        },
        "macro.dbt_date.default__month_name": {
            "unique_id": "macro.dbt_date.default__month_name",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/calendar_date/month_name.sql",
            "original_file_path": "macros/calendar_date/month_name.sql",
            "name": "default__month_name",
            "macro_sql": "\n\n{%- macro default__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MONTH' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.7542496,
            "supported_languages": null
        },
        "macro.dbt_date.bigquery__month_name": {
            "unique_id": "macro.dbt_date.bigquery__month_name",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/calendar_date/month_name.sql",
            "original_file_path": "macros/calendar_date/month_name.sql",
            "name": "bigquery__month_name",
            "macro_sql": "\n\n{%- macro bigquery__month_name(date, short) -%}\n{%- set f = '%b' if short else '%B' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.7547731,
            "supported_languages": null
        },
        "macro.dbt_date.snowflake__month_name": {
            "unique_id": "macro.dbt_date.snowflake__month_name",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/calendar_date/month_name.sql",
            "original_file_path": "macros/calendar_date/month_name.sql",
            "name": "snowflake__month_name",
            "macro_sql": "\n\n{%- macro snowflake__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MMMM' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.7552958,
            "supported_languages": null
        },
        "macro.dbt_date.postgres__month_name": {
            "unique_id": "macro.dbt_date.postgres__month_name",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/calendar_date/month_name.sql",
            "original_file_path": "macros/calendar_date/month_name.sql",
            "name": "postgres__month_name",
            "macro_sql": "\n\n{%- macro postgres__month_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMMon' if short else 'FMMonth' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.755859,
            "supported_languages": null
        },
        "macro.dbt_date.now": {
            "unique_id": "macro.dbt_date.now",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/calendar_date/now.sql",
            "original_file_path": "macros/calendar_date/now.sql",
            "name": "now",
            "macro_sql": "{%- macro now(tz=None) -%}\n{{ dbt_date.convert_timezone(dbt_utils.current_timestamp(), tz) }}\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.convert_timezone",
                    "macro.dbt_utils.current_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.7565985,
            "supported_languages": null
        },
        "macro.dbt_date.n_weeks_away": {
            "unique_id": "macro.dbt_date.n_weeks_away",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/calendar_date/n_weeks_away.sql",
            "original_file_path": "macros/calendar_date/n_weeks_away.sql",
            "name": "n_weeks_away",
            "macro_sql": "{%- macro n_weeks_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt_utils.date_trunc('week', \n    dbt_utils.dateadd('week', n, \n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.date_trunc",
                    "macro.dbt_utils.dateadd",
                    "macro.dbt_date.today"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.7576714,
            "supported_languages": null
        },
        "macro.dbt_date.next_week": {
            "unique_id": "macro.dbt_date.next_week",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/calendar_date/next_week.sql",
            "original_file_path": "macros/calendar_date/next_week.sql",
            "name": "next_week",
            "macro_sql": "{%- macro next_week(tz=None) -%}\n{{ dbt_date.n_weeks_away(1, tz) }}\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.n_weeks_away"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.7583516,
            "supported_languages": null
        },
        "macro.dbt_date.week_of_year": {
            "unique_id": "macro.dbt_date.week_of_year",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/calendar_date/week_of_year.sql",
            "original_file_path": "macros/calendar_date/week_of_year.sql",
            "name": "week_of_year",
            "macro_sql": "{%- macro week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.today",
                    "macro.dbt_date.default__week_of_year"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.7595842,
            "supported_languages": null
        },
        "macro.dbt_date.default__week_of_year": {
            "unique_id": "macro.dbt_date.default__week_of_year",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/calendar_date/week_of_year.sql",
            "original_file_path": "macros/calendar_date/week_of_year.sql",
            "name": "default__week_of_year",
            "macro_sql": "{%- macro default__week_of_year(date) -%}\ncast({{ dbt_date.date_part('week', date) }} as {{ dbt_utils.type_int() }})\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.date_part",
                    "macro.dbt_utils.type_int"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.7600772,
            "supported_languages": null
        },
        "macro.dbt_date.postgres__week_of_year": {
            "unique_id": "macro.dbt_date.postgres__week_of_year",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/calendar_date/week_of_year.sql",
            "original_file_path": "macros/calendar_date/week_of_year.sql",
            "name": "postgres__week_of_year",
            "macro_sql": "\n\n{%- macro postgres__week_of_year(date) -%}\n{# postgresql 'week' returns isoweek. Use to_char instead.\n   WW = the first week starts on the first day of the year #}\ncast(to_char({{ date }}, 'WW') as {{ dbt_utils.type_int() }})\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.type_int"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.7604783,
            "supported_languages": null
        },
        "macro.dbt_date.day_of_month": {
            "unique_id": "macro.dbt_date.day_of_month",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/calendar_date/day_of_month.sql",
            "original_file_path": "macros/calendar_date/day_of_month.sql",
            "name": "day_of_month",
            "macro_sql": "{%- macro day_of_month(date) -%}\n{{ dbt_date.date_part('day', date) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.date_part"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.761224,
            "supported_languages": null
        },
        "macro.dbt_date.redshift__day_of_month": {
            "unique_id": "macro.dbt_date.redshift__day_of_month",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/calendar_date/day_of_month.sql",
            "original_file_path": "macros/calendar_date/day_of_month.sql",
            "name": "redshift__day_of_month",
            "macro_sql": "\n\n{%- macro redshift__day_of_month(date) -%}\ncast({{ dbt_date.date_part('day', date) }} as {{ dbt_utils.type_bigint() }})\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.date_part",
                    "macro.dbt_utils.type_bigint"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.7617102,
            "supported_languages": null
        },
        "macro.dbt_date.n_days_away": {
            "unique_id": "macro.dbt_date.n_days_away",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/calendar_date/n_days_away.sql",
            "original_file_path": "macros/calendar_date/n_days_away.sql",
            "name": "n_days_away",
            "macro_sql": "{%- macro n_days_away(n, date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(-1 * n, date, tz) }}\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.n_days_ago"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.7625468,
            "supported_languages": null
        },
        "macro.dbt_date.last_month_number": {
            "unique_id": "macro.dbt_date.last_month_number",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/calendar_date/last_month_number.sql",
            "original_file_path": "macros/calendar_date/last_month_number.sql",
            "name": "last_month_number",
            "macro_sql": "{%- macro last_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.last_month(1, tz)) }}\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.date_part",
                    "macro.dbt_date.last_month"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.7633345,
            "supported_languages": null
        },
        "macro.dbt_date.convert_timezone": {
            "unique_id": "macro.dbt_date.convert_timezone",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/calendar_date/convert_timezone.sql",
            "original_file_path": "macros/calendar_date/convert_timezone.sql",
            "name": "convert_timezone",
            "macro_sql": "{%- macro convert_timezone(column, target_tz=None, source_tz=None) -%}\n{%- set source_tz = \"UTC\" if not source_tz else source_tz -%}\n{%- set target_tz = var(\"dbt_date:time_zone\") if not target_tz else target_tz -%}\n{{ adapter.dispatch('convert_timezone', 'dbt_date') (column, target_tz, source_tz) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.bigquery__convert_timezone"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.7660003,
            "supported_languages": null
        },
        "macro.dbt_date.default__convert_timezone": {
            "unique_id": "macro.dbt_date.default__convert_timezone",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/calendar_date/convert_timezone.sql",
            "original_file_path": "macros/calendar_date/convert_timezone.sql",
            "name": "default__convert_timezone",
            "macro_sql": "{% macro default__convert_timezone(column, target_tz, source_tz) -%}\n{%- if not source_tz -%}\ncast(convert_timezone('{{ target_tz }}', {{ column }}) as {{ dbt_utils.type_timestamp() }})\n{%- else -%}\ncast(convert_timezone('{{ source_tz }}', '{{ target_tz }}', {{ column }}) as {{ dbt_utils.type_timestamp() }})\n{%- endif -%}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.type_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.7670498,
            "supported_languages": null
        },
        "macro.dbt_date.bigquery__convert_timezone": {
            "unique_id": "macro.dbt_date.bigquery__convert_timezone",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/calendar_date/convert_timezone.sql",
            "original_file_path": "macros/calendar_date/convert_timezone.sql",
            "name": "bigquery__convert_timezone",
            "macro_sql": "{%- macro bigquery__convert_timezone(column, target_tz, source_tz=None) -%}\ntimestamp(datetime({{ column }}, '{{ target_tz}}'))\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.767481,
            "supported_languages": null
        },
        "macro.dbt_date.spark__convert_timezone": {
            "unique_id": "macro.dbt_date.spark__convert_timezone",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/calendar_date/convert_timezone.sql",
            "original_file_path": "macros/calendar_date/convert_timezone.sql",
            "name": "spark__convert_timezone",
            "macro_sql": "{%- macro spark__convert_timezone(column, target_tz, source_tz) -%}\nfrom_utc_timestamp(\n        to_utc_timestamp({{ column }}, '{{ source_tz }}'),\n        '{{ target_tz }}'\n        )\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.7679124,
            "supported_languages": null
        },
        "macro.dbt_date.postgres__convert_timezone": {
            "unique_id": "macro.dbt_date.postgres__convert_timezone",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/calendar_date/convert_timezone.sql",
            "original_file_path": "macros/calendar_date/convert_timezone.sql",
            "name": "postgres__convert_timezone",
            "macro_sql": "{% macro postgres__convert_timezone(column, target_tz, source_tz) -%}\n{%- if source_tz -%}\ncast({{ column }} at time zone '{{ source_tz }}' at time zone '{{ target_tz }}' as {{ dbt_utils.type_timestamp() }})\n{%- else -%}\ncast({{ column }} at time zone '{{ target_tz }}' as {{ dbt_utils.type_timestamp() }})\n{%- endif -%}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.type_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.768762,
            "supported_languages": null
        },
        "macro.dbt_date.redshift__convert_timezone": {
            "unique_id": "macro.dbt_date.redshift__convert_timezone",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/calendar_date/convert_timezone.sql",
            "original_file_path": "macros/calendar_date/convert_timezone.sql",
            "name": "redshift__convert_timezone",
            "macro_sql": "{%- macro redshift__convert_timezone(column, target_tz, source_tz) -%}\n{{ return(dbt_date.default__convert_timezone(column, target_tz, source_tz)) }}\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.default__convert_timezone"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.7692523,
            "supported_languages": null
        },
        "macro.dbt_date.day_of_week": {
            "unique_id": "macro.dbt_date.day_of_week",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/calendar_date/day_of_week.sql",
            "original_file_path": "macros/calendar_date/day_of_week.sql",
            "name": "day_of_week",
            "macro_sql": "{%- macro day_of_week(date, isoweek=true) -%}\n{{ adapter.dispatch('day_of_week', 'dbt_date') (date, isoweek) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.bigquery__day_of_week"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.772384,
            "supported_languages": null
        },
        "macro.dbt_date.default__day_of_week": {
            "unique_id": "macro.dbt_date.default__day_of_week",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/calendar_date/day_of_week.sql",
            "original_file_path": "macros/calendar_date/day_of_week.sql",
            "name": "default__day_of_week",
            "macro_sql": "\n\n{%- macro default__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else {{ dow }}\n    end\n    {%- else -%}\n    {{ dow }} + 1\n    {%- endif -%}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.date_part"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.7731616,
            "supported_languages": null
        },
        "macro.dbt_date.snowflake__day_of_week": {
            "unique_id": "macro.dbt_date.snowflake__day_of_week",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/calendar_date/day_of_week.sql",
            "original_file_path": "macros/calendar_date/day_of_week.sql",
            "name": "snowflake__day_of_week",
            "macro_sql": "\n\n{%- macro snowflake__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'dayofweekiso' -%}\n        {{ dbt_date.date_part(dow_part, date) }}\n    {%- else -%}\n        {%- set dow_part = 'dayofweek' -%}\n        case\n            when {{ dbt_date.date_part(dow_part, date) }} = 7 then 1\n            else {{ dbt_date.date_part(dow_part, date) }} + 1\n        end\n    {%- endif -%}\n\n\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.date_part"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.774221,
            "supported_languages": null
        },
        "macro.dbt_date.bigquery__day_of_week": {
            "unique_id": "macro.dbt_date.bigquery__day_of_week",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/calendar_date/day_of_week.sql",
            "original_file_path": "macros/calendar_date/day_of_week.sql",
            "name": "bigquery__day_of_week",
            "macro_sql": "\n\n{%- macro bigquery__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (1) to Monday (2)\n        when {{ dow }} = 1 then 7\n        else {{ dow }} - 1\n    end\n    {%- else -%}\n    {{ dow }}\n    {%- endif -%}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.date_part"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.7749734,
            "supported_languages": null
        },
        "macro.dbt_date.postgres__day_of_week": {
            "unique_id": "macro.dbt_date.postgres__day_of_week",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/calendar_date/day_of_week.sql",
            "original_file_path": "macros/calendar_date/day_of_week.sql",
            "name": "postgres__day_of_week",
            "macro_sql": "\n\n\n{%- macro postgres__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'isodow' -%}\n        -- Monday(1) to Sunday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} as {{ dbt_utils.type_int() }})\n    {%- else -%}\n        {%- set dow_part = 'dow' -%}\n        -- Sunday(1) to Saturday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} + 1 as {{ dbt_utils.type_int() }})\n    {%- endif -%}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.date_part",
                    "macro.dbt_utils.type_int"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.7760835,
            "supported_languages": null
        },
        "macro.dbt_date.redshift__day_of_week": {
            "unique_id": "macro.dbt_date.redshift__day_of_week",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/calendar_date/day_of_week.sql",
            "original_file_path": "macros/calendar_date/day_of_week.sql",
            "name": "redshift__day_of_week",
            "macro_sql": "\n\n\n{%- macro redshift__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else cast({{ dow }} as {{ dbt_utils.type_bigint() }})\n    end\n    {%- else -%}\n    cast({{ dow }} + 1 as {{ dbt_utils.type_bigint() }})\n    {%- endif -%}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.date_part",
                    "macro.dbt_utils.type_bigint"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.777039,
            "supported_languages": null
        },
        "macro.dbt_date.next_month_number": {
            "unique_id": "macro.dbt_date.next_month_number",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/calendar_date/next_month_number.sql",
            "original_file_path": "macros/calendar_date/next_month_number.sql",
            "name": "next_month_number",
            "macro_sql": "{%- macro next_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.next_month(1, tz)) }}\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.date_part",
                    "macro.dbt_date.next_month"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.7778685,
            "supported_languages": null
        },
        "macro.dbt_date.n_months_away": {
            "unique_id": "macro.dbt_date.n_months_away",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/calendar_date/n_months_away.sql",
            "original_file_path": "macros/calendar_date/n_months_away.sql",
            "name": "n_months_away",
            "macro_sql": "{%- macro n_months_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt_utils.date_trunc('month', \n    dbt_utils.dateadd('month', n, \n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.date_trunc",
                    "macro.dbt_utils.dateadd",
                    "macro.dbt_date.today"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.7789462,
            "supported_languages": null
        },
        "macro.dbt_date.next_month": {
            "unique_id": "macro.dbt_date.next_month",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/calendar_date/next_month.sql",
            "original_file_path": "macros/calendar_date/next_month.sql",
            "name": "next_month",
            "macro_sql": "{%- macro next_month(tz=None) -%}\n{{ dbt_date.n_months_away(1, tz) }}\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.n_months_away"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.7796242,
            "supported_languages": null
        },
        "macro.dbt_date.last_month": {
            "unique_id": "macro.dbt_date.last_month",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/calendar_date/last_month.sql",
            "original_file_path": "macros/calendar_date/last_month.sql",
            "name": "last_month",
            "macro_sql": "{%- macro last_month(tz=None) -%}\n{{ dbt_date.n_months_ago(1, tz) }}\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.n_months_ago"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.7803013,
            "supported_languages": null
        },
        "macro.dbt_date.next_month_name": {
            "unique_id": "macro.dbt_date.next_month_name",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/calendar_date/next_month_name.sql",
            "original_file_path": "macros/calendar_date/next_month_name.sql",
            "name": "next_month_name",
            "macro_sql": "{%- macro next_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.next_month(1, tz), short=short) }}\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.month_name",
                    "macro.dbt_date.next_month"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.7813234,
            "supported_languages": null
        },
        "macro.dbt_date.n_months_ago": {
            "unique_id": "macro.dbt_date.n_months_ago",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/calendar_date/n_months_ago.sql",
            "original_file_path": "macros/calendar_date/n_months_ago.sql",
            "name": "n_months_ago",
            "macro_sql": "{%- macro n_months_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt_utils.date_trunc('month', \n    dbt_utils.dateadd('month', -1 * n, \n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.date_trunc",
                    "macro.dbt_utils.dateadd",
                    "macro.dbt_date.today"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.782534,
            "supported_languages": null
        },
        "macro.dbt_date.day_of_year": {
            "unique_id": "macro.dbt_date.day_of_year",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/calendar_date/day_of_year.sql",
            "original_file_path": "macros/calendar_date/day_of_year.sql",
            "name": "day_of_year",
            "macro_sql": "{%- macro day_of_year(date) -%}\n{{ adapter.dispatch('day_of_year', 'dbt_date') (date) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.default__day_of_year"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.7835298,
            "supported_languages": null
        },
        "macro.dbt_date.default__day_of_year": {
            "unique_id": "macro.dbt_date.default__day_of_year",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/calendar_date/day_of_year.sql",
            "original_file_path": "macros/calendar_date/day_of_year.sql",
            "name": "default__day_of_year",
            "macro_sql": "\n\n{%- macro default__day_of_year(date) -%}\n    {{ dbt_date.date_part('dayofyear', date) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.date_part"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.7839115,
            "supported_languages": null
        },
        "macro.dbt_date.postgres__day_of_year": {
            "unique_id": "macro.dbt_date.postgres__day_of_year",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/calendar_date/day_of_year.sql",
            "original_file_path": "macros/calendar_date/day_of_year.sql",
            "name": "postgres__day_of_year",
            "macro_sql": "\n\n{%- macro postgres__day_of_year(date) -%}\n    {{ dbt_date.date_part('doy', date) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.date_part"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.7842855,
            "supported_languages": null
        },
        "macro.dbt_date.redshift__day_of_year": {
            "unique_id": "macro.dbt_date.redshift__day_of_year",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/calendar_date/day_of_year.sql",
            "original_file_path": "macros/calendar_date/day_of_year.sql",
            "name": "redshift__day_of_year",
            "macro_sql": "\n\n{%- macro redshift__day_of_year(date) -%}\n    cast({{ dbt_date.date_part('dayofyear', date) }} as {{ dbt_utils.type_bigint() }})\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.date_part",
                    "macro.dbt_utils.type_bigint"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.7847795,
            "supported_languages": null
        },
        "macro.dbt_date.periods_since": {
            "unique_id": "macro.dbt_date.periods_since",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/calendar_date/periods_since.sql",
            "original_file_path": "macros/calendar_date/periods_since.sql",
            "name": "periods_since",
            "macro_sql": "{%- macro periods_since(date_col, period_name='day', tz=None) -%}\n{{ dbt_utils.datediff(date_col, dbt_date.now(tz), period_name) }}\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.datediff",
                    "macro.dbt_date.now"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.7856817,
            "supported_languages": null
        },
        "macro.dbt_date.date_part": {
            "unique_id": "macro.dbt_date.date_part",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/calendar_date/date_part.sql",
            "original_file_path": "macros/calendar_date/date_part.sql",
            "name": "date_part",
            "macro_sql": "{% macro date_part(datepart, date) -%}\n    {{ adapter.dispatch('date_part', 'dbt_date') (datepart, date) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.bigquery__date_part"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.7870762,
            "supported_languages": null
        },
        "macro.dbt_date.default__date_part": {
            "unique_id": "macro.dbt_date.default__date_part",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/calendar_date/date_part.sql",
            "original_file_path": "macros/calendar_date/date_part.sql",
            "name": "default__date_part",
            "macro_sql": "{% macro default__date_part(datepart, date) -%}\n    date_part('{{ datepart }}', {{  date }})\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.787442,
            "supported_languages": null
        },
        "macro.dbt_date.bigquery__date_part": {
            "unique_id": "macro.dbt_date.bigquery__date_part",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/calendar_date/date_part.sql",
            "original_file_path": "macros/calendar_date/date_part.sql",
            "name": "bigquery__date_part",
            "macro_sql": "{% macro bigquery__date_part(datepart, date) -%}\n    extract({{ datepart }} from {{ date }})\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.787832,
            "supported_languages": null
        },
        "macro.dbt_date.iso_week_start": {
            "unique_id": "macro.dbt_date.iso_week_start",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/calendar_date/iso_week_start.sql",
            "original_file_path": "macros/calendar_date/iso_week_start.sql",
            "name": "iso_week_start",
            "macro_sql": "{%- macro iso_week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.today",
                    "macro.dbt_date.default__iso_week_start"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.7892172,
            "supported_languages": null
        },
        "macro.dbt_date._iso_week_start": {
            "unique_id": "macro.dbt_date._iso_week_start",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/calendar_date/iso_week_start.sql",
            "original_file_path": "macros/calendar_date/iso_week_start.sql",
            "name": "_iso_week_start",
            "macro_sql": "{%- macro _iso_week_start(date, week_type) -%}\ncast({{ dbt_utils.date_trunc(week_type, date) }} as date)\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.date_trunc"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.7896519,
            "supported_languages": null
        },
        "macro.dbt_date.default__iso_week_start": {
            "unique_id": "macro.dbt_date.default__iso_week_start",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/calendar_date/iso_week_start.sql",
            "original_file_path": "macros/calendar_date/iso_week_start.sql",
            "name": "default__iso_week_start",
            "macro_sql": "\n\n{%- macro default__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'isoweek') }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date._iso_week_start"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.7900364,
            "supported_languages": null
        },
        "macro.dbt_date.snowflake__iso_week_start": {
            "unique_id": "macro.dbt_date.snowflake__iso_week_start",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/calendar_date/iso_week_start.sql",
            "original_file_path": "macros/calendar_date/iso_week_start.sql",
            "name": "snowflake__iso_week_start",
            "macro_sql": "\n\n{%- macro snowflake__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date._iso_week_start"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.7904153,
            "supported_languages": null
        },
        "macro.dbt_date.postgres__iso_week_start": {
            "unique_id": "macro.dbt_date.postgres__iso_week_start",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/calendar_date/iso_week_start.sql",
            "original_file_path": "macros/calendar_date/iso_week_start.sql",
            "name": "postgres__iso_week_start",
            "macro_sql": "\n\n{%- macro postgres__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date._iso_week_start"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.7907941,
            "supported_languages": null
        },
        "macro.dbt_date.week_start": {
            "unique_id": "macro.dbt_date.week_start",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/calendar_date/week_start.sql",
            "original_file_path": "macros/calendar_date/week_start.sql",
            "name": "week_start",
            "macro_sql": "{%- macro week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.today",
                    "macro.dbt_date.default__week_start"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.7921596,
            "supported_languages": null
        },
        "macro.dbt_date.default__week_start": {
            "unique_id": "macro.dbt_date.default__week_start",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/calendar_date/week_start.sql",
            "original_file_path": "macros/calendar_date/week_start.sql",
            "name": "default__week_start",
            "macro_sql": "{%- macro default__week_start(date) -%}\ncast({{ dbt_utils.date_trunc('week', date) }} as date)\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.date_trunc"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.7925818,
            "supported_languages": null
        },
        "macro.dbt_date.snowflake__week_start": {
            "unique_id": "macro.dbt_date.snowflake__week_start",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/calendar_date/week_start.sql",
            "original_file_path": "macros/calendar_date/week_start.sql",
            "name": "snowflake__week_start",
            "macro_sql": "\n\n{%- macro snowflake__week_start(date) -%}\n    {#\n        Get the day of week offset: e.g. if the date is a Sunday,\n        dbt_date.day_of_week returns 1, so we subtract 1 to get a 0 offset\n    #}\n    {% set off_set = dbt_date.day_of_week(date, isoweek=False) ~ \" - 1\" %}\n    cast({{ dbt_utils.dateadd(\"day\", \"-1 * (\" ~ off_set ~ \")\", date) }} as date)\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.day_of_week",
                    "macro.dbt_utils.dateadd"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.793369,
            "supported_languages": null
        },
        "macro.dbt_date.postgres__week_start": {
            "unique_id": "macro.dbt_date.postgres__week_start",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/calendar_date/week_start.sql",
            "original_file_path": "macros/calendar_date/week_start.sql",
            "name": "postgres__week_start",
            "macro_sql": "\n\n{%- macro postgres__week_start(date) -%}\n-- Sunday as week start date\ncast({{ dbt_utils.dateadd('day', -1, dbt_utils.date_trunc('week', dbt_utils.dateadd('day', 1, date))) }} as date)\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.dateadd",
                    "macro.dbt_utils.date_trunc"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.794053,
            "supported_languages": null
        },
        "macro.dbt_date.week_end": {
            "unique_id": "macro.dbt_date.week_end",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/calendar_date/week_end.sql",
            "original_file_path": "macros/calendar_date/week_end.sql",
            "name": "week_end",
            "macro_sql": "{%- macro week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.today",
                    "macro.dbt_date.default__week_end"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.7953963,
            "supported_languages": null
        },
        "macro.dbt_date.default__week_end": {
            "unique_id": "macro.dbt_date.default__week_end",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/calendar_date/week_end.sql",
            "original_file_path": "macros/calendar_date/week_end.sql",
            "name": "default__week_end",
            "macro_sql": "{%- macro default__week_end(date) -%}\n{{ dbt_utils.last_day(date, 'week') }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.last_day"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.7957845,
            "supported_languages": null
        },
        "macro.dbt_date.snowflake__week_end": {
            "unique_id": "macro.dbt_date.snowflake__week_end",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/calendar_date/week_end.sql",
            "original_file_path": "macros/calendar_date/week_end.sql",
            "name": "snowflake__week_end",
            "macro_sql": "\n\n{%- macro snowflake__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.week_start",
                    "macro.dbt_date.n_days_away"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.7963686,
            "supported_languages": null
        },
        "macro.dbt_date.postgres__week_end": {
            "unique_id": "macro.dbt_date.postgres__week_end",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/calendar_date/week_end.sql",
            "original_file_path": "macros/calendar_date/week_end.sql",
            "name": "postgres__week_end",
            "macro_sql": "\n\n{%- macro postgres__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.week_start",
                    "macro.dbt_date.n_days_away"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.796916,
            "supported_languages": null
        },
        "macro.dbt_date.from_unixtimestamp": {
            "unique_id": "macro.dbt_date.from_unixtimestamp",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/calendar_date/from_unixtimestamp.sql",
            "original_file_path": "macros/calendar_date/from_unixtimestamp.sql",
            "name": "from_unixtimestamp",
            "macro_sql": "{%- macro from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {{ adapter.dispatch('from_unixtimestamp', 'dbt_date') (epochs, format) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.bigquery__from_unixtimestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.7994483,
            "supported_languages": null
        },
        "macro.dbt_date.default__from_unixtimestamp": {
            "unique_id": "macro.dbt_date.default__from_unixtimestamp",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/calendar_date/from_unixtimestamp.sql",
            "original_file_path": "macros/calendar_date/from_unixtimestamp.sql",
            "name": "default__from_unixtimestamp",
            "macro_sql": "\n\n{%- macro default__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp({{ epochs }})\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.800163,
            "supported_languages": null
        },
        "macro.dbt_date.postgres__from_unixtimestamp": {
            "unique_id": "macro.dbt_date.postgres__from_unixtimestamp",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/calendar_date/from_unixtimestamp.sql",
            "original_file_path": "macros/calendar_date/from_unixtimestamp.sql",
            "name": "postgres__from_unixtimestamp",
            "macro_sql": "\n\n{%- macro postgres__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    cast(to_timestamp({{ epochs }}) at time zone 'UTC' as timestamp)\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.800866,
            "supported_languages": null
        },
        "macro.dbt_date.snowflake__from_unixtimestamp": {
            "unique_id": "macro.dbt_date.snowflake__from_unixtimestamp",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/calendar_date/from_unixtimestamp.sql",
            "original_file_path": "macros/calendar_date/from_unixtimestamp.sql",
            "name": "snowflake__from_unixtimestamp",
            "macro_sql": "\n\n{%- macro snowflake__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n    {%- set scale = 0 -%}\n    {%- elif format == \"milliseconds\" -%}\n    {%- set scale = 3 -%}\n    {%- elif format == \"microseconds\" -%}\n    {%- set scale = 6 -%}\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp_ntz({{ epochs }}, {{ scale }})\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.8023193,
            "supported_languages": null
        },
        "macro.dbt_date.bigquery__from_unixtimestamp": {
            "unique_id": "macro.dbt_date.bigquery__from_unixtimestamp",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/calendar_date/from_unixtimestamp.sql",
            "original_file_path": "macros/calendar_date/from_unixtimestamp.sql",
            "name": "bigquery__from_unixtimestamp",
            "macro_sql": "\n\n{%- macro bigquery__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n        timestamp_seconds({{ epochs }})\n    {%- elif format == \"milliseconds\" -%}\n        timestamp_millis({{ epochs }})\n    {%- elif format == \"microseconds\" -%}\n        timestamp_micros({{ epochs }})\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.8034663,
            "supported_languages": null
        },
        "macro.dbt_date.iso_week_of_year": {
            "unique_id": "macro.dbt_date.iso_week_of_year",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/calendar_date/iso_week_of_year.sql",
            "original_file_path": "macros/calendar_date/iso_week_of_year.sql",
            "name": "iso_week_of_year",
            "macro_sql": "{%- macro iso_week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.today",
                    "macro.dbt_date.default__iso_week_of_year"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.8050053,
            "supported_languages": null
        },
        "macro.dbt_date._iso_week_of_year": {
            "unique_id": "macro.dbt_date._iso_week_of_year",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/calendar_date/iso_week_of_year.sql",
            "original_file_path": "macros/calendar_date/iso_week_of_year.sql",
            "name": "_iso_week_of_year",
            "macro_sql": "{%- macro _iso_week_of_year(date, week_type) -%}\ncast({{ dbt_date.date_part(week_type, date) }} as {{ dbt_utils.type_int() }})\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.date_part",
                    "macro.dbt_utils.type_int"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.8055518,
            "supported_languages": null
        },
        "macro.dbt_date.default__iso_week_of_year": {
            "unique_id": "macro.dbt_date.default__iso_week_of_year",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/calendar_date/iso_week_of_year.sql",
            "original_file_path": "macros/calendar_date/iso_week_of_year.sql",
            "name": "default__iso_week_of_year",
            "macro_sql": "\n\n{%- macro default__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'isoweek') }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date._iso_week_of_year"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.8059542,
            "supported_languages": null
        },
        "macro.dbt_date.snowflake__iso_week_of_year": {
            "unique_id": "macro.dbt_date.snowflake__iso_week_of_year",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/calendar_date/iso_week_of_year.sql",
            "original_file_path": "macros/calendar_date/iso_week_of_year.sql",
            "name": "snowflake__iso_week_of_year",
            "macro_sql": "\n\n{%- macro snowflake__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'weekiso') }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date._iso_week_of_year"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.806414,
            "supported_languages": null
        },
        "macro.dbt_date.postgres__iso_week_of_year": {
            "unique_id": "macro.dbt_date.postgres__iso_week_of_year",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/calendar_date/iso_week_of_year.sql",
            "original_file_path": "macros/calendar_date/iso_week_of_year.sql",
            "name": "postgres__iso_week_of_year",
            "macro_sql": "\n\n{%- macro postgres__iso_week_of_year(date) -%}\n-- postgresql week is isoweek, the first week of a year containing January 4 of that year.\n{{ dbt_date._iso_week_of_year(date, 'week') }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date._iso_week_of_year"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.8068278,
            "supported_languages": null
        },
        "macro.dbt_date.last_month_name": {
            "unique_id": "macro.dbt_date.last_month_name",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/calendar_date/last_month_name.sql",
            "original_file_path": "macros/calendar_date/last_month_name.sql",
            "name": "last_month_name",
            "macro_sql": "{%- macro last_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.last_month(1, tz), short=short) }}\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.month_name",
                    "macro.dbt_date.last_month"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.8077962,
            "supported_languages": null
        },
        "macro.dbt_date.iso_week_end": {
            "unique_id": "macro.dbt_date.iso_week_end",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/calendar_date/iso_week_end.sql",
            "original_file_path": "macros/calendar_date/iso_week_end.sql",
            "name": "iso_week_end",
            "macro_sql": "{%- macro iso_week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.today",
                    "macro.dbt_date.default__iso_week_end"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.8091376,
            "supported_languages": null
        },
        "macro.dbt_date._iso_week_end": {
            "unique_id": "macro.dbt_date._iso_week_end",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/calendar_date/iso_week_end.sql",
            "original_file_path": "macros/calendar_date/iso_week_end.sql",
            "name": "_iso_week_end",
            "macro_sql": "{%- macro _iso_week_end(date, week_type) -%}\n{%- set dt = dbt_date.iso_week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.iso_week_start",
                    "macro.dbt_date.n_days_away"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.8097594,
            "supported_languages": null
        },
        "macro.dbt_date.default__iso_week_end": {
            "unique_id": "macro.dbt_date.default__iso_week_end",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/calendar_date/iso_week_end.sql",
            "original_file_path": "macros/calendar_date/iso_week_end.sql",
            "name": "default__iso_week_end",
            "macro_sql": "\n\n{%- macro default__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'isoweek') }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date._iso_week_end"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.8101552,
            "supported_languages": null
        },
        "macro.dbt_date.snowflake__iso_week_end": {
            "unique_id": "macro.dbt_date.snowflake__iso_week_end",
            "package_name": "dbt_date",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_date",
            "path": "macros/calendar_date/iso_week_end.sql",
            "original_file_path": "macros/calendar_date/iso_week_end.sql",
            "name": "snowflake__iso_week_end",
            "macro_sql": "\n\n{%- macro snowflake__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'weekiso') }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date._iso_week_end"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.8105452,
            "supported_languages": null
        },
        "macro.dbt_common_macros.custom_generate_schema_name": {
            "unique_id": "macro.dbt_common_macros.custom_generate_schema_name",
            "package_name": "dbt_common_macros",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_common_macros",
            "path": "macros/custom_generate_schema_name.sql",
            "original_file_path": "macros/custom_generate_schema_name.sql",
            "name": "custom_generate_schema_name",
            "macro_sql": "{% macro custom_generate_schema_name(custom_schema_name, node) -%}\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'local' -%}\n        {{ default_schema }}\n    {%- else -%}\n        {%- if custom_schema_name is not none -%}\n            {{ custom_schema_name | trim }}\n        {%- else -%}\n            {{ default_schema }}\n        {%- endif -%}\n    {%- endif -%}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.8120089,
            "supported_languages": null
        },
        "macro.dbt_utils.get_intervals_between": {
            "unique_id": "macro.dbt_utils.get_intervals_between",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/sql/date_spine.sql",
            "original_file_path": "macros/sql/date_spine.sql",
            "name": "get_intervals_between",
            "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_intervals_between"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.814189,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_intervals_between": {
            "unique_id": "macro.dbt_utils.default__get_intervals_between",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/sql/date_spine.sql",
            "original_file_path": "macros/sql/date_spine.sql",
            "name": "default__get_intervals_between",
            "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{dbt_utils.datediff(start_date, end_date, datepart)}}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt_utils.datediff"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.8158288,
            "supported_languages": null
        },
        "macro.dbt_utils.date_spine": {
            "unique_id": "macro.dbt_utils.date_spine",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/sql/date_spine.sql",
            "original_file_path": "macros/sql/date_spine.sql",
            "name": "date_spine",
            "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__date_spine"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.8165007,
            "supported_languages": null
        },
        "macro.dbt_utils.default__date_spine": {
            "unique_id": "macro.dbt_utils.default__date_spine",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/sql/date_spine.sql",
            "original_file_path": "macros/sql/date_spine.sql",
            "name": "default__date_spine",
            "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt_utils.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.generate_series",
                    "macro.dbt_utils.get_intervals_between",
                    "macro.dbt_utils.dateadd"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.8174548,
            "supported_languages": null
        },
        "macro.dbt_utils.get_tables_by_pattern_sql": {
            "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/sql/get_tables_by_pattern_sql.sql",
            "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql",
            "name": "get_tables_by_pattern_sql",
            "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.bigquery__get_tables_by_pattern_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.82045,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_tables_by_pattern_sql": {
            "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/sql/get_tables_by_pattern_sql.sql",
            "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql",
            "name": "default__get_tables_by_pattern_sql",
            "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as \"table_schema\",\n            table_name as \"table_name\",\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.8211036,
            "supported_languages": null
        },
        "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {
            "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/sql/get_tables_by_pattern_sql.sql",
            "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql",
            "name": "bigquery__get_tables_by_pattern_sql",
            "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                case table_type\n                    when 'BASE TABLE' then 'table'\n                    else lower(table_type)\n                end as table_type\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils._bigquery__get_matching_schemata"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.8231962,
            "supported_languages": null
        },
        "macro.dbt_utils._bigquery__get_matching_schemata": {
            "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/sql/get_tables_by_pattern_sql.sql",
            "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql",
            "name": "_bigquery__get_matching_schemata",
            "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.824577,
            "supported_languages": null
        },
        "macro.dbt_utils.degrees_to_radians": {
            "unique_id": "macro.dbt_utils.degrees_to_radians",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/sql/haversine_distance.sql",
            "original_file_path": "macros/sql/haversine_distance.sql",
            "name": "degrees_to_radians",
            "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.8267643,
            "supported_languages": null
        },
        "macro.dbt_utils.haversine_distance": {
            "unique_id": "macro.dbt_utils.haversine_distance",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/sql/haversine_distance.sql",
            "original_file_path": "macros/sql/haversine_distance.sql",
            "name": "haversine_distance",
            "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.bigquery__haversine_distance"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.8278315,
            "supported_languages": null
        },
        "macro.dbt_utils.default__haversine_distance": {
            "unique_id": "macro.dbt_utils.default__haversine_distance",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/sql/haversine_distance.sql",
            "original_file_path": "macros/sql/haversine_distance.sql",
            "name": "default__haversine_distance",
            "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.8293402,
            "supported_languages": null
        },
        "macro.dbt_utils.bigquery__haversine_distance": {
            "unique_id": "macro.dbt_utils.bigquery__haversine_distance",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/sql/haversine_distance.sql",
            "original_file_path": "macros/sql/haversine_distance.sql",
            "name": "bigquery__haversine_distance",
            "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.degrees_to_radians"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.8315003,
            "supported_languages": null
        },
        "macro.dbt_utils.safe_add": {
            "unique_id": "macro.dbt_utils.safe_add",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/sql/safe_add.sql",
            "original_file_path": "macros/sql/safe_add.sql",
            "name": "safe_add",
            "macro_sql": "{%- macro safe_add() -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(*varargs)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__safe_add"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.8327007,
            "supported_languages": null
        },
        "macro.dbt_utils.default__safe_add": {
            "unique_id": "macro.dbt_utils.default__safe_add",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/sql/safe_add.sql",
            "original_file_path": "macros/sql/safe_add.sql",
            "name": "default__safe_add",
            "macro_sql": "\n\n{%- macro default__safe_add() -%}\n\n{% set fields = [] %}\n\n{%- for field in varargs -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.833479,
            "supported_languages": null
        },
        "macro.dbt_utils.get_column_values": {
            "unique_id": "macro.dbt_utils.get_column_values",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/sql/get_column_values.sql",
            "original_file_path": "macros/sql/get_column_values.sql",
            "name": "get_column_values",
            "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_column_values"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.835681,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_column_values": {
            "unique_id": "macro.dbt_utils.default__get_column_values",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/sql/get_column_values.sql",
            "original_file_path": "macros/sql/get_column_values.sql",
            "name": "default__get_column_values",
            "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none) -%}\n{% if default is none %}\n    {% set default = [] %}\n{% endif %}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return(default) }}\n    {% endif %}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.load_relation",
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.8393576,
            "supported_languages": null
        },
        "macro.dbt_utils.get_query_results_as_dict": {
            "unique_id": "macro.dbt_utils.get_query_results_as_dict",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/sql/get_query_results_as_dict.sql",
            "original_file_path": "macros/sql/get_query_results_as_dict.sql",
            "name": "get_query_results_as_dict",
            "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_query_results_as_dict"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.840513,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_query_results_as_dict": {
            "unique_id": "macro.dbt_utils.default__get_query_results_as_dict",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/sql/get_query_results_as_dict.sql",
            "original_file_path": "macros/sql/get_query_results_as_dict.sql",
            "name": "default__get_query_results_as_dict",
            "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.84212,
            "supported_languages": null
        },
        "macro.dbt_utils.star": {
            "unique_id": "macro.dbt_utils.star",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/sql/star.sql",
            "original_file_path": "macros/sql/star.sql",
            "name": "star",
            "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__star"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.8439739,
            "supported_languages": null
        },
        "macro.dbt_utils.default__star": {
            "unique_id": "macro.dbt_utils.default__star",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/sql/star.sql",
            "original_file_path": "macros/sql/star.sql",
            "name": "default__star",
            "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {%- do dbt_utils._is_relation(from, 'star') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n\n        {%- endif %}\n    {%- endfor %}\n\n    {%- for col in include_cols %}\n\n        {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}{{ adapter.quote(col)|trim }} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }}\n        {%- if not loop.last %},{{ '\\n  ' }}{% endif %}\n\n    {%- endfor -%}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils._is_relation",
                    "macro.dbt_utils._is_ephemeral"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.846768,
            "supported_languages": null
        },
        "macro.dbt_utils.nullcheck_table": {
            "unique_id": "macro.dbt_utils.nullcheck_table",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/sql/nullcheck_table.sql",
            "original_file_path": "macros/sql/nullcheck_table.sql",
            "name": "nullcheck_table",
            "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__nullcheck_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.8477798,
            "supported_languages": null
        },
        "macro.dbt_utils.default__nullcheck_table": {
            "unique_id": "macro.dbt_utils.default__nullcheck_table",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/sql/nullcheck_table.sql",
            "original_file_path": "macros/sql/nullcheck_table.sql",
            "name": "default__nullcheck_table",
            "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils._is_relation",
                    "macro.dbt_utils._is_ephemeral",
                    "macro.dbt_utils.nullcheck"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.8487039,
            "supported_languages": null
        },
        "macro.dbt_utils.union_relations": {
            "unique_id": "macro.dbt_utils.union_relations",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/sql/union.sql",
            "original_file_path": "macros/sql/union.sql",
            "name": "union_relations",
            "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation') -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__union_relations"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.8517842,
            "supported_languages": null
        },
        "macro.dbt_utils.default__union_relations": {
            "unique_id": "macro.dbt_utils.default__union_relations",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/sql/union.sql",
            "original_file_path": "macros/sql/union.sql",
            "name": "default__union_relations",
            "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation') -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt_utils.string_literal(relation) }} as {{ dbt_utils.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils._is_relation",
                    "macro.dbt_utils._is_ephemeral",
                    "macro.dbt_utils.string_literal",
                    "macro.dbt_utils.type_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.8580859,
            "supported_languages": null
        },
        "macro.dbt_utils.pivot": {
            "unique_id": "macro.dbt_utils.pivot",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/sql/pivot.sql",
            "original_file_path": "macros/sql/pivot.sql",
            "name": "pivot",
            "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__pivot"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.860657,
            "supported_languages": null
        },
        "macro.dbt_utils.default__pivot": {
            "unique_id": "macro.dbt_utils.default__pivot",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/sql/pivot.sql",
            "original_file_path": "macros/sql/pivot.sql",
            "name": "default__pivot",
            "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for v in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ v }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ v ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ v ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.slugify"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.8628309,
            "supported_languages": null
        },
        "macro.dbt_utils.get_tables_by_prefix_sql": {
            "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/sql/get_tables_by_prefix_sql.sql",
            "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql",
            "name": "get_tables_by_prefix_sql",
            "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_tables_by_prefix_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.8640368,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_tables_by_prefix_sql": {
            "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/sql/get_tables_by_prefix_sql.sql",
            "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql",
            "name": "default__get_tables_by_prefix_sql",
            "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.get_tables_by_pattern_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.864787,
            "supported_languages": null
        },
        "macro.dbt_utils.group_by": {
            "unique_id": "macro.dbt_utils.group_by",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/sql/groupby.sql",
            "original_file_path": "macros/sql/groupby.sql",
            "name": "group_by",
            "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__group_by"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.8657212,
            "supported_languages": null
        },
        "macro.dbt_utils.default__group_by": {
            "unique_id": "macro.dbt_utils.default__group_by",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/sql/groupby.sql",
            "original_file_path": "macros/sql/groupby.sql",
            "name": "default__group_by",
            "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.8663852,
            "supported_languages": null
        },
        "macro.dbt_utils.nullcheck": {
            "unique_id": "macro.dbt_utils.nullcheck",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/sql/nullcheck.sql",
            "original_file_path": "macros/sql/nullcheck.sql",
            "name": "nullcheck",
            "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__nullcheck"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.8674054,
            "supported_languages": null
        },
        "macro.dbt_utils.default__nullcheck": {
            "unique_id": "macro.dbt_utils.default__nullcheck",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/sql/nullcheck.sql",
            "original_file_path": "macros/sql/nullcheck.sql",
            "name": "default__nullcheck",
            "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.8683038,
            "supported_languages": null
        },
        "macro.dbt_utils.get_relations_by_prefix": {
            "unique_id": "macro.dbt_utils.get_relations_by_prefix",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/sql/get_relations_by_prefix.sql",
            "original_file_path": "macros/sql/get_relations_by_prefix.sql",
            "name": "get_relations_by_prefix",
            "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_relations_by_prefix"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.8699927,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_relations_by_prefix": {
            "unique_id": "macro.dbt_utils.default__get_relations_by_prefix",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/sql/get_relations_by_prefix.sql",
            "original_file_path": "macros/sql/get_relations_by_prefix.sql",
            "name": "default__get_relations_by_prefix",
            "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt_utils.get_tables_by_prefix_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.872254,
            "supported_languages": null
        },
        "macro.dbt_utils.get_relations_by_pattern": {
            "unique_id": "macro.dbt_utils.get_relations_by_pattern",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/sql/get_relations_by_pattern.sql",
            "original_file_path": "macros/sql/get_relations_by_pattern.sql",
            "name": "get_relations_by_pattern",
            "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_relations_by_pattern"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.8739069,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_relations_by_pattern": {
            "unique_id": "macro.dbt_utils.default__get_relations_by_pattern",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/sql/get_relations_by_pattern.sql",
            "original_file_path": "macros/sql/get_relations_by_pattern.sql",
            "name": "default__get_relations_by_pattern",
            "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt_utils.get_tables_by_pattern_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.8761737,
            "supported_languages": null
        },
        "macro.dbt_utils.unpivot": {
            "unique_id": "macro.dbt_utils.unpivot",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/sql/unpivot.sql",
            "original_file_path": "macros/sql/unpivot.sql",
            "name": "unpivot",
            "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, table)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__unpivot"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.87964,
            "supported_languages": null
        },
        "macro.dbt_utils.default__unpivot": {
            "unique_id": "macro.dbt_utils.default__unpivot",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/sql/unpivot.sql",
            "original_file_path": "macros/sql/unpivot.sql",
            "name": "default__unpivot",
            "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n\n    {% if table %}\n        {%- set error_message = '\n            Warning: the `unpivot` macro no longer accepts a `table` parameter. \\\n            This parameter will be deprecated in a future release of dbt-utils. Use the `relation` parameter instead. \\\n            The {}.{} model triggered this warning. \\\n            '.format(model.package_name, model.name) -%}\n        {%- do exceptions.warn(error_message) -%}\n    {% endif %}\n\n    {% if relation and table %}\n        {{ exceptions.raise_compiler_error(\"Error: both the `relation` and `table` parameters were provided to `unpivot` macro. Choose one only (we recommend `relation`).\") }}\n    {% elif not relation and table %}\n        {% set relation=table %}\n    {% elif not relation and not table %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt_utils.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt_utils.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils._is_relation",
                    "macro.dbt_utils._is_ephemeral",
                    "macro.dbt_utils.type_string",
                    "macro.dbt_utils.cast_bool_to_text"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.8849742,
            "supported_languages": null
        },
        "macro.dbt_utils.surrogate_key": {
            "unique_id": "macro.dbt_utils.surrogate_key",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/sql/surrogate_key.sql",
            "original_file_path": "macros/sql/surrogate_key.sql",
            "name": "surrogate_key",
            "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__surrogate_key"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.886496,
            "supported_languages": null
        },
        "macro.dbt_utils.default__surrogate_key": {
            "unique_id": "macro.dbt_utils.default__surrogate_key",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/sql/surrogate_key.sql",
            "original_file_path": "macros/sql/surrogate_key.sql",
            "name": "default__surrogate_key",
            "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- if varargs|length >= 1 or field_list is string %}\n\n{%- set error_message = '\nWarning: the `surrogate_key` macro now takes a single list argument instead of \\\nmultiple string arguments. Support for multiple string arguments will be \\\ndeprecated in a future release of dbt-utils. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{# first argument is not included in varargs, so add first element to field_list_xf #}\n{%- set field_list_xf = [field_list] -%}\n\n{%- for field in varargs %}\n{%- set _ = field_list_xf.append(field) -%}\n{%- endfor -%}\n\n{%- else -%}\n\n{# if using list, just set field_list_xf as field_list #}\n{%- set field_list_xf = field_list -%}\n\n{%- endif -%}\n\n\n{%- set fields = [] -%}\n\n{%- for field in field_list_xf -%}\n\n    {%- set _ = fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt_utils.type_string() ~ \"), '')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- set _ = fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{dbt_utils.hash(dbt_utils.concat(fields))}}\n\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.type_string",
                    "macro.dbt_utils.hash",
                    "macro.dbt_utils.concat"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.8888478,
            "supported_languages": null
        },
        "macro.dbt_utils.get_powers_of_two": {
            "unique_id": "macro.dbt_utils.get_powers_of_two",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/sql/generate_series.sql",
            "original_file_path": "macros/sql/generate_series.sql",
            "name": "get_powers_of_two",
            "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_powers_of_two"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.8906639,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_powers_of_two": {
            "unique_id": "macro.dbt_utils.default__get_powers_of_two",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/sql/generate_series.sql",
            "original_file_path": "macros/sql/generate_series.sql",
            "name": "default__get_powers_of_two",
            "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.8918788,
            "supported_languages": null
        },
        "macro.dbt_utils.generate_series": {
            "unique_id": "macro.dbt_utils.generate_series",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/sql/generate_series.sql",
            "original_file_path": "macros/sql/generate_series.sql",
            "name": "generate_series",
            "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__generate_series"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.892376,
            "supported_languages": null
        },
        "macro.dbt_utils.default__generate_series": {
            "unique_id": "macro.dbt_utils.default__generate_series",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/sql/generate_series.sql",
            "original_file_path": "macros/sql/generate_series.sql",
            "name": "default__generate_series",
            "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.get_powers_of_two"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.8937185,
            "supported_languages": null
        },
        "macro.dbt_utils.pretty_time": {
            "unique_id": "macro.dbt_utils.pretty_time",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/jinja_helpers/pretty_time.sql",
            "original_file_path": "macros/jinja_helpers/pretty_time.sql",
            "name": "pretty_time",
            "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__pretty_time"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.8946283,
            "supported_languages": null
        },
        "macro.dbt_utils.default__pretty_time": {
            "unique_id": "macro.dbt_utils.default__pretty_time",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/jinja_helpers/pretty_time.sql",
            "original_file_path": "macros/jinja_helpers/pretty_time.sql",
            "name": "default__pretty_time",
            "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.8951375,
            "supported_languages": null
        },
        "macro.dbt_utils.log_info": {
            "unique_id": "macro.dbt_utils.log_info",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/jinja_helpers/log_info.sql",
            "original_file_path": "macros/jinja_helpers/log_info.sql",
            "name": "log_info",
            "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__log_info"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.8959792,
            "supported_languages": null
        },
        "macro.dbt_utils.default__log_info": {
            "unique_id": "macro.dbt_utils.default__log_info",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/jinja_helpers/log_info.sql",
            "original_file_path": "macros/jinja_helpers/log_info.sql",
            "name": "default__log_info",
            "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.pretty_log_format"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.8964942,
            "supported_languages": null
        },
        "macro.dbt_utils.slugify": {
            "unique_id": "macro.dbt_utils.slugify",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/jinja_helpers/slugify.sql",
            "original_file_path": "macros/jinja_helpers/slugify.sql",
            "name": "slugify",
            "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n\n{{ return(string) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.897862,
            "supported_languages": null
        },
        "macro.dbt_utils.pretty_log_format": {
            "unique_id": "macro.dbt_utils.pretty_log_format",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/jinja_helpers/pretty_log_format.sql",
            "original_file_path": "macros/jinja_helpers/pretty_log_format.sql",
            "name": "pretty_log_format",
            "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__pretty_log_format"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.8987134,
            "supported_languages": null
        },
        "macro.dbt_utils.default__pretty_log_format": {
            "unique_id": "macro.dbt_utils.default__pretty_log_format",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/jinja_helpers/pretty_log_format.sql",
            "original_file_path": "macros/jinja_helpers/pretty_log_format.sql",
            "name": "default__pretty_log_format",
            "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.pretty_time"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.8991573,
            "supported_languages": null
        },
        "macro.dbt_utils.test_relationships_where": {
            "unique_id": "macro.dbt_utils.test_relationships_where",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/schema_tests/relationships_where.sql",
            "original_file_path": "macros/schema_tests/relationships_where.sql",
            "name": "test_relationships_where",
            "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_relationships_where"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9007294,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_relationships_where": {
            "unique_id": "macro.dbt_utils.default__test_relationships_where",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/schema_tests/relationships_where.sql",
            "original_file_path": "macros/schema_tests/relationships_where.sql",
            "name": "default__test_relationships_where",
            "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9016101,
            "supported_languages": null
        },
        "macro.dbt_utils.test_equal_rowcount": {
            "unique_id": "macro.dbt_utils.test_equal_rowcount",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/schema_tests/equal_rowcount.sql",
            "original_file_path": "macros/schema_tests/equal_rowcount.sql",
            "name": "test_equal_rowcount",
            "macro_sql": "{% test equal_rowcount(model, compare_model) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_equal_rowcount"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9026973,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_equal_rowcount": {
            "unique_id": "macro.dbt_utils.default__test_equal_rowcount",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/schema_tests/equal_rowcount.sql",
            "original_file_path": "macros/schema_tests/equal_rowcount.sql",
            "name": "default__test_equal_rowcount",
            "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'coalesce(diff_count, 0)') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\nwith a as (\n\n    select count(*) as count_a from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_b from {{ compare_model }}\n\n),\nfinal as (\n\n    select\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n    from a\n    cross join b\n\n)\n\nselect * from final\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.903465,
            "supported_languages": null
        },
        "macro.dbt_utils.test_unique_where": {
            "unique_id": "macro.dbt_utils.test_unique_where",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/schema_tests/test_unique_where.sql",
            "original_file_path": "macros/schema_tests/test_unique_where.sql",
            "name": "test_unique_where",
            "macro_sql": "{% test unique_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.unique_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `unique` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_unique_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_unique_where"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9046512,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_unique_where": {
            "unique_id": "macro.dbt_utils.default__test_unique_where",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/schema_tests/test_unique_where.sql",
            "original_file_path": "macros/schema_tests/test_unique_where.sql",
            "name": "default__test_unique_where",
            "macro_sql": "{% macro default__test_unique_where(model, column_name) %}\r\n  {{ return(test_unique(model, column_name)) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_unique"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9052618,
            "supported_languages": null
        },
        "macro.dbt_utils.test_cardinality_equality": {
            "unique_id": "macro.dbt_utils.test_cardinality_equality",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/schema_tests/cardinality_equality.sql",
            "original_file_path": "macros/schema_tests/cardinality_equality.sql",
            "name": "test_cardinality_equality",
            "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_cardinality_equality"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9065762,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_cardinality_equality": {
            "unique_id": "macro.dbt_utils.default__test_cardinality_equality",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/schema_tests/cardinality_equality.sql",
            "original_file_path": "macros/schema_tests/cardinality_equality.sql",
            "name": "default__test_cardinality_equality",
            "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt_utils.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt_utils.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.except"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9074419,
            "supported_languages": null
        },
        "macro.dbt_utils.test_recency": {
            "unique_id": "macro.dbt_utils.test_recency",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/schema_tests/recency.sql",
            "original_file_path": "macros/schema_tests/recency.sql",
            "name": "test_recency",
            "macro_sql": "{% test recency(model, field, datepart, interval) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval)) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_recency"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.908556,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_recency": {
            "unique_id": "macro.dbt_utils.default__test_recency",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/schema_tests/recency.sql",
            "original_file_path": "macros/schema_tests/recency.sql",
            "name": "default__test_recency",
            "macro_sql": "{% macro default__test_recency(model, field, datepart, interval) %}\n\n{% set threshold = dbt_utils.dateadd(datepart, interval * -1, dbt_utils.current_timestamp()) %}\n\nwith recency as (\n\n    select max({{field}}) as most_recent\n    from {{ model }}\n\n)\n\nselect\n\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.dateadd",
                    "macro.dbt_utils.current_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9094143,
            "supported_languages": null
        },
        "macro.dbt_utils.test_unique_combination_of_columns": {
            "unique_id": "macro.dbt_utils.test_unique_combination_of_columns",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/schema_tests/unique_combination_of_columns.sql",
            "original_file_path": "macros/schema_tests/unique_combination_of_columns.sql",
            "name": "test_unique_combination_of_columns",
            "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_unique_combination_of_columns"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9108555,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_unique_combination_of_columns": {
            "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/schema_tests/unique_combination_of_columns.sql",
            "original_file_path": "macros/schema_tests/unique_combination_of_columns.sql",
            "name": "default__test_unique_combination_of_columns",
            "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9125304,
            "supported_languages": null
        },
        "macro.dbt_utils.test_at_least_one": {
            "unique_id": "macro.dbt_utils.test_at_least_one",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/schema_tests/at_least_one.sql",
            "original_file_path": "macros/schema_tests/at_least_one.sql",
            "name": "test_at_least_one",
            "macro_sql": "{% test at_least_one(model, column_name) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name)) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_at_least_one"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9136565,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_at_least_one": {
            "unique_id": "macro.dbt_utils.default__test_at_least_one",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/schema_tests/at_least_one.sql",
            "original_file_path": "macros/schema_tests/at_least_one.sql",
            "name": "default__test_at_least_one",
            "macro_sql": "{% macro default__test_at_least_one(model, column_name) %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9141657,
            "supported_languages": null
        },
        "macro.dbt_utils.test_not_accepted_values": {
            "unique_id": "macro.dbt_utils.test_not_accepted_values",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/schema_tests/not_accepted_values.sql",
            "original_file_path": "macros/schema_tests/not_accepted_values.sql",
            "name": "test_not_accepted_values",
            "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_not_accepted_values"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9155169,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_not_accepted_values": {
            "unique_id": "macro.dbt_utils.default__test_not_accepted_values",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/schema_tests/not_accepted_values.sql",
            "original_file_path": "macros/schema_tests/not_accepted_values.sql",
            "name": "default__test_not_accepted_values",
            "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9165068,
            "supported_languages": null
        },
        "macro.dbt_utils.test_not_null_where": {
            "unique_id": "macro.dbt_utils.test_not_null_where",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/schema_tests/test_not_null_where.sql",
            "original_file_path": "macros/schema_tests/test_not_null_where.sql",
            "name": "test_not_null_where",
            "macro_sql": "{% test not_null_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.not_null_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `not_null` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_not_null_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_not_null_where"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9176996,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_not_null_where": {
            "unique_id": "macro.dbt_utils.default__test_not_null_where",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/schema_tests/test_not_null_where.sql",
            "original_file_path": "macros/schema_tests/test_not_null_where.sql",
            "name": "default__test_not_null_where",
            "macro_sql": "{% macro default__test_not_null_where(model, column_name) %}\r\n  {{ return(test_not_null(model, column_name)) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9181435,
            "supported_languages": null
        },
        "macro.dbt_utils.test_sequential_values": {
            "unique_id": "macro.dbt_utils.test_sequential_values",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/schema_tests/sequential_values.sql",
            "original_file_path": "macros/schema_tests/sequential_values.sql",
            "name": "test_sequential_values",
            "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart)) }}\n\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_sequential_values"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9196577,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_sequential_values": {
            "unique_id": "macro.dbt_utils.default__test_sequential_values",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/schema_tests/sequential_values.sql",
            "original_file_path": "macros/schema_tests/sequential_values.sql",
            "name": "default__test_sequential_values",
            "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None) %}\n\nwith windowed as (\n\n    select\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            order by {{ column_name }}\n        ) as previous_{{ column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt_utils.type_timestamp() }})= cast({{ dbt_utils.dateadd(datepart, interval, 'previous_' + column_name) }} as {{ dbt_utils.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = previous_{{ column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.type_timestamp",
                    "macro.dbt_utils.dateadd"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9211075,
            "supported_languages": null
        },
        "macro.dbt_utils.test_mutually_exclusive_ranges": {
            "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/schema_tests/mutually_exclusive_ranges.sql",
            "original_file_path": "macros/schema_tests/mutually_exclusive_ranges.sql",
            "name": "test_mutually_exclusive_ranges",
            "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_mutually_exclusive_ranges"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9262612,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_mutually_exclusive_ranges": {
            "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/schema_tests/mutually_exclusive_ranges.sql",
            "original_file_path": "macros/schema_tests/mutually_exclusive_ranges.sql",
            "name": "default__test_mutually_exclusive_ranges",
            "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions nore cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.930232,
            "supported_languages": null
        },
        "macro.dbt_utils.test_accepted_range": {
            "unique_id": "macro.dbt_utils.test_accepted_range",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/schema_tests/accepted_range.sql",
            "original_file_path": "macros/schema_tests/accepted_range.sql",
            "name": "test_accepted_range",
            "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_accepted_range"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9317496,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_accepted_range": {
            "unique_id": "macro.dbt_utils.default__test_accepted_range",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/schema_tests/accepted_range.sql",
            "original_file_path": "macros/schema_tests/accepted_range.sql",
            "name": "default__test_accepted_range",
            "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9329946,
            "supported_languages": null
        },
        "macro.dbt_utils.test_not_null_proportion": {
            "unique_id": "macro.dbt_utils.test_not_null_proportion",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/schema_tests/not_null_proportion.sql",
            "original_file_path": "macros/schema_tests/not_null_proportion.sql",
            "name": "test_not_null_proportion",
            "macro_sql": "{% macro test_not_null_proportion(model) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, **kwargs)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_not_null_proportion"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9341314,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_not_null_proportion": {
            "unique_id": "macro.dbt_utils.default__test_not_null_proportion",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/schema_tests/not_null_proportion.sql",
            "original_file_path": "macros/schema_tests/not_null_proportion.sql",
            "name": "default__test_not_null_proportion",
            "macro_sql": "{% macro default__test_not_null_proportion(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\nwith validation as (\n  select\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n),\nvalidation_errors as (\n  select\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9354362,
            "supported_languages": null
        },
        "macro.dbt_utils.test_expression_is_true": {
            "unique_id": "macro.dbt_utils.test_expression_is_true",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/schema_tests/expression_is_true.sql",
            "original_file_path": "macros/schema_tests/expression_is_true.sql",
            "name": "test_expression_is_true",
            "macro_sql": "{% test expression_is_true(model, expression, column_name=None, condition='1=1') %}\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name, condition)) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_expression_is_true"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9367998,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_expression_is_true": {
            "unique_id": "macro.dbt_utils.default__test_expression_is_true",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/schema_tests/expression_is_true.sql",
            "original_file_path": "macros/schema_tests/expression_is_true.sql",
            "name": "default__test_expression_is_true",
            "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name, condition) %}\n\nwith meet_condition as (\n    select * from {{ model }} where {{ condition }}\n)\n\nselect\n    *\nfrom meet_condition\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.937572,
            "supported_languages": null
        },
        "macro.dbt_utils.test_equality": {
            "unique_id": "macro.dbt_utils.test_equality",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/schema_tests/equality.sql",
            "original_file_path": "macros/schema_tests/equality.sql",
            "name": "test_equality",
            "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_equality"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9394004,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_equality": {
            "unique_id": "macro.dbt_utils.default__test_equality",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/schema_tests/equality.sql",
            "original_file_path": "macros/schema_tests/equality.sql",
            "name": "default__test_equality",
            "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils._is_relation",
                    "macro.dbt_utils._is_ephemeral",
                    "macro.dbt_utils.except"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9416928,
            "supported_languages": null
        },
        "macro.dbt_utils.test_fewer_rows_than": {
            "unique_id": "macro.dbt_utils.test_fewer_rows_than",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/schema_tests/fewer_rows_than.sql",
            "original_file_path": "macros/schema_tests/fewer_rows_than.sql",
            "name": "test_fewer_rows_than",
            "macro_sql": "{% test fewer_rows_than(model, compare_model) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_fewer_rows_than"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9429739,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_fewer_rows_than": {
            "unique_id": "macro.dbt_utils.default__test_fewer_rows_than",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/schema_tests/fewer_rows_than.sql",
            "original_file_path": "macros/schema_tests/fewer_rows_than.sql",
            "name": "default__test_fewer_rows_than",
            "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model) %}\n\n{{ config(fail_calc = 'coalesce(row_count_delta, 0)') }}\n\nwith a as (\n\n    select count(*) as count_our_model from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_comparison_model from {{ compare_model }}\n\n),\ncounts as (\n\n    select\n        count_our_model,\n        count_comparison_model\n    from a\n    cross join b\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9435518,
            "supported_languages": null
        },
        "macro.dbt_utils.test_not_constant": {
            "unique_id": "macro.dbt_utils.test_not_constant",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/schema_tests/not_constant.sql",
            "original_file_path": "macros/schema_tests/not_constant.sql",
            "name": "test_not_constant",
            "macro_sql": "{% test not_constant(model, column_name) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name)) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_not_constant"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9445205,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_not_constant": {
            "unique_id": "macro.dbt_utils.default__test_not_constant",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/schema_tests/not_constant.sql",
            "original_file_path": "macros/schema_tests/not_constant.sql",
            "name": "default__test_not_constant",
            "macro_sql": "{% macro default__test_not_constant(model, column_name) %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9449847,
            "supported_languages": null
        },
        "macro.dbt_utils._is_relation": {
            "unique_id": "macro.dbt_utils._is_relation",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/_is_relation.sql",
            "original_file_path": "macros/cross_db_utils/_is_relation.sql",
            "name": "_is_relation",
            "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9462905,
            "supported_languages": null
        },
        "macro.dbt_utils.current_timestamp": {
            "unique_id": "macro.dbt_utils.current_timestamp",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/current_timestamp.sql",
            "original_file_path": "macros/cross_db_utils/current_timestamp.sql",
            "name": "current_timestamp",
            "macro_sql": "{% macro current_timestamp() -%}\n  {{ return(adapter.dispatch('current_timestamp', 'dbt_utils')()) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.bigquery__current_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9476418,
            "supported_languages": null
        },
        "macro.dbt_utils.default__current_timestamp": {
            "unique_id": "macro.dbt_utils.default__current_timestamp",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/current_timestamp.sql",
            "original_file_path": "macros/cross_db_utils/current_timestamp.sql",
            "name": "default__current_timestamp",
            "macro_sql": "{% macro default__current_timestamp() %}\n    current_timestamp::{{dbt_utils.type_timestamp()}}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.type_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9479623,
            "supported_languages": null
        },
        "macro.dbt_utils.redshift__current_timestamp": {
            "unique_id": "macro.dbt_utils.redshift__current_timestamp",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/current_timestamp.sql",
            "original_file_path": "macros/cross_db_utils/current_timestamp.sql",
            "name": "redshift__current_timestamp",
            "macro_sql": "{% macro redshift__current_timestamp() %}\n    getdate()\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9481707,
            "supported_languages": null
        },
        "macro.dbt_utils.bigquery__current_timestamp": {
            "unique_id": "macro.dbt_utils.bigquery__current_timestamp",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/current_timestamp.sql",
            "original_file_path": "macros/cross_db_utils/current_timestamp.sql",
            "name": "bigquery__current_timestamp",
            "macro_sql": "{% macro bigquery__current_timestamp() %}\n    current_timestamp\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9483745,
            "supported_languages": null
        },
        "macro.dbt_utils.current_timestamp_in_utc": {
            "unique_id": "macro.dbt_utils.current_timestamp_in_utc",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/current_timestamp.sql",
            "original_file_path": "macros/cross_db_utils/current_timestamp.sql",
            "name": "current_timestamp_in_utc",
            "macro_sql": "{% macro current_timestamp_in_utc() -%}\n  {{ return(adapter.dispatch('current_timestamp_in_utc', 'dbt_utils')()) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__current_timestamp_in_utc"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9488223,
            "supported_languages": null
        },
        "macro.dbt_utils.default__current_timestamp_in_utc": {
            "unique_id": "macro.dbt_utils.default__current_timestamp_in_utc",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/current_timestamp.sql",
            "original_file_path": "macros/cross_db_utils/current_timestamp.sql",
            "name": "default__current_timestamp_in_utc",
            "macro_sql": "{% macro default__current_timestamp_in_utc() %}\n    {{dbt_utils.current_timestamp()}}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.current_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9492562,
            "supported_languages": null
        },
        "macro.dbt_utils.snowflake__current_timestamp_in_utc": {
            "unique_id": "macro.dbt_utils.snowflake__current_timestamp_in_utc",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/current_timestamp.sql",
            "original_file_path": "macros/cross_db_utils/current_timestamp.sql",
            "name": "snowflake__current_timestamp_in_utc",
            "macro_sql": "{% macro snowflake__current_timestamp_in_utc() %}\n    convert_timezone('UTC', {{dbt_utils.current_timestamp()}})::{{dbt_utils.type_timestamp()}}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.current_timestamp",
                    "macro.dbt_utils.type_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9496527,
            "supported_languages": null
        },
        "macro.dbt_utils.postgres__current_timestamp_in_utc": {
            "unique_id": "macro.dbt_utils.postgres__current_timestamp_in_utc",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/current_timestamp.sql",
            "original_file_path": "macros/cross_db_utils/current_timestamp.sql",
            "name": "postgres__current_timestamp_in_utc",
            "macro_sql": "{% macro postgres__current_timestamp_in_utc() %}\n    (current_timestamp at time zone 'utc')::{{dbt_utils.type_timestamp()}}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.type_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9499536,
            "supported_languages": null
        },
        "macro.dbt_utils.redshift__current_timestamp_in_utc": {
            "unique_id": "macro.dbt_utils.redshift__current_timestamp_in_utc",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/current_timestamp.sql",
            "original_file_path": "macros/cross_db_utils/current_timestamp.sql",
            "name": "redshift__current_timestamp_in_utc",
            "macro_sql": "{% macro redshift__current_timestamp_in_utc() %}\n    {{ return(dbt_utils.default__current_timestamp_in_utc()) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__current_timestamp_in_utc"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9503026,
            "supported_languages": null
        },
        "macro.dbt_utils.width_bucket": {
            "unique_id": "macro.dbt_utils.width_bucket",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/width_bucket.sql",
            "original_file_path": "macros/cross_db_utils/width_bucket.sql",
            "name": "width_bucket",
            "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__width_bucket"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9528642,
            "supported_languages": null
        },
        "macro.dbt_utils.default__width_bucket": {
            "unique_id": "macro.dbt_utils.default__width_bucket",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/width_bucket.sql",
            "original_file_path": "macros/cross_db_utils/width_bucket.sql",
            "name": "default__width_bucket",
            "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }},\n                    {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.safe_cast",
                    "macro.dbt_utils.type_numeric"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9541605,
            "supported_languages": null
        },
        "macro.dbt_utils.redshift__width_bucket": {
            "unique_id": "macro.dbt_utils.redshift__width_bucket",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/width_bucket.sql",
            "original_file_path": "macros/cross_db_utils/width_bucket.sql",
            "name": "redshift__width_bucket",
            "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }} %\n                {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.safe_cast",
                    "macro.dbt_utils.type_numeric"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9553623,
            "supported_languages": null
        },
        "macro.dbt_utils.snowflake__width_bucket": {
            "unique_id": "macro.dbt_utils.snowflake__width_bucket",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/width_bucket.sql",
            "original_file_path": "macros/cross_db_utils/width_bucket.sql",
            "name": "snowflake__width_bucket",
            "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9558768,
            "supported_languages": null
        },
        "macro.dbt_utils.length": {
            "unique_id": "macro.dbt_utils.length",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/length.sql",
            "original_file_path": "macros/cross_db_utils/length.sql",
            "name": "length",
            "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt_utils') (expression)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__length"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.956845,
            "supported_languages": null
        },
        "macro.dbt_utils.default__length": {
            "unique_id": "macro.dbt_utils.default__length",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/length.sql",
            "original_file_path": "macros/cross_db_utils/length.sql",
            "name": "default__length",
            "macro_sql": "{% macro default__length(expression) %}\n    \n    length(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}\n\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9571443,
            "supported_languages": null
        },
        "macro.dbt_utils.redshift__length": {
            "unique_id": "macro.dbt_utils.redshift__length",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/length.sql",
            "original_file_path": "macros/cross_db_utils/length.sql",
            "name": "redshift__length",
            "macro_sql": "{% macro redshift__length(expression) %}\n\n    len(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9574287,
            "supported_languages": null
        },
        "macro.dbt_utils.type_string": {
            "unique_id": "macro.dbt_utils.type_string",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/datatypes.sql",
            "original_file_path": "macros/cross_db_utils/datatypes.sql",
            "name": "type_string",
            "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__type_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.959047,
            "supported_languages": null
        },
        "macro.dbt_utils.default__type_string": {
            "unique_id": "macro.dbt_utils.default__type_string",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/datatypes.sql",
            "original_file_path": "macros/cross_db_utils/datatypes.sql",
            "name": "default__type_string",
            "macro_sql": "{% macro default__type_string() %}\n    string\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.959263,
            "supported_languages": null
        },
        "macro.dbt_utils.redshift__type_string": {
            "unique_id": "macro.dbt_utils.redshift__type_string",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/datatypes.sql",
            "original_file_path": "macros/cross_db_utils/datatypes.sql",
            "name": "redshift__type_string",
            "macro_sql": "\n\n{%- macro redshift__type_string() -%}\n    varchar\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.959471,
            "supported_languages": null
        },
        "macro.dbt_utils.postgres__type_string": {
            "unique_id": "macro.dbt_utils.postgres__type_string",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/datatypes.sql",
            "original_file_path": "macros/cross_db_utils/datatypes.sql",
            "name": "postgres__type_string",
            "macro_sql": "{% macro postgres__type_string() %}\n    varchar\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.959679,
            "supported_languages": null
        },
        "macro.dbt_utils.snowflake__type_string": {
            "unique_id": "macro.dbt_utils.snowflake__type_string",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/datatypes.sql",
            "original_file_path": "macros/cross_db_utils/datatypes.sql",
            "name": "snowflake__type_string",
            "macro_sql": "{% macro snowflake__type_string() %}\n    varchar\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9598799,
            "supported_languages": null
        },
        "macro.dbt_utils.type_timestamp": {
            "unique_id": "macro.dbt_utils.type_timestamp",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/datatypes.sql",
            "original_file_path": "macros/cross_db_utils/datatypes.sql",
            "name": "type_timestamp",
            "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__type_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9603052,
            "supported_languages": null
        },
        "macro.dbt_utils.default__type_timestamp": {
            "unique_id": "macro.dbt_utils.default__type_timestamp",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/datatypes.sql",
            "original_file_path": "macros/cross_db_utils/datatypes.sql",
            "name": "default__type_timestamp",
            "macro_sql": "{% macro default__type_timestamp() %}\n    timestamp\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.960515,
            "supported_languages": null
        },
        "macro.dbt_utils.snowflake__type_timestamp": {
            "unique_id": "macro.dbt_utils.snowflake__type_timestamp",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/datatypes.sql",
            "original_file_path": "macros/cross_db_utils/datatypes.sql",
            "name": "snowflake__type_timestamp",
            "macro_sql": "{% macro snowflake__type_timestamp() %}\n    timestamp_ntz\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9607198,
            "supported_languages": null
        },
        "macro.dbt_utils.type_float": {
            "unique_id": "macro.dbt_utils.type_float",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/datatypes.sql",
            "original_file_path": "macros/cross_db_utils/datatypes.sql",
            "name": "type_float",
            "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.bigquery__type_float"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9611976,
            "supported_languages": null
        },
        "macro.dbt_utils.default__type_float": {
            "unique_id": "macro.dbt_utils.default__type_float",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/datatypes.sql",
            "original_file_path": "macros/cross_db_utils/datatypes.sql",
            "name": "default__type_float",
            "macro_sql": "{% macro default__type_float() %}\n    float\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9615285,
            "supported_languages": null
        },
        "macro.dbt_utils.bigquery__type_float": {
            "unique_id": "macro.dbt_utils.bigquery__type_float",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/datatypes.sql",
            "original_file_path": "macros/cross_db_utils/datatypes.sql",
            "name": "bigquery__type_float",
            "macro_sql": "{% macro bigquery__type_float() %}\n    float64\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9617352,
            "supported_languages": null
        },
        "macro.dbt_utils.type_numeric": {
            "unique_id": "macro.dbt_utils.type_numeric",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/datatypes.sql",
            "original_file_path": "macros/cross_db_utils/datatypes.sql",
            "name": "type_numeric",
            "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.bigquery__type_numeric"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9621613,
            "supported_languages": null
        },
        "macro.dbt_utils.default__type_numeric": {
            "unique_id": "macro.dbt_utils.default__type_numeric",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/datatypes.sql",
            "original_file_path": "macros/cross_db_utils/datatypes.sql",
            "name": "default__type_numeric",
            "macro_sql": "{% macro default__type_numeric() %}\n    numeric(28, 6)\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9623678,
            "supported_languages": null
        },
        "macro.dbt_utils.bigquery__type_numeric": {
            "unique_id": "macro.dbt_utils.bigquery__type_numeric",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/datatypes.sql",
            "original_file_path": "macros/cross_db_utils/datatypes.sql",
            "name": "bigquery__type_numeric",
            "macro_sql": "{% macro bigquery__type_numeric() %}\n    numeric\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9625828,
            "supported_languages": null
        },
        "macro.dbt_utils.type_bigint": {
            "unique_id": "macro.dbt_utils.type_bigint",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/datatypes.sql",
            "original_file_path": "macros/cross_db_utils/datatypes.sql",
            "name": "type_bigint",
            "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.bigquery__type_bigint"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9630392,
            "supported_languages": null
        },
        "macro.dbt_utils.default__type_bigint": {
            "unique_id": "macro.dbt_utils.default__type_bigint",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/datatypes.sql",
            "original_file_path": "macros/cross_db_utils/datatypes.sql",
            "name": "default__type_bigint",
            "macro_sql": "{% macro default__type_bigint() %}\n    bigint\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9632497,
            "supported_languages": null
        },
        "macro.dbt_utils.bigquery__type_bigint": {
            "unique_id": "macro.dbt_utils.bigquery__type_bigint",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/datatypes.sql",
            "original_file_path": "macros/cross_db_utils/datatypes.sql",
            "name": "bigquery__type_bigint",
            "macro_sql": "{% macro bigquery__type_bigint() %}\n    int64\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9634516,
            "supported_languages": null
        },
        "macro.dbt_utils.type_int": {
            "unique_id": "macro.dbt_utils.type_int",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/datatypes.sql",
            "original_file_path": "macros/cross_db_utils/datatypes.sql",
            "name": "type_int",
            "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.bigquery__type_int"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9638693,
            "supported_languages": null
        },
        "macro.dbt_utils.default__type_int": {
            "unique_id": "macro.dbt_utils.default__type_int",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/datatypes.sql",
            "original_file_path": "macros/cross_db_utils/datatypes.sql",
            "name": "default__type_int",
            "macro_sql": "{% macro default__type_int() %}\n    int\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9640741,
            "supported_languages": null
        },
        "macro.dbt_utils.bigquery__type_int": {
            "unique_id": "macro.dbt_utils.bigquery__type_int",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/datatypes.sql",
            "original_file_path": "macros/cross_db_utils/datatypes.sql",
            "name": "bigquery__type_int",
            "macro_sql": "{% macro bigquery__type_int() %}\n    int64\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9642737,
            "supported_languages": null
        },
        "macro.dbt_utils.date_trunc": {
            "unique_id": "macro.dbt_utils.date_trunc",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/date_trunc.sql",
            "original_file_path": "macros/cross_db_utils/date_trunc.sql",
            "name": "date_trunc",
            "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt_utils') (datepart, date)) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.bigquery__date_trunc"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.965265,
            "supported_languages": null
        },
        "macro.dbt_utils.default__date_trunc": {
            "unique_id": "macro.dbt_utils.default__date_trunc",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/date_trunc.sql",
            "original_file_path": "macros/cross_db_utils/date_trunc.sql",
            "name": "default__date_trunc",
            "macro_sql": "{% macro default__date_trunc(datepart, date) %}\n    date_trunc('{{datepart}}', {{date}})\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.965622,
            "supported_languages": null
        },
        "macro.dbt_utils.bigquery__date_trunc": {
            "unique_id": "macro.dbt_utils.bigquery__date_trunc",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/date_trunc.sql",
            "original_file_path": "macros/cross_db_utils/date_trunc.sql",
            "name": "bigquery__date_trunc",
            "macro_sql": "{% macro bigquery__date_trunc(datepart, date) %}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9659748,
            "supported_languages": null
        },
        "macro.dbt_utils.except": {
            "unique_id": "macro.dbt_utils.except",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/except.sql",
            "original_file_path": "macros/cross_db_utils/except.sql",
            "name": "except",
            "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt_utils')()) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.bigquery__except"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9667952,
            "supported_languages": null
        },
        "macro.dbt_utils.default__except": {
            "unique_id": "macro.dbt_utils.default__except",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/except.sql",
            "original_file_path": "macros/cross_db_utils/except.sql",
            "name": "default__except",
            "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9670157,
            "supported_languages": null
        },
        "macro.dbt_utils.bigquery__except": {
            "unique_id": "macro.dbt_utils.bigquery__except",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/except.sql",
            "original_file_path": "macros/cross_db_utils/except.sql",
            "name": "bigquery__except",
            "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9672217,
            "supported_languages": null
        },
        "macro.dbt_utils.datediff": {
            "unique_id": "macro.dbt_utils.datediff",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/datediff.sql",
            "original_file_path": "macros/cross_db_utils/datediff.sql",
            "name": "datediff",
            "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt_utils')(first_date, second_date, datepart)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.bigquery__datediff"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.971855,
            "supported_languages": null
        },
        "macro.dbt_utils.default__datediff": {
            "unique_id": "macro.dbt_utils.default__datediff",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/datediff.sql",
            "original_file_path": "macros/cross_db_utils/datediff.sql",
            "name": "default__datediff",
            "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9722998,
            "supported_languages": null
        },
        "macro.dbt_utils.bigquery__datediff": {
            "unique_id": "macro.dbt_utils.bigquery__datediff",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/datediff.sql",
            "original_file_path": "macros/cross_db_utils/datediff.sql",
            "name": "bigquery__datediff",
            "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) %}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9727385,
            "supported_languages": null
        },
        "macro.dbt_utils.postgres__datediff": {
            "unique_id": "macro.dbt_utils.postgres__datediff",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/datediff.sql",
            "original_file_path": "macros/cross_db_utils/datediff.sql",
            "name": "postgres__datediff",
            "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) %}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.datediff"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9773676,
            "supported_languages": null
        },
        "macro.dbt_utils.redshift__datediff": {
            "unique_id": "macro.dbt_utils.redshift__datediff",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/datediff.sql",
            "original_file_path": "macros/cross_db_utils/datediff.sql",
            "name": "redshift__datediff",
            "macro_sql": "{% macro redshift__datediff(first_date, second_date, datepart) %}\n\n    {{ return(dbt_utils.default__datediff(first_date, second_date, datepart)) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__datediff"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.977913,
            "supported_languages": null
        },
        "macro.dbt_utils.last_day": {
            "unique_id": "macro.dbt_utils.last_day",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/last_day.sql",
            "original_file_path": "macros/cross_db_utils/last_day.sql",
            "name": "last_day",
            "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt_utils') (date, datepart)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__last_day"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9793358,
            "supported_languages": null
        },
        "macro.dbt_utils.default_last_day": {
            "unique_id": "macro.dbt_utils.default_last_day",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/last_day.sql",
            "original_file_path": "macros/cross_db_utils/last_day.sql",
            "name": "default_last_day",
            "macro_sql": "\n\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd(datepart, '1', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.dateadd",
                    "macro.dbt_utils.date_trunc"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9800308,
            "supported_languages": null
        },
        "macro.dbt_utils.default__last_day": {
            "unique_id": "macro.dbt_utils.default__last_day",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/last_day.sql",
            "original_file_path": "macros/cross_db_utils/last_day.sql",
            "name": "default__last_day",
            "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default_last_day"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9804273,
            "supported_languages": null
        },
        "macro.dbt_utils.postgres__last_day": {
            "unique_id": "macro.dbt_utils.postgres__last_day",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/last_day.sql",
            "original_file_path": "macros/cross_db_utils/last_day.sql",
            "name": "postgres__last_day",
            "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd('month', '3', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.dateadd",
                    "macro.dbt_utils.date_trunc",
                    "macro.dbt_utils.default_last_day"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9814713,
            "supported_languages": null
        },
        "macro.dbt_utils.redshift__last_day": {
            "unique_id": "macro.dbt_utils.redshift__last_day",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/last_day.sql",
            "original_file_path": "macros/cross_db_utils/last_day.sql",
            "name": "redshift__last_day",
            "macro_sql": "{% macro redshift__last_day(date, datepart) %}\n\n    {{ return(dbt_utils.default__last_day(date, datepart)) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__last_day"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9819374,
            "supported_languages": null
        },
        "macro.dbt_utils.position": {
            "unique_id": "macro.dbt_utils.position",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/position.sql",
            "original_file_path": "macros/cross_db_utils/position.sql",
            "name": "position",
            "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt_utils') (substring_text, string_text)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.bigquery__position"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9829884,
            "supported_languages": null
        },
        "macro.dbt_utils.default__position": {
            "unique_id": "macro.dbt_utils.default__position",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/position.sql",
            "original_file_path": "macros/cross_db_utils/position.sql",
            "name": "default__position",
            "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n    \n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9833584,
            "supported_languages": null
        },
        "macro.dbt_utils.bigquery__position": {
            "unique_id": "macro.dbt_utils.bigquery__position",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/position.sql",
            "original_file_path": "macros/cross_db_utils/position.sql",
            "name": "bigquery__position",
            "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n        \n    )\n    \n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9837215,
            "supported_languages": null
        },
        "macro.dbt_utils.split_part": {
            "unique_id": "macro.dbt_utils.split_part",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/split_part.sql",
            "original_file_path": "macros/cross_db_utils/split_part.sql",
            "name": "split_part",
            "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt_utils') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.bigquery__split_part"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.984864,
            "supported_languages": null
        },
        "macro.dbt_utils.default__split_part": {
            "unique_id": "macro.dbt_utils.default__split_part",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/split_part.sql",
            "original_file_path": "macros/cross_db_utils/split_part.sql",
            "name": "default__split_part",
            "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.985365,
            "supported_languages": null
        },
        "macro.dbt_utils.bigquery__split_part": {
            "unique_id": "macro.dbt_utils.bigquery__split_part",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/split_part.sql",
            "original_file_path": "macros/cross_db_utils/split_part.sql",
            "name": "bigquery__split_part",
            "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9858336,
            "supported_languages": null
        },
        "macro.dbt_utils.string_literal": {
            "unique_id": "macro.dbt_utils.string_literal",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/literal.sql",
            "original_file_path": "macros/cross_db_utils/literal.sql",
            "name": "string_literal",
            "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt_utils') (value)) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__string_literal"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9867637,
            "supported_languages": null
        },
        "macro.dbt_utils.default__string_literal": {
            "unique_id": "macro.dbt_utils.default__string_literal",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/literal.sql",
            "original_file_path": "macros/cross_db_utils/literal.sql",
            "name": "default__string_literal",
            "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9870608,
            "supported_languages": null
        },
        "macro.dbt_utils.right": {
            "unique_id": "macro.dbt_utils.right",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/right.sql",
            "original_file_path": "macros/cross_db_utils/right.sql",
            "name": "right",
            "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt_utils') (string_text, length_expression)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.bigquery__right"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9883327,
            "supported_languages": null
        },
        "macro.dbt_utils.default__right": {
            "unique_id": "macro.dbt_utils.default__right",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/right.sql",
            "original_file_path": "macros/cross_db_utils/right.sql",
            "name": "default__right",
            "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n    \n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.988708,
            "supported_languages": null
        },
        "macro.dbt_utils.bigquery__right": {
            "unique_id": "macro.dbt_utils.bigquery__right",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/right.sql",
            "original_file_path": "macros/cross_db_utils/right.sql",
            "name": "bigquery__right",
            "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9891346,
            "supported_languages": null
        },
        "macro.dbt_utils.snowflake__right": {
            "unique_id": "macro.dbt_utils.snowflake__right",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/right.sql",
            "original_file_path": "macros/cross_db_utils/right.sql",
            "name": "snowflake__right",
            "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.989559,
            "supported_languages": null
        },
        "macro.dbt_utils._is_ephemeral": {
            "unique_id": "macro.dbt_utils._is_ephemeral",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/_is_ephemeral.sql",
            "original_file_path": "macros/cross_db_utils/_is_ephemeral.sql",
            "name": "_is_ephemeral",
            "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.991816,
            "supported_languages": null
        },
        "macro.dbt_utils.hash": {
            "unique_id": "macro.dbt_utils.hash",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/hash.sql",
            "original_file_path": "macros/cross_db_utils/hash.sql",
            "name": "hash",
            "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt_utils') (field)) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.bigquery__hash"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9927754,
            "supported_languages": null
        },
        "macro.dbt_utils.default__hash": {
            "unique_id": "macro.dbt_utils.default__hash",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/hash.sql",
            "original_file_path": "macros/cross_db_utils/hash.sql",
            "name": "default__hash",
            "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{field}} as {{dbt_utils.type_string()}}))\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.type_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.993153,
            "supported_languages": null
        },
        "macro.dbt_utils.bigquery__hash": {
            "unique_id": "macro.dbt_utils.bigquery__hash",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/hash.sql",
            "original_file_path": "macros/cross_db_utils/hash.sql",
            "name": "bigquery__hash",
            "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt_utils.default__hash(field)}})\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__hash"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9935048,
            "supported_languages": null
        },
        "macro.dbt_utils.replace": {
            "unique_id": "macro.dbt_utils.replace",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/replace.sql",
            "original_file_path": "macros/cross_db_utils/replace.sql",
            "name": "replace",
            "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt_utils') (field, old_chars, new_chars)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__replace"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.994502,
            "supported_languages": null
        },
        "macro.dbt_utils.default__replace": {
            "unique_id": "macro.dbt_utils.default__replace",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/replace.sql",
            "original_file_path": "macros/cross_db_utils/replace.sql",
            "name": "default__replace",
            "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n    \n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9949732,
            "supported_languages": null
        },
        "macro.dbt_utils.safe_cast": {
            "unique_id": "macro.dbt_utils.safe_cast",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/safe_cast.sql",
            "original_file_path": "macros/cross_db_utils/safe_cast.sql",
            "name": "safe_cast",
            "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt_utils') (field, type)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.bigquery__safe_cast"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9960196,
            "supported_languages": null
        },
        "macro.dbt_utils.default__safe_cast": {
            "unique_id": "macro.dbt_utils.default__safe_cast",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/safe_cast.sql",
            "original_file_path": "macros/cross_db_utils/safe_cast.sql",
            "name": "default__safe_cast",
            "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9964008,
            "supported_languages": null
        },
        "macro.dbt_utils.snowflake__safe_cast": {
            "unique_id": "macro.dbt_utils.snowflake__safe_cast",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/safe_cast.sql",
            "original_file_path": "macros/cross_db_utils/safe_cast.sql",
            "name": "snowflake__safe_cast",
            "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9967473,
            "supported_languages": null
        },
        "macro.dbt_utils.bigquery__safe_cast": {
            "unique_id": "macro.dbt_utils.bigquery__safe_cast",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/safe_cast.sql",
            "original_file_path": "macros/cross_db_utils/safe_cast.sql",
            "name": "bigquery__safe_cast",
            "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.997089,
            "supported_languages": null
        },
        "macro.dbt_utils.intersect": {
            "unique_id": "macro.dbt_utils.intersect",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/intersect.sql",
            "original_file_path": "macros/cross_db_utils/intersect.sql",
            "name": "intersect",
            "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt_utils')()) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.bigquery__intersect"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9979267,
            "supported_languages": null
        },
        "macro.dbt_utils.default__intersect": {
            "unique_id": "macro.dbt_utils.default__intersect",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/intersect.sql",
            "original_file_path": "macros/cross_db_utils/intersect.sql",
            "name": "default__intersect",
            "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9981413,
            "supported_languages": null
        },
        "macro.dbt_utils.bigquery__intersect": {
            "unique_id": "macro.dbt_utils.bigquery__intersect",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/intersect.sql",
            "original_file_path": "macros/cross_db_utils/intersect.sql",
            "name": "bigquery__intersect",
            "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.998347,
            "supported_languages": null
        },
        "macro.dbt_utils.concat": {
            "unique_id": "macro.dbt_utils.concat",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/concat.sql",
            "original_file_path": "macros/cross_db_utils/concat.sql",
            "name": "concat",
            "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt_utils')(fields)) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__concat"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.9991705,
            "supported_languages": null
        },
        "macro.dbt_utils.default__concat": {
            "unique_id": "macro.dbt_utils.default__concat",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/concat.sql",
            "original_file_path": "macros/cross_db_utils/concat.sql",
            "name": "default__concat",
            "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252906.999511,
            "supported_languages": null
        },
        "macro.dbt_utils.identifier": {
            "unique_id": "macro.dbt_utils.identifier",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/identifier.sql",
            "original_file_path": "macros/cross_db_utils/identifier.sql",
            "name": "identifier",
            "macro_sql": "{% macro identifier(value) %}\t\n  {%- set error_message = '\n    Warning: the `identifier` macro is no longer supported and will be deprecated in a future release of dbt-utils. \\\n    Use `adapter.quote` instead. The {}.{} model triggered this warning. \\\n    '.format(model.package_name, model.name) -%}\n  {%- do exceptions.warn(error_message) -%}\n  {{ return(adapter.dispatch('identifier', 'dbt_utils') (value)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.bigquery__identifier"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252907.0008752,
            "supported_languages": null
        },
        "macro.dbt_utils.default__identifier": {
            "unique_id": "macro.dbt_utils.default__identifier",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/identifier.sql",
            "original_file_path": "macros/cross_db_utils/identifier.sql",
            "name": "default__identifier",
            "macro_sql": "{% macro default__identifier(value) -%}\t\n    \"{{ value }}\"\t\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252907.0012817,
            "supported_languages": null
        },
        "macro.dbt_utils.bigquery__identifier": {
            "unique_id": "macro.dbt_utils.bigquery__identifier",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/identifier.sql",
            "original_file_path": "macros/cross_db_utils/identifier.sql",
            "name": "bigquery__identifier",
            "macro_sql": "{% macro bigquery__identifier(value) -%}\t\n    `{{ value }}`\t\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252907.001606,
            "supported_languages": null
        },
        "macro.dbt_utils.dateadd": {
            "unique_id": "macro.dbt_utils.dateadd",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/dateadd.sql",
            "original_file_path": "macros/cross_db_utils/dateadd.sql",
            "name": "dateadd",
            "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt_utils')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.bigquery__dateadd"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252907.003039,
            "supported_languages": null
        },
        "macro.dbt_utils.default__dateadd": {
            "unique_id": "macro.dbt_utils.default__dateadd",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/dateadd.sql",
            "original_file_path": "macros/cross_db_utils/dateadd.sql",
            "name": "default__dateadd",
            "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252907.003612,
            "supported_languages": null
        },
        "macro.dbt_utils.bigquery__dateadd": {
            "unique_id": "macro.dbt_utils.bigquery__dateadd",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/dateadd.sql",
            "original_file_path": "macros/cross_db_utils/dateadd.sql",
            "name": "bigquery__dateadd",
            "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252907.004058,
            "supported_languages": null
        },
        "macro.dbt_utils.postgres__dateadd": {
            "unique_id": "macro.dbt_utils.postgres__dateadd",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/dateadd.sql",
            "original_file_path": "macros/cross_db_utils/dateadd.sql",
            "name": "postgres__dateadd",
            "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252907.0045433,
            "supported_languages": null
        },
        "macro.dbt_utils.redshift__dateadd": {
            "unique_id": "macro.dbt_utils.redshift__dateadd",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/dateadd.sql",
            "original_file_path": "macros/cross_db_utils/dateadd.sql",
            "name": "redshift__dateadd",
            "macro_sql": "{% macro redshift__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ return(dbt_utils.default__dateadd(datepart, interval, from_date_or_timestamp)) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__dateadd"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252907.0050735,
            "supported_languages": null
        },
        "macro.dbt_utils.cast_bool_to_text": {
            "unique_id": "macro.dbt_utils.cast_bool_to_text",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/cast_bool_to_text.sql",
            "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql",
            "name": "cast_bool_to_text",
            "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt_utils') (field) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__cast_bool_to_text"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252907.0060122,
            "supported_languages": null
        },
        "macro.dbt_utils.default__cast_bool_to_text": {
            "unique_id": "macro.dbt_utils.default__cast_bool_to_text",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/cast_bool_to_text.sql",
            "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql",
            "name": "default__cast_bool_to_text",
            "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ dbt_utils.type_string() }})\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.type_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252907.0064065,
            "supported_languages": null
        },
        "macro.dbt_utils.redshift__cast_bool_to_text": {
            "unique_id": "macro.dbt_utils.redshift__cast_bool_to_text",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/cross_db_utils/cast_bool_to_text.sql",
            "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql",
            "name": "redshift__cast_bool_to_text",
            "macro_sql": "{% macro redshift__cast_bool_to_text(field) %}\n    case\n        when {{ field }} is true then 'true'\n        when {{ field }} is false then 'false'\n    end::text\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252907.0068002,
            "supported_languages": null
        },
        "macro.dbt_utils.get_url_parameter": {
            "unique_id": "macro.dbt_utils.get_url_parameter",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/web/get_url_parameter.sql",
            "original_file_path": "macros/web/get_url_parameter.sql",
            "name": "get_url_parameter",
            "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_url_parameter"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252907.0077817,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_url_parameter": {
            "unique_id": "macro.dbt_utils.default__get_url_parameter",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/web/get_url_parameter.sql",
            "original_file_path": "macros/web/get_url_parameter.sql",
            "name": "default__get_url_parameter",
            "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt_utils.split_part(dbt_utils.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.split_part"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252907.008622,
            "supported_languages": null
        },
        "macro.dbt_utils.get_url_path": {
            "unique_id": "macro.dbt_utils.get_url_path",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/web/get_url_path.sql",
            "original_file_path": "macros/web/get_url_path.sql",
            "name": "get_url_path",
            "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_url_path"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252907.0098126,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_url_path": {
            "unique_id": "macro.dbt_utils.default__get_url_path",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/web/get_url_path.sql",
            "original_file_path": "macros/web/get_url_path.sql",
            "name": "default__get_url_path",
            "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url = \n        dbt_utils.replace(\n            dbt_utils.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{dbt_utils.position(\"'/'\", stripped_url)}}, 0),\n            {{dbt_utils.position(\"'?'\", stripped_url)}} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt_utils.split_part(\n            dbt_utils.right(\n                stripped_url, \n                dbt_utils.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ), \n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt_utils.safe_cast(\n        parsed_path,\n        dbt_utils.type_string()\n    )}}\n    \n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.replace",
                    "macro.dbt_utils.position",
                    "macro.dbt_utils.split_part",
                    "macro.dbt_utils.right",
                    "macro.dbt_utils.length",
                    "macro.dbt_utils.safe_cast",
                    "macro.dbt_utils.type_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252907.0115364,
            "supported_languages": null
        },
        "macro.dbt_utils.get_url_host": {
            "unique_id": "macro.dbt_utils.get_url_host",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/web/get_url_host.sql",
            "original_file_path": "macros/web/get_url_host.sql",
            "name": "get_url_host",
            "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_url_host"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252907.0125546,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_url_host": {
            "unique_id": "macro.dbt_utils.default__get_url_host",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/web/get_url_host.sql",
            "original_file_path": "macros/web/get_url_host.sql",
            "name": "default__get_url_host",
            "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt_utils.split_part(\n        dbt_utils.split_part(\n            dbt_utils.replace(\n                dbt_utils.replace(\n                    dbt_utils.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt_utils.safe_cast(\n        parsed,\n        dbt_utils.type_string()\n        )}}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.split_part",
                    "macro.dbt_utils.replace",
                    "macro.dbt_utils.safe_cast",
                    "macro.dbt_utils.type_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252907.0137525,
            "supported_languages": null
        },
        "macro.dbt_utils.get_period_boundaries": {
            "unique_id": "macro.dbt_utils.get_period_boundaries",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/materializations/insert_by_period_materialization.sql",
            "original_file_path": "macros/materializations/insert_by_period_materialization.sql",
            "name": "get_period_boundaries",
            "macro_sql": "{% macro get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n    {{ return(adapter.dispatch('get_period_boundaries', 'dbt_utils')(target_schema, target_table, timestamp_field, start_date, stop_date, period)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_period_boundaries"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252907.023358,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_period_boundaries": {
            "unique_id": "macro.dbt_utils.default__get_period_boundaries",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/materializations/insert_by_period_materialization.sql",
            "original_file_path": "macros/materializations/insert_by_period_materialization.sql",
            "name": "default__get_period_boundaries",
            "macro_sql": "{% macro default__get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n\n  {% call statement('period_boundaries', fetch_result=True) -%}\n    with data as (\n      select\n          coalesce(max(\"{{timestamp_field}}\"), '{{start_date}}')::timestamp as start_timestamp,\n          coalesce(\n            {{dbt_utils.dateadd('millisecond',\n                                -1,\n                                \"nullif('\" ~ stop_date ~ \"','')::timestamp\")}},\n            {{dbt_utils.current_timestamp()}}\n          ) as stop_timestamp\n      from \"{{target_schema}}\".\"{{target_table}}\"\n    )\n\n    select\n      start_timestamp,\n      stop_timestamp,\n      {{dbt_utils.datediff('start_timestamp',\n                           'stop_timestamp',\n                           period)}}  + 1 as num_periods\n    from data\n  {%- endcall %}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt_utils.dateadd",
                    "macro.dbt_utils.current_timestamp",
                    "macro.dbt_utils.datediff"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252907.0247233,
            "supported_languages": null
        },
        "macro.dbt_utils.get_period_sql": {
            "unique_id": "macro.dbt_utils.get_period_sql",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/materializations/insert_by_period_materialization.sql",
            "original_file_path": "macros/materializations/insert_by_period_materialization.sql",
            "name": "get_period_sql",
            "macro_sql": "{% macro get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n    {{ return(adapter.dispatch('get_period_sql', 'dbt_utils')(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_period_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252907.0255396,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_period_sql": {
            "unique_id": "macro.dbt_utils.default__get_period_sql",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/materializations/insert_by_period_materialization.sql",
            "original_file_path": "macros/materializations/insert_by_period_materialization.sql",
            "name": "default__get_period_sql",
            "macro_sql": "{% macro default__get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n  {%- set period_filter -%}\n    (\"{{timestamp_field}}\" >  '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' and\n     \"{{timestamp_field}}\" <= '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' + interval '1 {{period}}' and\n     \"{{timestamp_field}}\" <  '{{stop_timestamp}}'::timestamp)\n  {%- endset -%}\n\n  {%- set filtered_sql = sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n  select\n    {{target_cols_csv}}\n  from (\n    {{filtered_sql}}\n  )\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252907.0268893,
            "supported_languages": null
        },
        "macro.dbt_utils.materialization_insert_by_period_default": {
            "unique_id": "macro.dbt_utils.materialization_insert_by_period_default",
            "package_name": "dbt_utils",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example/dbt_packages/dbt_utils",
            "path": "macros/materializations/insert_by_period_materialization.sql",
            "original_file_path": "macros/materializations/insert_by_period_materialization.sql",
            "name": "materialization_insert_by_period_default",
            "macro_sql": "{% materialization insert_by_period, default -%}\n  {%- set timestamp_field = config.require('timestamp_field') -%}\n  {%- set start_date = config.require('start_date') -%}\n  {%- set stop_date = config.get('stop_date') or '' -%}}\n  {%- set period = config.get('period') or 'week' -%}\n\n  {%- if sql.find('__PERIOD_FILTER__') == -1 -%}\n    {%- set error_message -%}\n      Model '{{ model.unique_id }}' does not include the required string '__PERIOD_FILTER__' in its sql\n    {%- endset -%}\n    {{ exceptions.raise_compiler_error(error_message) }}\n  {%- endif -%}\n\n  {%- set identifier = model['name'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, type='table') -%}\n\n  {%- set non_destructive_mode = (flags.NON_DESTRUCTIVE == True) -%}\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n\n  {%- set should_truncate = (non_destructive_mode and full_refresh_mode and exists_as_table) -%}\n  {%- set should_drop = (not should_truncate and (full_refresh_mode or exists_not_as_table)) -%}\n  {%- set force_create = (flags.FULL_REFRESH and not flags.NON_DESTRUCTIVE) -%}\n\n  -- setup\n  {% if old_relation is none -%}\n    -- noop\n  {%- elif should_truncate -%}\n    {{adapter.truncate_relation(old_relation)}}\n  {%- elif should_drop -%}\n    {{adapter.drop_relation(old_relation)}}\n    {%- set old_relation = none -%}\n  {%- endif %}\n\n  {{run_hooks(pre_hooks, inside_transaction=False)}}\n\n  -- `begin` happens here, so `commit` after it to finish the transaction\n  {{run_hooks(pre_hooks, inside_transaction=True)}}\n  {% call statement() -%}\n    begin; -- make extra sure we've closed out the transaction\n    commit;\n  {%- endcall %}\n\n  -- build model\n  {% if force_create or old_relation is none -%}\n    {# Create an empty target table -#}\n    {% call statement('main') -%}\n      {%- set empty_sql = sql | replace(\"__PERIOD_FILTER__\", 'false') -%}\n      {{create_table_as(False, target_relation, empty_sql)}}\n    {%- endcall %}\n  {%- endif %}\n\n  {% set _ = dbt_utils.get_period_boundaries(schema,\n                                              identifier,\n                                              timestamp_field,\n                                              start_date,\n                                              stop_date,\n                                              period) %}\n  {%- set start_timestamp = load_result('period_boundaries')['data'][0][0] | string -%}\n  {%- set stop_timestamp = load_result('period_boundaries')['data'][0][1] | string -%}\n  {%- set num_periods = load_result('period_boundaries')['data'][0][2] | int -%}\n\n  {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\n  {%- set loop_vars = {'sum_rows_inserted': 0} -%}\n\n  -- commit each period as a separate transaction\n  {% for i in range(num_periods) -%}\n    {%- set msg = \"Running for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) -%}\n    {{ dbt_utils.log_info(msg) }}\n\n    {%- set tmp_identifier = model['name'] ~ '__dbt_incremental_period' ~ i ~ '_tmp' -%}\n    {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\n                                               schema=schema, type='table') -%}\n    {% call statement() -%}\n      {% set tmp_table_sql = dbt_utils.get_period_sql(target_cols_csv,\n                                                       sql,\n                                                       timestamp_field,\n                                                       period,\n                                                       start_timestamp,\n                                                       stop_timestamp,\n                                                       i) %}\n      {{dbt.create_table_as(True, tmp_relation, tmp_table_sql)}}\n    {%- endcall %}\n\n    {{adapter.expand_target_column_types(from_relation=tmp_relation,\n                                         to_relation=target_relation)}}\n    {%- set name = 'main-' ~ i -%}\n    {% call statement(name, fetch_result=True) -%}\n      insert into {{target_relation}} ({{target_cols_csv}})\n      (\n          select\n              {{target_cols_csv}}\n          from {{tmp_relation.include(schema=False)}}\n      );\n    {%- endcall %}\n    {% set result = load_result('main-' ~ i) %}\n    {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n        {% set rows_inserted = result['response']['rows_affected'] %}\n    {% else %} {# older versions #}\n        {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n    {% endif %}\n    \n    {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\n    {%- if loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %} {% endif -%}\n\n    {%- set msg = \"Ran for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) ~ \"; \" ~ rows_inserted ~ \" records inserted\" -%}\n    {{ dbt_utils.log_info(msg) }}\n\n  {%- endfor %}\n\n  {% call statement() -%}\n    begin;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=True)}}\n\n  {% call statement() -%}\n    commit;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=False)}}\n\n  {%- set status_string = \"INSERT \" ~ loop_vars['sum_rows_inserted'] -%}\n\n  {% call noop_statement('main', status_string) -%}\n    -- no-op\n  {%- endcall %}\n\n  -- Return the relations created in this materialization\n  {{ return({'relations': [target_relation]}) }}  \n\n{%- endmaterialization %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.create_table_as",
                    "macro.dbt_utils.get_period_boundaries",
                    "macro.dbt_utils.log_info",
                    "macro.dbt_utils.get_period_sql",
                    "macro.dbt.noop_statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1689252907.0405529,
            "supported_languages": [
                "sql"
            ]
        }
    },
    "docs": {
        "pipeline_example.doc_customer_nation_region": {
            "unique_id": "pipeline_example.doc_customer_nation_region",
            "package_name": "pipeline_example",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example",
            "path": "doc_customer_nation_region.md",
            "original_file_path": "docs/doc_customer_nation_region.md",
            "name": "doc_customer_nation_region",
            "block_contents": "This table is the join between REGION, NATION and CUSTOMER on REGIONKEY and NATIONKEY.\n\nThe important fields that are retained in the join are:\n* nation\n* region\n* customer_name\n* account_balance\n* market_segment"
        },
        "pipeline_example.doc_supplier_parts": {
            "unique_id": "pipeline_example.doc_supplier_parts",
            "package_name": "pipeline_example",
            "root_path": "/home/ptutak/Git/GetInData/pipeline-example",
            "path": "doc_supplier_parts.md",
            "original_file_path": "docs/doc_supplier_parts.md",
            "name": "doc_supplier_parts",
            "block_contents": "This table is the join between SUPPLIER, PARTSUPP and PART on SUPPKEY and PARTKEY.\n\nThe important fields that are retained in the join are:\n* nation_key\n* account_balance\n* supplier_name\n* available_quantity\n* supply_cost\n* part_name\n* part_manufacturing\n* part_brand\n* part_type\n* part_size"
        },
        "dbt.__overview__": {
            "unique_id": "dbt.__overview__",
            "package_name": "dbt",
            "root_path": "/home/ptutak/.pyenv/versions/3.10.12/envs/pipeline-example-3.10/lib/python3.10/site-packages/dbt/include/global_project",
            "path": "overview.md",
            "original_file_path": "docs/overview.md",
            "name": "__overview__",
            "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"
        }
    },
    "exposures": {},
    "metrics": {},
    "selectors": {},
    "disabled": {},
    "parent_map": {
        "model.pipeline_example.suppliers": [
            "source.pipeline_example.tpch.supplier"
        ],
        "model.pipeline_example.not_shiped_by_rail": [
            "source.pipeline_example.tpch.lineitem"
        ],
        "model.pipeline_example.automibile_customers_from_europe": [
            "model.pipeline_example.all_europe_region_countries",
            "source.pipeline_example.tpch.customer"
        ],
        "model.pipeline_example.supplier_with_nation": [
            "model.pipeline_example.suppliers",
            "source.pipeline_example.tpch.nation"
        ],
        "model.pipeline_example.report": [
            "model.pipeline_example.orders"
        ],
        "model.pipeline_example.all_europe_region_countries": [
            "source.pipeline_example.tpch.nation",
            "source.pipeline_example.tpch.region"
        ],
        "model.pipeline_example.supplier_parts": [
            "source.pipeline_example.tpch.part",
            "source.pipeline_example.tpch.partsupp",
            "source.pipeline_example.tpch.supplier"
        ],
        "model.pipeline_example.customer_nation_region": [
            "source.pipeline_example.tpch.customer",
            "source.pipeline_example.tpch.nation",
            "source.pipeline_example.tpch.region"
        ],
        "model.pipeline_example.orders": [
            "model.pipeline_example.automibile_customers_from_europe",
            "model.pipeline_example.not_shiped_by_rail",
            "model.pipeline_example.supplier_with_nation",
            "source.pipeline_example.tpch.orders"
        ],
        "test.pipeline_example.dbt_expectations_expect_column_values_to_be_in_set_orders_order_priority__order_priority_IS_NOT_NULL__1_URGENT.b7b4dd9884": [
            "model.pipeline_example.orders"
        ],
        "test.pipeline_example.dbt_expectations_expect_column_values_to_be_of_type_orders_order_priority__STRING.d8bd2b8c6f": [
            "model.pipeline_example.orders"
        ],
        "test.pipeline_example.dbt_expectations_expect_column_values_to_be_of_type_orders_supp_key__INT64.ae0fd6cc81": [
            "model.pipeline_example.orders"
        ],
        "test.pipeline_example.dbt_expectations_expect_column_values_to_be_of_type_orders_doy__INT64.5b2e1f6c04": [
            "model.pipeline_example.orders"
        ],
        "test.pipeline_example.dbt_expectations_expect_column_values_to_be_between_orders_doy__366__0__doy_is_not_null.4dbfc78741": [
            "model.pipeline_example.orders"
        ],
        "test.pipeline_example.dbt_expectations_expect_column_values_to_be_of_type_orders_total_price__NUMERIC.4534f99805": [
            "model.pipeline_example.orders"
        ],
        "test.pipeline_example.dbt_expectations_expect_column_values_to_be_of_type_orders_cust_key__INT64.5e6d4dcf77": [
            "model.pipeline_example.orders"
        ],
        "test.pipeline_example.dbt_expectations_expect_column_values_to_be_of_type_orders_order_key__INT64.ef26b656d1": [
            "model.pipeline_example.orders"
        ],
        "test.pipeline_example.dbt_expectations_expect_column_values_to_be_of_type_report_doy__INT64.c333569725": [
            "model.pipeline_example.report"
        ],
        "test.pipeline_example.dbt_expectations_expect_column_values_to_not_be_null_report_doy.c5ba36cd44": [
            "model.pipeline_example.report"
        ],
        "test.pipeline_example.dbt_expectations_expect_column_values_to_not_be_null_report_supp_nation.752e448473": [
            "model.pipeline_example.report"
        ],
        "test.pipeline_example.dbt_expectations_expect_column_values_to_be_of_type_report_supp_nation__STRING.fc34f7ff21": [
            "model.pipeline_example.report"
        ],
        "test.pipeline_example.dbt_expectations_expect_column_values_to_not_be_null_report_total_price_per_region.d56c3ab271": [
            "model.pipeline_example.report"
        ],
        "test.pipeline_example.dbt_expectations_expect_column_values_to_be_of_type_report_total_price_per_region__NUMERIC.d2872074c6": [
            "model.pipeline_example.report"
        ],
        "test.pipeline_example.not_null_customer_nation_region_nation_key.4603c82eb7": [
            "model.pipeline_example.customer_nation_region"
        ],
        "test.pipeline_example.not_null_supplier_parts_part_key.1d44f98a87": [
            "model.pipeline_example.supplier_parts"
        ],
        "test.pipeline_example.not_null_supplier_parts_supplier_key.208aff5b66": [
            "model.pipeline_example.supplier_parts"
        ],
        "test.pipeline_example.not_null_supplier_parts_nation_key.b82f74f6ea": [
            "model.pipeline_example.supplier_parts"
        ],
        "test.pipeline_example.dbt_utils_unique_combination_of_columns_supplier_parts_part_key__supplier_key__nation_key.29403aef32": [
            "model.pipeline_example.supplier_parts"
        ],
        "source.pipeline_example.tpch.customer": [],
        "source.pipeline_example.tpch.nation": [],
        "source.pipeline_example.tpch.region": [],
        "source.pipeline_example.tpch.supplier": [],
        "source.pipeline_example.tpch.partsupp": [],
        "source.pipeline_example.tpch.part": [],
        "source.pipeline_example.tpch.orders": [],
        "source.pipeline_example.tpch.lineitem": []
    },
    "child_map": {
        "model.pipeline_example.suppliers": [
            "model.pipeline_example.supplier_with_nation"
        ],
        "model.pipeline_example.not_shiped_by_rail": [
            "model.pipeline_example.orders"
        ],
        "model.pipeline_example.automibile_customers_from_europe": [
            "model.pipeline_example.orders"
        ],
        "model.pipeline_example.supplier_with_nation": [
            "model.pipeline_example.orders"
        ],
        "model.pipeline_example.report": [
            "test.pipeline_example.dbt_expectations_expect_column_values_to_be_of_type_report_doy__INT64.c333569725",
            "test.pipeline_example.dbt_expectations_expect_column_values_to_be_of_type_report_supp_nation__STRING.fc34f7ff21",
            "test.pipeline_example.dbt_expectations_expect_column_values_to_be_of_type_report_total_price_per_region__NUMERIC.d2872074c6",
            "test.pipeline_example.dbt_expectations_expect_column_values_to_not_be_null_report_doy.c5ba36cd44",
            "test.pipeline_example.dbt_expectations_expect_column_values_to_not_be_null_report_supp_nation.752e448473",
            "test.pipeline_example.dbt_expectations_expect_column_values_to_not_be_null_report_total_price_per_region.d56c3ab271"
        ],
        "model.pipeline_example.all_europe_region_countries": [
            "model.pipeline_example.automibile_customers_from_europe"
        ],
        "model.pipeline_example.supplier_parts": [
            "test.pipeline_example.dbt_utils_unique_combination_of_columns_supplier_parts_part_key__supplier_key__nation_key.29403aef32",
            "test.pipeline_example.not_null_supplier_parts_nation_key.b82f74f6ea",
            "test.pipeline_example.not_null_supplier_parts_part_key.1d44f98a87",
            "test.pipeline_example.not_null_supplier_parts_supplier_key.208aff5b66"
        ],
        "model.pipeline_example.customer_nation_region": [
            "test.pipeline_example.not_null_customer_nation_region_nation_key.4603c82eb7"
        ],
        "model.pipeline_example.orders": [
            "model.pipeline_example.report",
            "test.pipeline_example.dbt_expectations_expect_column_values_to_be_between_orders_doy__366__0__doy_is_not_null.4dbfc78741",
            "test.pipeline_example.dbt_expectations_expect_column_values_to_be_in_set_orders_order_priority__order_priority_IS_NOT_NULL__1_URGENT.b7b4dd9884",
            "test.pipeline_example.dbt_expectations_expect_column_values_to_be_of_type_orders_cust_key__INT64.5e6d4dcf77",
            "test.pipeline_example.dbt_expectations_expect_column_values_to_be_of_type_orders_doy__INT64.5b2e1f6c04",
            "test.pipeline_example.dbt_expectations_expect_column_values_to_be_of_type_orders_order_key__INT64.ef26b656d1",
            "test.pipeline_example.dbt_expectations_expect_column_values_to_be_of_type_orders_order_priority__STRING.d8bd2b8c6f",
            "test.pipeline_example.dbt_expectations_expect_column_values_to_be_of_type_orders_supp_key__INT64.ae0fd6cc81",
            "test.pipeline_example.dbt_expectations_expect_column_values_to_be_of_type_orders_total_price__NUMERIC.4534f99805"
        ],
        "test.pipeline_example.dbt_expectations_expect_column_values_to_be_in_set_orders_order_priority__order_priority_IS_NOT_NULL__1_URGENT.b7b4dd9884": [],
        "test.pipeline_example.dbt_expectations_expect_column_values_to_be_of_type_orders_order_priority__STRING.d8bd2b8c6f": [],
        "test.pipeline_example.dbt_expectations_expect_column_values_to_be_of_type_orders_supp_key__INT64.ae0fd6cc81": [],
        "test.pipeline_example.dbt_expectations_expect_column_values_to_be_of_type_orders_doy__INT64.5b2e1f6c04": [],
        "test.pipeline_example.dbt_expectations_expect_column_values_to_be_between_orders_doy__366__0__doy_is_not_null.4dbfc78741": [],
        "test.pipeline_example.dbt_expectations_expect_column_values_to_be_of_type_orders_total_price__NUMERIC.4534f99805": [],
        "test.pipeline_example.dbt_expectations_expect_column_values_to_be_of_type_orders_cust_key__INT64.5e6d4dcf77": [],
        "test.pipeline_example.dbt_expectations_expect_column_values_to_be_of_type_orders_order_key__INT64.ef26b656d1": [],
        "test.pipeline_example.dbt_expectations_expect_column_values_to_be_of_type_report_doy__INT64.c333569725": [],
        "test.pipeline_example.dbt_expectations_expect_column_values_to_not_be_null_report_doy.c5ba36cd44": [],
        "test.pipeline_example.dbt_expectations_expect_column_values_to_not_be_null_report_supp_nation.752e448473": [],
        "test.pipeline_example.dbt_expectations_expect_column_values_to_be_of_type_report_supp_nation__STRING.fc34f7ff21": [],
        "test.pipeline_example.dbt_expectations_expect_column_values_to_not_be_null_report_total_price_per_region.d56c3ab271": [],
        "test.pipeline_example.dbt_expectations_expect_column_values_to_be_of_type_report_total_price_per_region__NUMERIC.d2872074c6": [],
        "test.pipeline_example.not_null_customer_nation_region_nation_key.4603c82eb7": [],
        "test.pipeline_example.not_null_supplier_parts_part_key.1d44f98a87": [],
        "test.pipeline_example.not_null_supplier_parts_supplier_key.208aff5b66": [],
        "test.pipeline_example.not_null_supplier_parts_nation_key.b82f74f6ea": [],
        "test.pipeline_example.dbt_utils_unique_combination_of_columns_supplier_parts_part_key__supplier_key__nation_key.29403aef32": [],
        "source.pipeline_example.tpch.customer": [
            "model.pipeline_example.automibile_customers_from_europe",
            "model.pipeline_example.customer_nation_region"
        ],
        "source.pipeline_example.tpch.nation": [
            "model.pipeline_example.all_europe_region_countries",
            "model.pipeline_example.customer_nation_region",
            "model.pipeline_example.supplier_with_nation"
        ],
        "source.pipeline_example.tpch.region": [
            "model.pipeline_example.all_europe_region_countries",
            "model.pipeline_example.customer_nation_region"
        ],
        "source.pipeline_example.tpch.supplier": [
            "model.pipeline_example.supplier_parts",
            "model.pipeline_example.suppliers"
        ],
        "source.pipeline_example.tpch.partsupp": [
            "model.pipeline_example.supplier_parts"
        ],
        "source.pipeline_example.tpch.part": [
            "model.pipeline_example.supplier_parts"
        ],
        "source.pipeline_example.tpch.orders": [
            "model.pipeline_example.orders"
        ],
        "source.pipeline_example.tpch.lineitem": [
            "model.pipeline_example.not_shiped_by_rail"
        ]
    }
}
